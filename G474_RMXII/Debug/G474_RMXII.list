
G474_RMXII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b98  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009d78  08009d78  0000ad78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e28  08009e28  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e28  08009e28  0000ae28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e30  08009e30  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e30  08009e30  0000ae30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e34  08009e34  0000ae34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009e38  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  2000005c  08009e94  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  08009e94  0000b73c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c190  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000335b  00000000  00000000  0002721c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  0002a578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001360  00000000  00000000  0002be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e78  00000000  00000000  0002d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001efaa  00000000  00000000  00057008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011770b  00000000  00000000  00075fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018d6bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071dc  00000000  00000000  0018d700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001948dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009d60 	.word	0x08009d60

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08009d60 	.word	0x08009d60

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_ldivmod>:
 8000aac:	b97b      	cbnz	r3, 8000ace <__aeabi_ldivmod+0x22>
 8000aae:	b972      	cbnz	r2, 8000ace <__aeabi_ldivmod+0x22>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bfbe      	ittt	lt
 8000ab4:	2000      	movlt	r0, #0
 8000ab6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000aba:	e006      	blt.n	8000aca <__aeabi_ldivmod+0x1e>
 8000abc:	bf08      	it	eq
 8000abe:	2800      	cmpeq	r0, #0
 8000ac0:	bf1c      	itt	ne
 8000ac2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ac6:	f04f 30ff 	movne.w	r0, #4294967295
 8000aca:	f000 b9b5 	b.w	8000e38 <__aeabi_idiv0>
 8000ace:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	db09      	blt.n	8000aee <__aeabi_ldivmod+0x42>
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db1a      	blt.n	8000b14 <__aeabi_ldivmod+0x68>
 8000ade:	f000 f84d 	bl	8000b7c <__udivmoddi4>
 8000ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db1b      	blt.n	8000b30 <__aeabi_ldivmod+0x84>
 8000af8:	f000 f840 	bl	8000b7c <__udivmoddi4>
 8000afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b04:	b004      	add	sp, #16
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr
 8000b14:	4252      	negs	r2, r2
 8000b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1a:	f000 f82f 	bl	8000b7c <__udivmoddi4>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b26:	b004      	add	sp, #16
 8000b28:	4240      	negs	r0, r0
 8000b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2e:	4770      	bx	lr
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	f000 f821 	bl	8000b7c <__udivmoddi4>
 8000b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b42:	b004      	add	sp, #16
 8000b44:	4252      	negs	r2, r2
 8000b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b96a 	b.w	8000e38 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	460c      	mov	r4, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14e      	bne.n	8000c26 <__udivmoddi4+0xaa>
 8000b88:	4694      	mov	ip, r2
 8000b8a:	458c      	cmp	ip, r1
 8000b8c:	4686      	mov	lr, r0
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	d962      	bls.n	8000c5a <__udivmoddi4+0xde>
 8000b94:	b14a      	cbz	r2, 8000baa <__udivmoddi4+0x2e>
 8000b96:	f1c2 0320 	rsb	r3, r2, #32
 8000b9a:	4091      	lsls	r1, r2
 8000b9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba4:	4319      	orrs	r1, r3
 8000ba6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000baa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bae:	fa1f f68c 	uxth.w	r6, ip
 8000bb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bba:	fb07 1114 	mls	r1, r7, r4, r1
 8000bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc2:	fb04 f106 	mul.w	r1, r4, r6
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x64>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bd2:	f080 8112 	bcs.w	8000dfa <__udivmoddi4+0x27e>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 810f 	bls.w	8000dfa <__udivmoddi4+0x27e>
 8000bdc:	3c02      	subs	r4, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bea:	fb07 1110 	mls	r1, r7, r0, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb00 f606 	mul.w	r6, r0, r6
 8000bf6:	429e      	cmp	r6, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x94>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c02:	f080 80fc 	bcs.w	8000dfe <__udivmoddi4+0x282>
 8000c06:	429e      	cmp	r6, r3
 8000c08:	f240 80f9 	bls.w	8000dfe <__udivmoddi4+0x282>
 8000c0c:	4463      	add	r3, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	1b9b      	subs	r3, r3, r6
 8000c12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11d      	cbz	r5, 8000c22 <__udivmoddi4+0xa6>
 8000c1a:	40d3      	lsrs	r3, r2
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d905      	bls.n	8000c36 <__udivmoddi4+0xba>
 8000c2a:	b10d      	cbz	r5, 8000c30 <__udivmoddi4+0xb4>
 8000c2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c30:	2100      	movs	r1, #0
 8000c32:	4608      	mov	r0, r1
 8000c34:	e7f5      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000c36:	fab3 f183 	clz	r1, r3
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d146      	bne.n	8000ccc <__udivmoddi4+0x150>
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xcc>
 8000c42:	4290      	cmp	r0, r2
 8000c44:	f0c0 80f0 	bcc.w	8000e28 <__udivmoddi4+0x2ac>
 8000c48:	1a86      	subs	r6, r0, r2
 8000c4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	2d00      	cmp	r5, #0
 8000c52:	d0e6      	beq.n	8000c22 <__udivmoddi4+0xa6>
 8000c54:	e9c5 6300 	strd	r6, r3, [r5]
 8000c58:	e7e3      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x204>
 8000c60:	eba1 040c 	sub.w	r4, r1, ip
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	fa1f f78c 	uxth.w	r7, ip
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c7e:	fb07 f006 	mul.w	r0, r7, r6
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x11c>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x11a>
 8000c90:	4298      	cmp	r0, r3
 8000c92:	f200 80cd 	bhi.w	8000e30 <__udivmoddi4+0x2b4>
 8000c96:	4626      	mov	r6, r4
 8000c98:	1a1c      	subs	r4, r3, r0
 8000c9a:	fa1f f38e 	uxth.w	r3, lr
 8000c9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ca6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000caa:	fb00 f707 	mul.w	r7, r0, r7
 8000cae:	429f      	cmp	r7, r3
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x148>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x146>
 8000cbc:	429f      	cmp	r7, r3
 8000cbe:	f200 80b0 	bhi.w	8000e22 <__udivmoddi4+0x2a6>
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	1bdb      	subs	r3, r3, r7
 8000cc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cca:	e7a5      	b.n	8000c18 <__udivmoddi4+0x9c>
 8000ccc:	f1c1 0620 	rsb	r6, r1, #32
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cdc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce0:	ea43 030c 	orr.w	r3, r3, ip
 8000ce4:	40f4      	lsrs	r4, r6
 8000ce6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cea:	0c38      	lsrs	r0, r7, #16
 8000cec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf4:	fa1f fc87 	uxth.w	ip, r7
 8000cf8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d00:	fb0e f90c 	mul.w	r9, lr, ip
 8000d04:	45a1      	cmp	r9, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	d90a      	bls.n	8000d22 <__udivmoddi4+0x1a6>
 8000d0c:	193c      	adds	r4, r7, r4
 8000d0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d12:	f080 8084 	bcs.w	8000e1e <__udivmoddi4+0x2a2>
 8000d16:	45a1      	cmp	r9, r4
 8000d18:	f240 8081 	bls.w	8000e1e <__udivmoddi4+0x2a2>
 8000d1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d20:	443c      	add	r4, r7
 8000d22:	eba4 0409 	sub.w	r4, r4, r9
 8000d26:	fa1f f983 	uxth.w	r9, r3
 8000d2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d907      	bls.n	8000d4e <__udivmoddi4+0x1d2>
 8000d3e:	193c      	adds	r4, r7, r4
 8000d40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d44:	d267      	bcs.n	8000e16 <__udivmoddi4+0x29a>
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0x29a>
 8000d4a:	3b02      	subs	r3, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d52:	fba0 9302 	umull	r9, r3, r0, r2
 8000d56:	eba4 040c 	sub.w	r4, r4, ip
 8000d5a:	429c      	cmp	r4, r3
 8000d5c:	46ce      	mov	lr, r9
 8000d5e:	469c      	mov	ip, r3
 8000d60:	d351      	bcc.n	8000e06 <__udivmoddi4+0x28a>
 8000d62:	d04e      	beq.n	8000e02 <__udivmoddi4+0x286>
 8000d64:	b155      	cbz	r5, 8000d7c <__udivmoddi4+0x200>
 8000d66:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d72:	40cb      	lsrs	r3, r1
 8000d74:	431e      	orrs	r6, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c5 6400 	strd	r6, r4, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e750      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f103 	lsr.w	r1, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d90:	4094      	lsls	r4, r2
 8000d92:	430c      	orrs	r4, r1
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d9c:	fa1f f78c 	uxth.w	r7, ip
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3110 	mls	r1, r8, r0, r3
 8000da8:	0c23      	lsrs	r3, r4, #16
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f107 	mul.w	r1, r0, r7
 8000db2:	4299      	cmp	r1, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x24c>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dbe:	d22c      	bcs.n	8000e1a <__udivmoddi4+0x29e>
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d92a      	bls.n	8000e1a <__udivmoddi4+0x29e>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd0:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb01 f307 	mul.w	r3, r1, r7
 8000ddc:	42a3      	cmp	r3, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x276>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000de8:	d213      	bcs.n	8000e12 <__udivmoddi4+0x296>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d911      	bls.n	8000e12 <__udivmoddi4+0x296>
 8000dee:	3902      	subs	r1, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	1ae4      	subs	r4, r4, r3
 8000df4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000df8:	e739      	b.n	8000c6e <__udivmoddi4+0xf2>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	e6f0      	b.n	8000be0 <__udivmoddi4+0x64>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e706      	b.n	8000c10 <__udivmoddi4+0x94>
 8000e02:	45c8      	cmp	r8, r9
 8000e04:	d2ae      	bcs.n	8000d64 <__udivmoddi4+0x1e8>
 8000e06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e0e:	3801      	subs	r0, #1
 8000e10:	e7a8      	b.n	8000d64 <__udivmoddi4+0x1e8>
 8000e12:	4631      	mov	r1, r6
 8000e14:	e7ed      	b.n	8000df2 <__udivmoddi4+0x276>
 8000e16:	4603      	mov	r3, r0
 8000e18:	e799      	b.n	8000d4e <__udivmoddi4+0x1d2>
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e7d4      	b.n	8000dc8 <__udivmoddi4+0x24c>
 8000e1e:	46d6      	mov	lr, sl
 8000e20:	e77f      	b.n	8000d22 <__udivmoddi4+0x1a6>
 8000e22:	4463      	add	r3, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	e74d      	b.n	8000cc4 <__udivmoddi4+0x148>
 8000e28:	4606      	mov	r6, r0
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e70f      	b.n	8000c50 <__udivmoddi4+0xd4>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	e730      	b.n	8000c98 <__udivmoddi4+0x11c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <INA236Read_cx>:
 *  D16[1] :  00 CD  // D8[ 3 2 ]
 *  D16[1] | D16[0] = ABCD
 * */


uint16_t INA236Read_cx(I2C_HandleTypeDef *hi2c, uint8_t dv_addr, uint8_t ina_rg){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af04      	add	r7, sp, #16
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	70fb      	strb	r3, [r7, #3]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	70bb      	strb	r3, [r7, #2]
	 * @param : ina_rg - register address need to access
	 * @Retval: raw bit value
	 * @ex. answer = INA236Read_cx(&hi2c1, INA236_ADDR_1, INA236_RG_Current);
	 * */

	INACBffr.D32 = 0; //// buffer clear
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <INA236Read_cx+0x48>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, ina_rg, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	b299      	uxth	r1, r3
 8000e56:	78bb      	ldrb	r3, [r7, #2]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	9302      	str	r3, [sp, #8]
 8000e5e:	2302      	movs	r3, #2
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <INA236Read_cx+0x4c>)
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2301      	movs	r3, #1
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f004 f8d5 	bl	8005018 <HAL_I2C_Mem_Read>
	return INACBffr.D16[1] | INACBffr.D16[0];
 8000e6e:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <INA236Read_cx+0x48>)
 8000e70:	885a      	ldrh	r2, [r3, #2]
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <INA236Read_cx+0x48>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b29b      	uxth	r3, r3
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000078 	.word	0x20000078
 8000e88:	20000079 	.word	0x20000079
 8000e8c:	00000000 	.word	0x00000000

08000e90 <INA236_Calibrate>:
	 * */
	uint8_t resetx[2] = {0x80, 0x00};
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA236_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx[0], 2, 10);
}

void INA236_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af04      	add	r7, sp, #16
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]
	union{
		uint8_t  U8[2];
		uint16_t U16;
	}calibrator;

	float current_LSB = INA236_MAX_Expect_Current / 32768.0; // 2^15
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <INA236_Calibrate+0x80>)
 8000e9e:	617b      	str	r3, [r7, #20]

	calibrator.U16 = 0.00512 / (current_LSB * INA236_R_SHUNT_Val);
 8000ea0:	6978      	ldr	r0, [r7, #20]
 8000ea2:	f7ff fb79 	bl	8000598 <__aeabi_f2d>
 8000ea6:	a316      	add	r3, pc, #88	@ (adr r3, 8000f00 <INA236_Calibrate+0x70>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f7ff fbcc 	bl	8000648 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	a114      	add	r1, pc, #80	@ (adr r1, 8000f08 <INA236_Calibrate+0x78>)
 8000eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000eba:	f7ff fcef 	bl	800089c <__aeabi_ddiv>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f7ff fdd1 	bl	8000a6c <__aeabi_d2uiz>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	823b      	strh	r3, [r7, #16]

	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 8000ed0:	7c7b      	ldrb	r3, [r7, #17]
 8000ed2:	733b      	strb	r3, [r7, #12]
 8000ed4:	7c3b      	ldrb	r3, [r7, #16]
 8000ed6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA236_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	b299      	uxth	r1, r3
 8000edc:	230a      	movs	r3, #10
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	2205      	movs	r2, #5
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f003 ff7e 	bl	8004df0 <HAL_I2C_Mem_Write>

}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	f3af 8000 	nop.w
 8000f00:	47ae147b 	.word	0x47ae147b
 8000f04:	3f847ae1 	.word	0x3f847ae1
 8000f08:	88e368f1 	.word	0x88e368f1
 8000f0c:	3f74f8b5 	.word	0x3f74f8b5
 8000f10:	39a00000 	.word	0x39a00000
 8000f14:	00000000 	.word	0x00000000

08000f18 <INA236Read_BusV>:
//
//	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
//
//}

uint16_t INA236Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af04      	add	r7, sp, #16
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
	 *
	 * RESOLUTION: 1.6 mV / LSB
	 * @ex.
	 * */

	INACBffr.D32 = 0; //// buffer clear
 8000f24:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <INA236Read_BusV+0x68>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA236_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000f2a:	78fb      	ldrb	r3, [r7, #3]
 8000f2c:	b299      	uxth	r1, r3
 8000f2e:	230a      	movs	r3, #10
 8000f30:	9302      	str	r3, [sp, #8]
 8000f32:	2302      	movs	r3, #2
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <INA236Read_BusV+0x6c>)
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f004 f86a 	bl	8005018 <HAL_I2C_Mem_Read>

	return (INACBffr.D16[1] | INACBffr.D16[0]) * 1.6;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <INA236Read_BusV+0x68>)
 8000f46:	885a      	ldrh	r2, [r3, #2]
 8000f48:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <INA236Read_BusV+0x68>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fb0f 	bl	8000574 <__aeabi_i2d>
 8000f56:	a308      	add	r3, pc, #32	@ (adr r3, 8000f78 <INA236Read_BusV+0x60>)
 8000f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5c:	f7ff fb74 	bl	8000648 <__aeabi_dmul>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f7ff fd80 	bl	8000a6c <__aeabi_d2uiz>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29b      	uxth	r3, r3
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	9999999a 	.word	0x9999999a
 8000f7c:	3ff99999 	.word	0x3ff99999
 8000f80:	20000078 	.word	0x20000078
 8000f84:	20000079 	.word	0x20000079

08000f88 <INA236Read_Current>:

uint16_t INA236Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
	 * RESOLUTION: 500uA/LSB = 0.5mA/LSB = 1/2mA
	 *
	 * The value of the Current Register is calculated by multiplying the decimal value
	 * in the Shunt Voltage Register with the decimal value of the Calibration Register.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 8000f94:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <INA236Read_Current+0x44>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA236_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000f9a:	78fb      	ldrb	r3, [r7, #3]
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <INA236Read_Current+0x48>)
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	2204      	movs	r2, #4
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f004 f832 	bl	8005018 <HAL_I2C_Mem_Read>

	return (INACBffr.D16[1] | INACBffr.D16[0]) / 2;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <INA236Read_Current+0x44>)
 8000fb6:	885a      	ldrh	r2, [r3, #2]
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <INA236Read_Current+0x44>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	085b      	lsrs	r3, r3, #1
 8000fc2:	b29b      	uxth	r3, r3
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000078 	.word	0x20000078
 8000fd0:	20000079 	.word	0x20000079

08000fd4 <hx711_delay_us>:
/* The driver is from https://github.com/nimaltd/HX711
 * */

//#############################################################################################
void hx711_delay_us(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 8000fde:	e003      	b.n	8000fe8 <hx711_delay_us+0x14>
  {
    delay--;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	607b      	str	r3, [r7, #4]
    //__nop(); __nop(); __nop(); __nop();

    __asm("NOP");
 8000fe6:	bf00      	nop
  while (delay > 0)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f8      	bne.n	8000fe0 <hx711_delay_us+0xc>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <hx711_lock>:
//#############################################################################################
void hx711_lock(hx711_t *hx711)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 8001004:	e002      	b.n	800100c <hx711_lock+0x10>
    hx711_delay(1);
 8001006:	2001      	movs	r0, #1
 8001008:	f001 fd84 	bl	8002b14 <HAL_Delay>
  while (hx711->lock)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7d1b      	ldrb	r3, [r3, #20]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f8      	bne.n	8001006 <hx711_lock+0xa>
  hx711->lock = 1;      
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	751a      	strb	r2, [r3, #20]
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <hx711_unlock>:
//#############################################################################################
void hx711_unlock(hx711_t *hx711)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	751a      	strb	r2, [r3, #20]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <hx711_init>:
//#############################################################################################
void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	4613      	mov	r3, r2
 800104a:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f7ff ffd5 	bl	8000ffc <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	88fa      	ldrh	r2, [r7, #6]
 800105c:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001068:	815a      	strh	r2, [r3, #10]
  
  GPIO_InitTypeDef  gpio = {0};
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001082:	2302      	movs	r3, #2
 8001084:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	68b8      	ldr	r0, [r7, #8]
 8001092:	f003 fc47 	bl	8004924 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 800109a:	2301      	movs	r3, #1
 800109c:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 80010a2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80010a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	6838      	ldr	r0, [r7, #0]
 80010ae:	f003 fc39 	bl	8004924 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	891b      	ldrh	r3, [r3, #8]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4619      	mov	r1, r3
 80010be:	f003 fdcb 	bl	8004c58 <HAL_GPIO_WritePin>
  hx711_delay(10);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f001 fd26 	bl	8002b14 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	891b      	ldrh	r3, [r3, #8]
 80010d0:	2200      	movs	r2, #0
 80010d2:	4619      	mov	r1, r3
 80010d4:	f003 fdc0 	bl	8004c58 <HAL_GPIO_WritePin>
  hx711_delay(10);  
 80010d8:	200a      	movs	r0, #10
 80010da:	f001 fd1b 	bl	8002b14 <HAL_Delay>
  hx711_value(hx711);
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f000 f80a 	bl	80010f8 <hx711_value>
  hx711_value(hx711);
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 f807 	bl	80010f8 <hx711_value>
  hx711_unlock(hx711); 
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff ff99 	bl	8001022 <hx711_unlock>
}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	@ 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <hx711_value>:
//#############################################################################################
int32_t hx711_value(hx711_t *hx711)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 8001104:	f001 fcfa 	bl	8002afc <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800110a:	e00b      	b.n	8001124 <hx711_value+0x2c>
  {
    hx711_delay(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f001 fd01 	bl	8002b14 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 8001112:	f001 fcf3 	bl	8002afc <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b96      	cmp	r3, #150	@ 0x96
 800111e:	d901      	bls.n	8001124 <hx711_value+0x2c>
      return 0;
 8001120:	2300      	movs	r3, #0
 8001122:	e055      	b.n	80011d0 <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	895b      	ldrh	r3, [r3, #10]
 800112c:	4619      	mov	r1, r3
 800112e:	4610      	mov	r0, r2
 8001130:	f003 fd7a 	bl	8004c28 <HAL_GPIO_ReadPin>
 8001134:	4603      	mov	r3, r0
 8001136:	2b01      	cmp	r3, #1
 8001138:	d0e8      	beq.n	800110c <hx711_value+0x14>
  }
  for(int8_t i=0; i<24 ; i++)
 800113a:	2300      	movs	r3, #0
 800113c:	74fb      	strb	r3, [r7, #19]
 800113e:	e02a      	b.n	8001196 <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	891b      	ldrh	r3, [r3, #8]
 8001148:	2201      	movs	r2, #1
 800114a:	4619      	mov	r1, r3
 800114c:	f003 fd84 	bl	8004c58 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8001150:	f7ff ff40 	bl	8000fd4 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	891b      	ldrh	r3, [r3, #8]
 800115c:	2200      	movs	r2, #0
 800115e:	4619      	mov	r1, r3
 8001160:	f003 fd7a 	bl	8004c58 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8001164:	f7ff ff36 	bl	8000fd4 <hx711_delay_us>
    data = data << 1;    
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	895b      	ldrh	r3, [r3, #10]
 8001176:	4619      	mov	r1, r3
 8001178:	4610      	mov	r0, r2
 800117a:	f003 fd55 	bl	8004c28 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d102      	bne.n	800118a <hx711_value+0x92>
      data ++;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i<24 ; i++)
 800118a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	3301      	adds	r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	74fb      	strb	r3, [r7, #19]
 8001196:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800119a:	2b17      	cmp	r3, #23
 800119c:	ddd0      	ble.n	8001140 <hx711_value+0x48>
  }
  data = data ^ 0x800000; 
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 80011a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);   
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	891b      	ldrh	r3, [r3, #8]
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	f003 fd51 	bl	8004c58 <HAL_GPIO_WritePin>
  hx711_delay_us();
 80011b6:	f7ff ff0d 	bl	8000fd4 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	891b      	ldrh	r3, [r3, #8]
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	f003 fd47 	bl	8004c58 <HAL_GPIO_WritePin>
  hx711_delay_us();
 80011ca:	f7ff ff03 	bl	8000fd4 <hx711_delay_us>
  return data;    
 80011ce:	697b      	ldr	r3, [r7, #20]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <hx711_tare>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 80011d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff08 	bl	8000ffc <hx711_lock>
  int64_t  ave = 0;
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	81fb      	strh	r3, [r7, #14]
 80011fc:	e014      	b.n	8001228 <hx711_tare+0x50>
  {
    ave += hx711_value(hx711);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ff7a 	bl	80010f8 <hx711_value>
 8001204:	4603      	mov	r3, r0
 8001206:	17da      	asrs	r2, r3, #31
 8001208:	461c      	mov	r4, r3
 800120a:	4615      	mov	r5, r2
 800120c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001210:	eb12 0804 	adds.w	r8, r2, r4
 8001214:	eb43 0905 	adc.w	r9, r3, r5
 8001218:	e9c7 8904 	strd	r8, r9, [r7, #16]
    hx711_delay(5);
 800121c:	2005      	movs	r0, #5
 800121e:	f001 fc79 	bl	8002b14 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 8001222:	89fb      	ldrh	r3, [r7, #14]
 8001224:	3301      	adds	r3, #1
 8001226:	81fb      	strh	r3, [r7, #14]
 8001228:	89fa      	ldrh	r2, [r7, #14]
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3e6      	bcc.n	80011fe <hx711_tare+0x26>
  }
  hx711->offset = (int32_t)(ave / sample);
 8001230:	887b      	ldrh	r3, [r7, #2]
 8001232:	2200      	movs	r2, #0
 8001234:	469a      	mov	sl, r3
 8001236:	4693      	mov	fp, r2
 8001238:	4652      	mov	r2, sl
 800123a:	465b      	mov	r3, fp
 800123c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001240:	f7ff fc34 	bl	8000aac <__aeabi_ldivmod>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	60da      	str	r2, [r3, #12]
  hx711_unlock(hx711);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fee8 	bl	8001022 <hx711_unlock>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800125c <hx711_coef_set>:
  hx711_unlock(hx711);
  return answer;
}
//#############################################################################################
void hx711_coef_set(hx711_t *hx711, float coef)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	ed87 0a00 	vstr	s0, [r7]
  hx711->coef = coef;  
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	611a      	str	r2, [r3, #16]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001282:	f001 fbd6 	bl	8002a32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001286:	f000 f953 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128a:	f000 fdd3 	bl	8001e34 <MX_GPIO_Init>
  MX_DMA_Init();
 800128e:	f000 fda7 	bl	8001de0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001292:	f000 fb27 	bl	80018e4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001296:	f000 f997 	bl	80015c8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800129a:	f000 faa3 	bl	80017e4 <MX_I2C1_Init>
  MX_I2C3_Init();
 800129e:	f000 fae1 	bl	8001864 <MX_I2C3_Init>
  MX_TIM1_Init();
 80012a2:	f000 fb69 	bl	8001978 <MX_TIM1_Init>
  MX_TIM3_Init();
 80012a6:	f000 fc3b 	bl	8001b20 <MX_TIM3_Init>
  MX_TIM8_Init();
 80012aa:	f000 fc8f 	bl	8001bcc <MX_TIM8_Init>
  MX_TIM16_Init();
 80012ae:	f000 fd49 	bl	8001d44 <MX_TIM16_Init>
  MX_TIM17_Init();
 80012b2:	f000 fd6f 	bl	8001d94 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  //// ADC DMA Start --------------
  HAL_ADC_Start_DMA(&hadc1, &ADCRawread, adc_sz);
 80012b6:	2264      	movs	r2, #100	@ 0x64
 80012b8:	498a      	ldr	r1, [pc, #552]	@ (80014e4 <main+0x268>)
 80012ba:	488b      	ldr	r0, [pc, #556]	@ (80014e8 <main+0x26c>)
 80012bc:	f002 f826 	bl	800330c <HAL_ADC_Start_DMA>

  /// Timers Start ------------------------------
  HAL_TIM_Base_Start(&htim1); /// Motor
 80012c0:	488a      	ldr	r0, [pc, #552]	@ (80014ec <main+0x270>)
 80012c2:	f005 fba5 	bl	8006a10 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim16); // buzzer timer
 80012c6:	488a      	ldr	r0, [pc, #552]	@ (80014f0 <main+0x274>)
 80012c8:	f005 fc12 	bl	8006af0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80012cc:	2104      	movs	r1, #4
 80012ce:	4889      	ldr	r0, [pc, #548]	@ (80014f4 <main+0x278>)
 80012d0:	f005 ff6a 	bl	80071a8 <HAL_TIM_Encoder_Start>

  //// buzzer param setting init
  buzzr.flag = 1;
 80012d4:	4b88      	ldr	r3, [pc, #544]	@ (80014f8 <main+0x27c>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
  buzzr.priod_up = 250;
 80012da:	4b87      	ldr	r3, [pc, #540]	@ (80014f8 <main+0x27c>)
 80012dc:	22fa      	movs	r2, #250	@ 0xfa
 80012de:	805a      	strh	r2, [r3, #2]
  buzzr.priod_dn = 100;
 80012e0:	4b85      	ldr	r3, [pc, #532]	@ (80014f8 <main+0x27c>)
 80012e2:	2264      	movs	r2, #100	@ 0x64
 80012e4:	809a      	strh	r2, [r3, #4]
  buzzr.timestamp = 0;
 80012e6:	4b84      	ldr	r3, [pc, #528]	@ (80014f8 <main+0x27c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]

  timestamp.hx = 50;
 80012ec:	4b83      	ldr	r3, [pc, #524]	@ (80014fc <main+0x280>)
 80012ee:	2232      	movs	r2, #50	@ 0x32
 80012f0:	615a      	str	r2, [r3, #20]

  //// load cell HX711
  hx711_init(&loadcell, HX711_CLK_GPIO_Port, HX711_CLK_Pin, HX711_DATA_GPIO_Port, HX711_DATA_Pin);
 80012f2:	2340      	movs	r3, #64	@ 0x40
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012fa:	2280      	movs	r2, #128	@ 0x80
 80012fc:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8001300:	487f      	ldr	r0, [pc, #508]	@ (8001500 <main+0x284>)
 8001302:	f7ff fe9b 	bl	800103c <hx711_init>
  hx711_coef_set(&loadcell, 354.5); // read after calibration
 8001306:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8001504 <main+0x288>
 800130a:	487d      	ldr	r0, [pc, #500]	@ (8001500 <main+0x284>)
 800130c:	f7ff ffa6 	bl	800125c <hx711_coef_set>
  hx711_tare(&loadcell, 10);
 8001310:	210a      	movs	r1, #10
 8001312:	487b      	ldr	r0, [pc, #492]	@ (8001500 <main+0x284>)
 8001314:	f7ff ff60 	bl	80011d8 <hx711_tare>

  //// INA236 Init & calibrate for current calculation
  INA236_Calibrate(&hi2c1, INA236_A_AD_1);
 8001318:	2180      	movs	r1, #128	@ 0x80
 800131a:	487b      	ldr	r0, [pc, #492]	@ (8001508 <main+0x28c>)
 800131c:	f7ff fdb8 	bl	8000e90 <INA236_Calibrate>
  INA236_Calibrate(&hi2c1, INA236_A_AD_2);
 8001320:	2182      	movs	r1, #130	@ 0x82
 8001322:	4879      	ldr	r0, [pc, #484]	@ (8001508 <main+0x28c>)
 8001324:	f7ff fdb4 	bl	8000e90 <INA236_Calibrate>
  INA236_Calibrate(&hi2c1, INA236_A_AD_3);
 8001328:	2184      	movs	r1, #132	@ 0x84
 800132a:	4877      	ldr	r0, [pc, #476]	@ (8001508 <main+0x28c>)
 800132c:	f7ff fdb0 	bl	8000e90 <INA236_Calibrate>

  sprintf(uartTXBf,"--------------- G474_RMXII ---| %08X |-----------------\r\n", FW_Ver);
 8001330:	4a76      	ldr	r2, [pc, #472]	@ (800150c <main+0x290>)
 8001332:	4977      	ldr	r1, [pc, #476]	@ (8001510 <main+0x294>)
 8001334:	4877      	ldr	r0, [pc, #476]	@ (8001514 <main+0x298>)
 8001336:	f008 f873 	bl	8009420 <siprintf>
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)uartTXBf, strlen(uartTXBf), 10);
 800133a:	4876      	ldr	r0, [pc, #472]	@ (8001514 <main+0x298>)
 800133c:	f7fe ff70 	bl	8000220 <strlen>
 8001340:	4603      	mov	r3, r0
 8001342:	b29a      	uxth	r2, r3
 8001344:	230a      	movs	r3, #10
 8001346:	4973      	ldr	r1, [pc, #460]	@ (8001514 <main+0x298>)
 8001348:	4873      	ldr	r0, [pc, #460]	@ (8001518 <main+0x29c>)
 800134a:	f007 f9bd 	bl	80086c8 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// ADC reads
	  if(HAL_GetTick() >= timestamp.adc){
 800134e:	f001 fbd5 	bl	8002afc <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	4b69      	ldr	r3, [pc, #420]	@ (80014fc <main+0x280>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	d350      	bcc.n	80013fe <main+0x182>
		  timestamp.adc = HAL_GetTick() + 20;
 800135c:	f001 fbce 	bl	8002afc <HAL_GetTick>
 8001360:	4603      	mov	r3, r0
 8001362:	3314      	adds	r3, #20
 8001364:	4a65      	ldr	r2, [pc, #404]	@ (80014fc <main+0x280>)
 8001366:	6053      	str	r3, [r2, #4]

		  rmxii.a_hall = adc_logging(0);
 8001368:	2000      	movs	r0, #0
 800136a:	f000 fde5 	bl	8001f38 <adc_logging>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	4b6a      	ldr	r3, [pc, #424]	@ (800151c <main+0x2a0>)
 8001374:	801a      	strh	r2, [r3, #0]
		  rmxii.a_poten = adc_logging(1);
 8001376:	2001      	movs	r0, #1
 8001378:	f000 fdde 	bl	8001f38 <adc_logging>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	4b66      	ldr	r3, [pc, #408]	@ (800151c <main+0x2a0>)
 8001382:	805a      	strh	r2, [r3, #2]
		  rmxii.a_opamp = adc_logging(2);
 8001384:	2002      	movs	r0, #2
 8001386:	f000 fdd7 	bl	8001f38 <adc_logging>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	4b63      	ldr	r3, [pc, #396]	@ (800151c <main+0x2a0>)
 8001390:	80da      	strh	r2, [r3, #6]
		  rmxii.a_IA_out = adc_logging(3);
 8001392:	2003      	movs	r0, #3
 8001394:	f000 fdd0 	bl	8001f38 <adc_logging>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b5f      	ldr	r3, [pc, #380]	@ (800151c <main+0x2a0>)
 800139e:	809a      	strh	r2, [r3, #4]
		  rmxii.a_acs_a = adc_logging(4);
 80013a0:	2004      	movs	r0, #4
 80013a2:	f000 fdc9 	bl	8001f38 <adc_logging>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b5c      	ldr	r3, [pc, #368]	@ (800151c <main+0x2a0>)
 80013ac:	811a      	strh	r2, [r3, #8]
		  rmxii.a_acs_b = adc_logging(5);
 80013ae:	2005      	movs	r0, #5
 80013b0:	f000 fdc2 	bl	8001f38 <adc_logging>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b58      	ldr	r3, [pc, #352]	@ (800151c <main+0x2a0>)
 80013ba:	815a      	strh	r2, [r3, #10]
		  rmxii.a_acs_c = adc_logging(6);
 80013bc:	2006      	movs	r0, #6
 80013be:	f000 fdbb 	bl	8001f38 <adc_logging>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b55      	ldr	r3, [pc, #340]	@ (800151c <main+0x2a0>)
 80013c8:	819a      	strh	r2, [r3, #12]
		  rmxii.a_drv_a = adc_logging(7);
 80013ca:	2007      	movs	r0, #7
 80013cc:	f000 fdb4 	bl	8001f38 <adc_logging>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b51      	ldr	r3, [pc, #324]	@ (800151c <main+0x2a0>)
 80013d6:	81da      	strh	r2, [r3, #14]
		  rmxii.a_drv_b = adc_logging(8);
 80013d8:	2008      	movs	r0, #8
 80013da:	f000 fdad 	bl	8001f38 <adc_logging>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b4e      	ldr	r3, [pc, #312]	@ (800151c <main+0x2a0>)
 80013e4:	821a      	strh	r2, [r3, #16]
		  rmxii.a_drv_c = adc_logging(9);
 80013e6:	2009      	movs	r0, #9
 80013e8:	f000 fda6 	bl	8001f38 <adc_logging>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b4a      	ldr	r3, [pc, #296]	@ (800151c <main+0x2a0>)
 80013f2:	825a      	strh	r2, [r3, #18]

		  rmxii.inc_enco = TIM3->CNT; // encoder read
 80013f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001520 <main+0x2a4>)
 80013f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b48      	ldr	r3, [pc, #288]	@ (800151c <main+0x2a0>)
 80013fc:	829a      	strh	r2, [r3, #20]
	  }

	  //// Motor run sample
	  if(HAL_GetTick() >= timestamp.slope){
 80013fe:	f001 fb7d 	bl	8002afc <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	4b3d      	ldr	r3, [pc, #244]	@ (80014fc <main+0x280>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	429a      	cmp	r2, r3
 800140a:	d30b      	bcc.n	8001424 <main+0x1a8>
		  timestamp.slope = HAL_GetTick() + 2;
 800140c:	f001 fb76 	bl	8002afc <HAL_GetTick>
 8001410:	4603      	mov	r3, r0
 8001412:	3302      	adds	r3, #2
 8001414:	4a39      	ldr	r2, [pc, #228]	@ (80014fc <main+0x280>)
 8001416:	6093      	str	r3, [r2, #8]
		  slope_runner_1(1000);
 8001418:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800141c:	f000 fdb0 	bl	8001f80 <slope_runner_1>
		  motor_run_1();
 8001420:	f000 fdf0 	bl	8002004 <motor_run_1>
		   * TIM1->CCR4 = 0;
		   * */
	  }

	  //// INA236 Read
	  if(HAL_GetTick() >= timestamp.i2c){
 8001424:	f001 fb6a 	bl	8002afc <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	4b34      	ldr	r3, [pc, #208]	@ (80014fc <main+0x280>)
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	429a      	cmp	r2, r3
 8001430:	d349      	bcc.n	80014c6 <main+0x24a>
	  	timestamp.i2c = HAL_GetTick() + 1;
 8001432:	f001 fb63 	bl	8002afc <HAL_GetTick>
 8001436:	4603      	mov	r3, r0
 8001438:	3301      	adds	r3, #1
 800143a:	4a30      	ldr	r2, [pc, #192]	@ (80014fc <main+0x280>)
 800143c:	6113      	str	r3, [r2, #16]

	  	ina_s1.Bus_V = INA236Read_BusV(&hi2c1, INA236_A_AD_1);
 800143e:	2180      	movs	r1, #128	@ 0x80
 8001440:	4831      	ldr	r0, [pc, #196]	@ (8001508 <main+0x28c>)
 8001442:	f7ff fd69 	bl	8000f18 <INA236Read_BusV>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4b36      	ldr	r3, [pc, #216]	@ (8001524 <main+0x2a8>)
 800144c:	811a      	strh	r2, [r3, #8]
	  	ina_s2.Bus_V = INA236Read_BusV(&hi2c1, INA236_A_AD_2);
 800144e:	2182      	movs	r1, #130	@ 0x82
 8001450:	482d      	ldr	r0, [pc, #180]	@ (8001508 <main+0x28c>)
 8001452:	f7ff fd61 	bl	8000f18 <INA236Read_BusV>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	4b33      	ldr	r3, [pc, #204]	@ (8001528 <main+0x2ac>)
 800145c:	811a      	strh	r2, [r3, #8]
	  	ina_s3.Bus_V = INA236Read_BusV(&hi2c1, INA236_A_AD_3);
 800145e:	2184      	movs	r1, #132	@ 0x84
 8001460:	4829      	ldr	r0, [pc, #164]	@ (8001508 <main+0x28c>)
 8001462:	f7ff fd59 	bl	8000f18 <INA236Read_BusV>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b30      	ldr	r3, [pc, #192]	@ (800152c <main+0x2b0>)
 800146c:	811a      	strh	r2, [r3, #8]

	  	ina_s1.CURRENT = INA236Read_Current(&hi2c1, INA236_A_AD_1);
 800146e:	2180      	movs	r1, #128	@ 0x80
 8001470:	4825      	ldr	r0, [pc, #148]	@ (8001508 <main+0x28c>)
 8001472:	f7ff fd89 	bl	8000f88 <INA236Read_Current>
 8001476:	4603      	mov	r3, r0
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <main+0x2a8>)
 800147c:	821a      	strh	r2, [r3, #16]
	  	ina_s1.Calibra = INA236Read_cx(&hi2c1, INA236_A_AD_1, INA236_RG_Calibra);
 800147e:	2205      	movs	r2, #5
 8001480:	2180      	movs	r1, #128	@ 0x80
 8001482:	4821      	ldr	r0, [pc, #132]	@ (8001508 <main+0x28c>)
 8001484:	f7ff fcda 	bl	8000e3c <INA236Read_cx>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <main+0x2a8>)
 800148e:	825a      	strh	r2, [r3, #18]

	  	ina_s1.Manu_ID = INA236Read_cx(&hi2c1, INA236_A_AD_1, INA236_RG_Manu_ID);
 8001490:	223e      	movs	r2, #62	@ 0x3e
 8001492:	2180      	movs	r1, #128	@ 0x80
 8001494:	481c      	ldr	r0, [pc, #112]	@ (8001508 <main+0x28c>)
 8001496:	f7ff fcd1 	bl	8000e3c <INA236Read_cx>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <main+0x2a8>)
 80014a0:	831a      	strh	r2, [r3, #24]
	  	ina_s2.Manu_ID = INA236Read_cx(&hi2c1, INA236_A_AD_2, INA236_RG_Manu_ID);
 80014a2:	223e      	movs	r2, #62	@ 0x3e
 80014a4:	2182      	movs	r1, #130	@ 0x82
 80014a6:	4818      	ldr	r0, [pc, #96]	@ (8001508 <main+0x28c>)
 80014a8:	f7ff fcc8 	bl	8000e3c <INA236Read_cx>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <main+0x2ac>)
 80014b2:	831a      	strh	r2, [r3, #24]
	  	ina_s3.Manu_ID = INA236Read_cx(&hi2c1, INA236_A_AD_3, INA236_RG_Manu_ID);
 80014b4:	223e      	movs	r2, #62	@ 0x3e
 80014b6:	2184      	movs	r1, #132	@ 0x84
 80014b8:	4813      	ldr	r0, [pc, #76]	@ (8001508 <main+0x28c>)
 80014ba:	f7ff fcbf 	bl	8000e3c <INA236Read_cx>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <main+0x2b0>)
 80014c4:	831a      	strh	r2, [r3, #24]

	  }

	  //// Load cell read
	  if(HAL_GetTick() >= timestamp.hx){
 80014c6:	f001 fb19 	bl	8002afc <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <main+0x280>)
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f4ff af3c 	bcc.w	800134e <main+0xd2>
	  	 //// time stamp must be 100, 10Hz
		  timestamp.hx = HAL_GetTick() + 100;
 80014d6:	f001 fb11 	bl	8002afc <HAL_GetTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	3364      	adds	r3, #100	@ 0x64
 80014de:	4a07      	ldr	r2, [pc, #28]	@ (80014fc <main+0x280>)
 80014e0:	6153      	str	r3, [r2, #20]
	  if(HAL_GetTick() >= timestamp.adc){
 80014e2:	e734      	b.n	800134e <main+0xd2>
 80014e4:	20000400 	.word	0x20000400
 80014e8:	2000007c 	.word	0x2000007c
 80014ec:	20000284 	.word	0x20000284
 80014f0:	20000368 	.word	0x20000368
 80014f4:	200002d0 	.word	0x200002d0
 80014f8:	20000548 	.word	0x20000548
 80014fc:	2000052c 	.word	0x2000052c
 8001500:	2000057c 	.word	0x2000057c
 8001504:	43b14000 	.word	0x43b14000
 8001508:	20000148 	.word	0x20000148
 800150c:	01310524 	.word	0x01310524
 8001510:	08009d78 	.word	0x08009d78
 8001514:	200004c8 	.word	0x200004c8
 8001518:	200001f0 	.word	0x200001f0
 800151c:	20000554 	.word	0x20000554
 8001520:	40000400 	.word	0x40000400
 8001524:	20000594 	.word	0x20000594
 8001528:	200005b0 	.word	0x200005b0
 800152c:	200005cc 	.word	0x200005cc

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	@ 0x50
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0318 	add.w	r3, r7, #24
 800153a:	2238      	movs	r2, #56	@ 0x38
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f007 ff8e 	bl	8009460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001552:	2000      	movs	r0, #0
 8001554:	f004 f9d4 	bl	8005900 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001562:	2340      	movs	r3, #64	@ 0x40
 8001564:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800156a:	2302      	movs	r3, #2
 800156c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800156e:	2304      	movs	r3, #4
 8001570:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001572:	2355      	movs	r3, #85	@ 0x55
 8001574:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001576:	2302      	movs	r3, #2
 8001578:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800157a:	2302      	movs	r3, #2
 800157c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800157e:	2302      	movs	r3, #2
 8001580:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001582:	f107 0318 	add.w	r3, r7, #24
 8001586:	4618      	mov	r0, r3
 8001588:	f004 fa6e 	bl	8005a68 <HAL_RCC_OscConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001592:	f000 fe5d 	bl	8002250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	230f      	movs	r3, #15
 8001598:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2303      	movs	r3, #3
 800159c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2104      	movs	r1, #4
 80015ae:	4618      	mov	r0, r3
 80015b0:	f004 fd6c 	bl	800608c <HAL_RCC_ClockConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015ba:	f000 fe49 	bl	8002250 <Error_Handler>
  }
}
 80015be:	bf00      	nop
 80015c0:	3750      	adds	r7, #80	@ 0x50
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	@ 0x30
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2220      	movs	r2, #32
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f007 ff3d 	bl	8009460 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015e6:	4b74      	ldr	r3, [pc, #464]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 80015e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80015ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80015ee:	4b72      	ldr	r3, [pc, #456]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 80015f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80015f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015f6:	4b70      	ldr	r3, [pc, #448]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015fc:	4b6e      	ldr	r3, [pc, #440]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001602:	4b6d      	ldr	r3, [pc, #436]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001608:	4b6b      	ldr	r3, [pc, #428]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 800160a:	2201      	movs	r2, #1
 800160c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800160e:	4b6a      	ldr	r3, [pc, #424]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001610:	2204      	movs	r2, #4
 8001612:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001614:	4b68      	ldr	r3, [pc, #416]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001616:	2200      	movs	r2, #0
 8001618:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800161a:	4b67      	ldr	r3, [pc, #412]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 800161c:	2201      	movs	r2, #1
 800161e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 10;
 8001620:	4b65      	ldr	r3, [pc, #404]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001622:	220a      	movs	r2, #10
 8001624:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001626:	4b64      	ldr	r3, [pc, #400]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800162e:	4b62      	ldr	r3, [pc, #392]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001630:	2200      	movs	r2, #0
 8001632:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001634:	4b60      	ldr	r3, [pc, #384]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001636:	2200      	movs	r2, #0
 8001638:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800163a:	4b5f      	ldr	r3, [pc, #380]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001642:	4b5d      	ldr	r3, [pc, #372]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001644:	2200      	movs	r2, #0
 8001646:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001648:	4b5b      	ldr	r3, [pc, #364]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001650:	4859      	ldr	r0, [pc, #356]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001652:	f001 fc9f 	bl	8002f94 <HAL_ADC_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800165c:	f000 fdf8 	bl	8002250 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001668:	4619      	mov	r1, r3
 800166a:	4853      	ldr	r0, [pc, #332]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 800166c:	f002 fcd0 	bl	8004010 <HAL_ADCEx_MultiModeConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001676:	f000 fdeb 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800167a:	4b50      	ldr	r3, [pc, #320]	@ (80017bc <MX_ADC1_Init+0x1f4>)
 800167c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167e:	2306      	movs	r3, #6
 8001680:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001682:	2306      	movs	r3, #6
 8001684:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001686:	237f      	movs	r3, #127	@ 0x7f
 8001688:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800168a:	2304      	movs	r3, #4
 800168c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4619      	mov	r1, r3
 8001696:	4848      	ldr	r0, [pc, #288]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001698:	f001 ff2a 	bl	80034f0 <HAL_ADC_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80016a2:	f000 fdd5 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016a6:	4b46      	ldr	r3, [pc, #280]	@ (80017c0 <MX_ADC1_Init+0x1f8>)
 80016a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016aa:	230c      	movs	r3, #12
 80016ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4841      	ldr	r0, [pc, #260]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 80016b4:	f001 ff1c 	bl	80034f0 <HAL_ADC_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80016be:	f000 fdc7 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016c2:	4b40      	ldr	r3, [pc, #256]	@ (80017c4 <MX_ADC1_Init+0x1fc>)
 80016c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80016c6:	2312      	movs	r3, #18
 80016c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	4619      	mov	r1, r3
 80016ce:	483a      	ldr	r0, [pc, #232]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 80016d0:	f001 ff0e 	bl	80034f0 <HAL_ADC_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80016da:	f000 fdb9 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80016de:	4b3a      	ldr	r3, [pc, #232]	@ (80017c8 <MX_ADC1_Init+0x200>)
 80016e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80016e2:	2318      	movs	r3, #24
 80016e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4619      	mov	r1, r3
 80016ea:	4833      	ldr	r0, [pc, #204]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 80016ec:	f001 ff00 	bl	80034f0 <HAL_ADC_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80016f6:	f000 fdab 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016fa:	4b34      	ldr	r3, [pc, #208]	@ (80017cc <MX_ADC1_Init+0x204>)
 80016fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80016fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001702:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	4619      	mov	r1, r3
 8001708:	482b      	ldr	r0, [pc, #172]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 800170a:	f001 fef1 	bl	80034f0 <HAL_ADC_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8001714:	f000 fd9c 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001718:	4b2d      	ldr	r3, [pc, #180]	@ (80017d0 <MX_ADC1_Init+0x208>)
 800171a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800171c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001720:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4619      	mov	r1, r3
 8001726:	4824      	ldr	r0, [pc, #144]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001728:	f001 fee2 	bl	80034f0 <HAL_ADC_ConfigChannel>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8001732:	f000 fd8d 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001736:	4b27      	ldr	r3, [pc, #156]	@ (80017d4 <MX_ADC1_Init+0x20c>)
 8001738:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800173a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800173e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	4619      	mov	r1, r3
 8001744:	481c      	ldr	r0, [pc, #112]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001746:	f001 fed3 	bl	80034f0 <HAL_ADC_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001750:	f000 fd7e 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001754:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <MX_ADC1_Init+0x210>)
 8001756:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001758:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800175c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4815      	ldr	r0, [pc, #84]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001764:	f001 fec4 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 800176e:	f000 fd6f 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001772:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <MX_ADC1_Init+0x214>)
 8001774:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001776:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800177a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4619      	mov	r1, r3
 8001780:	480d      	ldr	r0, [pc, #52]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 8001782:	f001 feb5 	bl	80034f0 <HAL_ADC_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 800178c:	f000 fd60 	bl	8002250 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <MX_ADC1_Init+0x218>)
 8001792:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001798:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4619      	mov	r1, r3
 800179e:	4806      	ldr	r0, [pc, #24]	@ (80017b8 <MX_ADC1_Init+0x1f0>)
 80017a0:	f001 fea6 	bl	80034f0 <HAL_ADC_ConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 80017aa:	f000 fd51 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	3730      	adds	r7, #48	@ 0x30
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000007c 	.word	0x2000007c
 80017bc:	04300002 	.word	0x04300002
 80017c0:	08600004 	.word	0x08600004
 80017c4:	19200040 	.word	0x19200040
 80017c8:	3ef08000 	.word	0x3ef08000
 80017cc:	25b00200 	.word	0x25b00200
 80017d0:	1d500080 	.word	0x1d500080
 80017d4:	3ac04000 	.word	0x3ac04000
 80017d8:	21800100 	.word	0x21800100
 80017dc:	32601000 	.word	0x32601000
 80017e0:	2e300800 	.word	0x2e300800

080017e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <MX_I2C1_Init+0x74>)
 80017ea:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <MX_I2C1_Init+0x78>)
 80017ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10802D9B;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <MX_I2C1_Init+0x74>)
 80017f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <MX_I2C1_Init+0x7c>)
 80017f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017f4:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <MX_I2C1_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fa:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <MX_I2C1_Init+0x74>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001806:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <MX_I2C1_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <MX_I2C1_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800181e:	480e      	ldr	r0, [pc, #56]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001820:	f003 fa4a 	bl	8004cb8 <HAL_I2C_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800182a:	f000 fd11 	bl	8002250 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800182e:	2100      	movs	r1, #0
 8001830:	4809      	ldr	r0, [pc, #36]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001832:	f003 ffcd 	bl	80057d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800183c:	f000 fd08 	bl	8002250 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001840:	2100      	movs	r1, #0
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_I2C1_Init+0x74>)
 8001844:	f004 f80f 	bl	8005866 <HAL_I2CEx_ConfigDigitalFilter>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800184e:	f000 fcff 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000148 	.word	0x20000148
 800185c:	40005400 	.word	0x40005400
 8001860:	10802d9b 	.word	0x10802d9b

08001864 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <MX_I2C3_Init+0x74>)
 800186a:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <MX_I2C3_Init+0x78>)
 800186c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10802D9B;
 800186e:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <MX_I2C3_Init+0x74>)
 8001870:	4a1b      	ldr	r2, [pc, #108]	@ (80018e0 <MX_I2C3_Init+0x7c>)
 8001872:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001874:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <MX_I2C3_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800187a:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <MX_I2C3_Init+0x74>)
 800187c:	2201      	movs	r2, #1
 800187e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <MX_I2C3_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001886:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <MX_I2C3_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <MX_I2C3_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <MX_I2C3_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <MX_I2C3_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800189e:	480e      	ldr	r0, [pc, #56]	@ (80018d8 <MX_I2C3_Init+0x74>)
 80018a0:	f003 fa0a 	bl	8004cb8 <HAL_I2C_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80018aa:	f000 fcd1 	bl	8002250 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ae:	2100      	movs	r1, #0
 80018b0:	4809      	ldr	r0, [pc, #36]	@ (80018d8 <MX_I2C3_Init+0x74>)
 80018b2:	f003 ff8d 	bl	80057d0 <HAL_I2CEx_ConfigAnalogFilter>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018bc:	f000 fcc8 	bl	8002250 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018c0:	2100      	movs	r1, #0
 80018c2:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <MX_I2C3_Init+0x74>)
 80018c4:	f003 ffcf 	bl	8005866 <HAL_I2CEx_ConfigDigitalFilter>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018ce:	f000 fcbf 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000019c 	.word	0x2000019c
 80018dc:	40007800 	.word	0x40007800
 80018e0:	10802d9b 	.word	0x10802d9b

080018e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018e8:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 80018ea:	4a22      	ldr	r2, [pc, #136]	@ (8001974 <MX_LPUART1_UART_Init+0x90>)
 80018ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80018ee:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001902:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 8001922:	2200      	movs	r2, #0
 8001924:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001926:	4812      	ldr	r0, [pc, #72]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 8001928:	f006 fe7e 	bl	8008628 <HAL_UART_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001932:	f000 fc8d 	bl	8002250 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001936:	2100      	movs	r1, #0
 8001938:	480d      	ldr	r0, [pc, #52]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 800193a:	f007 fca7 	bl	800928c <HAL_UARTEx_SetTxFifoThreshold>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001944:	f000 fc84 	bl	8002250 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001948:	2100      	movs	r1, #0
 800194a:	4809      	ldr	r0, [pc, #36]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 800194c:	f007 fcdc 	bl	8009308 <HAL_UARTEx_SetRxFifoThreshold>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001956:	f000 fc7b 	bl	8002250 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	@ (8001970 <MX_LPUART1_UART_Init+0x8c>)
 800195c:	f007 fc5d 	bl	800921a <HAL_UARTEx_DisableFifoMode>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001966:	f000 fc73 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200001f0 	.word	0x200001f0
 8001974:	40008000 	.word	0x40008000

08001978 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b09c      	sub	sp, #112	@ 0x70
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001998:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	2234      	movs	r2, #52	@ 0x34
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f007 fd54 	bl	8009460 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019b8:	4b57      	ldr	r3, [pc, #348]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 80019ba:	4a58      	ldr	r2, [pc, #352]	@ (8001b1c <MX_TIM1_Init+0x1a4>)
 80019bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80019be:	4b56      	ldr	r3, [pc, #344]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 80019c0:	22a9      	movs	r2, #169	@ 0xa9
 80019c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c4:	4b54      	ldr	r3, [pc, #336]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80019ca:	4b53      	ldr	r3, [pc, #332]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 80019cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d2:	4b51      	ldr	r3, [pc, #324]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019de:	4b4e      	ldr	r3, [pc, #312]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019e4:	484c      	ldr	r0, [pc, #304]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 80019e6:	f004 ffbb 	bl	8006960 <HAL_TIM_Base_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019f0:	f000 fc2e 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019f8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019fe:	4619      	mov	r1, r3
 8001a00:	4845      	ldr	r0, [pc, #276]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 8001a02:	f005 fec3 	bl	800778c <HAL_TIM_ConfigClockSource>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001a0c:	f000 fc20 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a10:	4841      	ldr	r0, [pc, #260]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 8001a12:	f005 f914 	bl	8006c3e <HAL_TIM_PWM_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a1c:	f000 fc18 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a20:	2300      	movs	r3, #0
 8001a22:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a30:	4619      	mov	r1, r3
 8001a32:	4839      	ldr	r0, [pc, #228]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 8001a34:	f006 fc88 	bl	8008348 <HAL_TIMEx_MasterConfigSynchronization>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a3e:	f000 fc07 	bl	8002250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a42:	2360      	movs	r3, #96	@ 0x60
 8001a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a62:	2200      	movs	r2, #0
 8001a64:	4619      	mov	r1, r3
 8001a66:	482c      	ldr	r0, [pc, #176]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 8001a68:	f005 fd7c 	bl	8007564 <HAL_TIM_PWM_ConfigChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a72:	f000 fbed 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4826      	ldr	r0, [pc, #152]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 8001a80:	f005 fd70 	bl	8007564 <HAL_TIM_PWM_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001a8a:	f000 fbe1 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a92:	2208      	movs	r2, #8
 8001a94:	4619      	mov	r1, r3
 8001a96:	4820      	ldr	r0, [pc, #128]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 8001a98:	f005 fd64 	bl	8007564 <HAL_TIM_PWM_ConfigChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001aa2:	f000 fbd5 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aa6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001aaa:	220c      	movs	r2, #12
 8001aac:	4619      	mov	r1, r3
 8001aae:	481a      	ldr	r0, [pc, #104]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 8001ab0:	f005 fd58 	bl	8007564 <HAL_TIM_PWM_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001aba:	f000 fbc9 	bl	8002250 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ad2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ad6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001adc:	2300      	movs	r3, #0
 8001ade:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ae4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001aee:	2300      	movs	r3, #0
 8001af0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4807      	ldr	r0, [pc, #28]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 8001afc:	f006 fcba 	bl	8008474 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8001b06:	f000 fba3 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b0a:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <MX_TIM1_Init+0x1a0>)
 8001b0c:	f000 fe34 	bl	8002778 <HAL_TIM_MspPostInit>

}
 8001b10:	bf00      	nop
 8001b12:	3770      	adds	r7, #112	@ 0x70
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000284 	.word	0x20000284
 8001b1c:	40012c00 	.word	0x40012c00

08001b20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08c      	sub	sp, #48	@ 0x30
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	2224      	movs	r2, #36	@ 0x24
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f007 fc96 	bl	8009460 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b3e:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <MX_TIM3_Init+0xa4>)
 8001b40:	4a21      	ldr	r2, [pc, #132]	@ (8001bc8 <MX_TIM3_Init+0xa8>)
 8001b42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b44:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <MX_TIM3_Init+0xa4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <MX_TIM3_Init+0xa4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b50:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc4 <MX_TIM3_Init+0xa4>)
 8001b52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b58:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <MX_TIM3_Init+0xa4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <MX_TIM3_Init+0xa4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b64:	2303      	movs	r3, #3
 8001b66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480d      	ldr	r0, [pc, #52]	@ (8001bc4 <MX_TIM3_Init+0xa4>)
 8001b90:	f005 fa64 	bl	800705c <HAL_TIM_Encoder_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001b9a:	f000 fb59 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4806      	ldr	r0, [pc, #24]	@ (8001bc4 <MX_TIM3_Init+0xa4>)
 8001bac:	f006 fbcc 	bl	8008348 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001bb6:	f000 fb4b 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	3730      	adds	r7, #48	@ 0x30
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200002d0 	.word	0x200002d0
 8001bc8:	40000400 	.word	0x40000400

08001bcc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b09c      	sub	sp, #112	@ 0x70
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	615a      	str	r2, [r3, #20]
 8001bfe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2234      	movs	r2, #52	@ 0x34
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f007 fc2a 	bl	8009460 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001c0e:	4a4c      	ldr	r2, [pc, #304]	@ (8001d40 <MX_TIM8_Init+0x174>)
 8001c10:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8001c12:	4b4a      	ldr	r3, [pc, #296]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001c14:	22a9      	movs	r2, #169	@ 0xa9
 8001c16:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c18:	4b48      	ldr	r3, [pc, #288]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001c1e:	4b47      	ldr	r3, [pc, #284]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001c20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c24:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c26:	4b45      	ldr	r3, [pc, #276]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c2c:	4b43      	ldr	r3, [pc, #268]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c32:	4b42      	ldr	r3, [pc, #264]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c38:	4840      	ldr	r0, [pc, #256]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001c3a:	f004 fe91 	bl	8006960 <HAL_TIM_Base_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001c44:	f000 fb04 	bl	8002250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c4e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c52:	4619      	mov	r1, r3
 8001c54:	4839      	ldr	r0, [pc, #228]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001c56:	f005 fd99 	bl	800778c <HAL_TIM_ConfigClockSource>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001c60:	f000 faf6 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c64:	4835      	ldr	r0, [pc, #212]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001c66:	f004 ffea 	bl	8006c3e <HAL_TIM_PWM_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001c70:	f000 faee 	bl	8002250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c74:	2300      	movs	r3, #0
 8001c76:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c84:	4619      	mov	r1, r3
 8001c86:	482d      	ldr	r0, [pc, #180]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001c88:	f006 fb5e 	bl	8008348 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001c92:	f000 fadd 	bl	8002250 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c96:	2360      	movs	r3, #96	@ 0x60
 8001c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4820      	ldr	r0, [pc, #128]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001cbc:	f005 fc52 	bl	8007564 <HAL_TIM_PWM_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001cc6:	f000 fac3 	bl	8002250 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cce:	2204      	movs	r2, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481a      	ldr	r0, [pc, #104]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001cd4:	f005 fc46 	bl	8007564 <HAL_TIM_PWM_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001cde:	f000 fab7 	bl	8002250 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cfa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d12:	2300      	movs	r3, #0
 8001d14:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4807      	ldr	r0, [pc, #28]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001d20:	f006 fba8 	bl	8008474 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM8_Init+0x162>
  {
    Error_Handler();
 8001d2a:	f000 fa91 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d2e:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <MX_TIM8_Init+0x170>)
 8001d30:	f000 fd22 	bl	8002778 <HAL_TIM_MspPostInit>

}
 8001d34:	bf00      	nop
 8001d36:	3770      	adds	r7, #112	@ 0x70
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2000031c 	.word	0x2000031c
 8001d40:	40013400 	.word	0x40013400

08001d44 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d48:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <MX_TIM16_Init+0x48>)
 8001d4a:	4a11      	ldr	r2, [pc, #68]	@ (8001d90 <MX_TIM16_Init+0x4c>)
 8001d4c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1699;
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <MX_TIM16_Init+0x48>)
 8001d50:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001d54:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <MX_TIM16_Init+0x48>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4999;
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <MX_TIM16_Init+0x48>)
 8001d5e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001d62:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <MX_TIM16_Init+0x48>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <MX_TIM16_Init+0x48>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <MX_TIM16_Init+0x48>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <MX_TIM16_Init+0x48>)
 8001d78:	f004 fdf2 	bl	8006960 <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001d82:	f000 fa65 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000368 	.word	0x20000368
 8001d90:	40014400 	.word	0x40014400

08001d94 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <MX_TIM17_Init+0x44>)
 8001d9a:	4a10      	ldr	r2, [pc, #64]	@ (8001ddc <MX_TIM17_Init+0x48>)
 8001d9c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 179;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <MX_TIM17_Init+0x44>)
 8001da0:	22b3      	movs	r2, #179	@ 0xb3
 8001da2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <MX_TIM17_Init+0x44>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 39;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <MX_TIM17_Init+0x44>)
 8001dac:	2227      	movs	r2, #39	@ 0x27
 8001dae:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db0:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <MX_TIM17_Init+0x44>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001db6:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <MX_TIM17_Init+0x44>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <MX_TIM17_Init+0x44>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001dc2:	4805      	ldr	r0, [pc, #20]	@ (8001dd8 <MX_TIM17_Init+0x44>)
 8001dc4:	f004 fdcc 	bl	8006960 <HAL_TIM_Base_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001dce:	f000 fa3f 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200003b4 	.word	0x200003b4
 8001ddc:	40014800 	.word	0x40014800

08001de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001de6:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <MX_DMA_Init+0x50>)
 8001de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dea:	4a11      	ldr	r2, [pc, #68]	@ (8001e30 <MX_DMA_Init+0x50>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001df2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <MX_DMA_Init+0x50>)
 8001df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <MX_DMA_Init+0x50>)
 8001e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e02:	4a0b      	ldr	r2, [pc, #44]	@ (8001e30 <MX_DMA_Init+0x50>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <MX_DMA_Init+0x50>)
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	200b      	movs	r0, #11
 8001e1c:	f002 fadb 	bl	80043d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e20:	200b      	movs	r0, #11
 8001e22:	f002 faf2 	bl	800440a <HAL_NVIC_EnableIRQ>

}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000

08001e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	@ 0x28
 8001e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <MX_GPIO_Init+0xfc>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	4a38      	ldr	r2, [pc, #224]	@ (8001f30 <MX_GPIO_Init+0xfc>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e56:	4b36      	ldr	r3, [pc, #216]	@ (8001f30 <MX_GPIO_Init+0xfc>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e62:	4b33      	ldr	r3, [pc, #204]	@ (8001f30 <MX_GPIO_Init+0xfc>)
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	4a32      	ldr	r2, [pc, #200]	@ (8001f30 <MX_GPIO_Init+0xfc>)
 8001e68:	f043 0320 	orr.w	r3, r3, #32
 8001e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e6e:	4b30      	ldr	r3, [pc, #192]	@ (8001f30 <MX_GPIO_Init+0xfc>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <MX_GPIO_Init+0xfc>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f30 <MX_GPIO_Init+0xfc>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e86:	4b2a      	ldr	r3, [pc, #168]	@ (8001f30 <MX_GPIO_Init+0xfc>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	4b27      	ldr	r3, [pc, #156]	@ (8001f30 <MX_GPIO_Init+0xfc>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e96:	4a26      	ldr	r2, [pc, #152]	@ (8001f30 <MX_GPIO_Init+0xfc>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e9e:	4b24      	ldr	r3, [pc, #144]	@ (8001f30 <MX_GPIO_Init+0xfc>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|HX711_DATA_Pin|HX711_CLK_Pin, GPIO_PIN_RESET);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	21e0      	movs	r1, #224	@ 0xe0
 8001eae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb2:	f002 fed1 	bl	8004c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buz_1_GPIO_Port, buz_1_Pin, GPIO_PIN_RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2110      	movs	r1, #16
 8001eba:	481e      	ldr	r0, [pc, #120]	@ (8001f34 <MX_GPIO_Init+0x100>)
 8001ebc:	f002 fecc 	bl	8004c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ec0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ec6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4817      	ldr	r0, [pc, #92]	@ (8001f34 <MX_GPIO_Init+0x100>)
 8001ed8:	f002 fd24 	bl	8004924 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin HX711_DATA_Pin HX711_CLK_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|HX711_DATA_Pin|HX711_CLK_Pin;
 8001edc:	23e0      	movs	r3, #224	@ 0xe0
 8001ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef6:	f002 fd15 	bl	8004924 <HAL_GPIO_Init>

  /*Configure GPIO pin : buz_1_Pin */
  GPIO_InitStruct.Pin = buz_1_Pin;
 8001efa:	2310      	movs	r3, #16
 8001efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(buz_1_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4808      	ldr	r0, [pc, #32]	@ (8001f34 <MX_GPIO_Init+0x100>)
 8001f12:	f002 fd07 	bl	8004924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2028      	movs	r0, #40	@ 0x28
 8001f1c:	f002 fa5b 	bl	80043d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f20:	2028      	movs	r0, #40	@ 0x28
 8001f22:	f002 fa72 	bl	800440a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	@ 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	48000800 	.word	0x48000800

08001f38 <adc_logging>:
/**
  * @brief adc_logging,
  * get the ADC raw read from ADC buffer DMA
  * -> insert the average into the variable
  */
uint16_t adc_logging(uint8_t indx){
 8001f38:	b490      	push	{r4, r7}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
	uint16_t buf = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	81bb      	strh	r3, [r7, #12]
	for(register int i = indx; i < adc_sz; i += adc_am){
 8001f4a:	79fc      	ldrb	r4, [r7, #7]
 8001f4c:	e00a      	b.n	8001f64 <adc_logging+0x2c>
		buf += ADCRawread[indx];
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <adc_logging+0x44>)
 8001f52:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f56:	89bb      	ldrh	r3, [r7, #12]
 8001f58:	4413      	add	r3, r2
 8001f5a:	81bb      	strh	r3, [r7, #12]
		count++;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
	for(register int i = indx; i < adc_sz; i += adc_am){
 8001f62:	340a      	adds	r4, #10
 8001f64:	2c63      	cmp	r4, #99	@ 0x63
 8001f66:	ddf2      	ble.n	8001f4e <adc_logging+0x16>
	}
	return buf / count; //// average return
 8001f68:	89ba      	ldrh	r2, [r7, #12]
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f70:	b29b      	uxth	r3, r3
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc90      	pop	{r4, r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	20000400 	.word	0x20000400

08001f80 <slope_runner_1>:
  * run the loop of number in ramp series
  * from [1, 2,..., max, max-1, max-2,..., 2, 1]
  *
  * use case: Ramp PWM for motor drive, sample case
  */
void slope_runner_1(uint16_t max){
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	80fb      	strh	r3, [r7, #6]
	//// slope runner
	switch(slopstate){
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ffc <slope_runner_1+0x7c>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d00e      	beq.n	8001fb0 <slope_runner_1+0x30>
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d01b      	beq.n	8001fce <slope_runner_1+0x4e>
	default:
	case s_def:
		set_mot.slope = 1;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <slope_runner_1+0x80>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	809a      	strh	r2, [r3, #4]
		set_mot.cnt_slope++;
 8001f9c:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <slope_runner_1+0x80>)
 8001f9e:	88db      	ldrh	r3, [r3, #6]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <slope_runner_1+0x80>)
 8001fa6:	80da      	strh	r2, [r3, #6]
		slopstate = s_up;
 8001fa8:	4b14      	ldr	r3, [pc, #80]	@ (8001ffc <slope_runner_1+0x7c>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
		break;
 8001fae:	e01f      	b.n	8001ff0 <slope_runner_1+0x70>

	case s_up:

		set_mot.slope++;
 8001fb0:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <slope_runner_1+0x80>)
 8001fb2:	889b      	ldrh	r3, [r3, #4]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <slope_runner_1+0x80>)
 8001fba:	809a      	strh	r2, [r3, #4]
		if(set_mot.slope >= max){slopstate = s_dn;}
 8001fbc:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <slope_runner_1+0x80>)
 8001fbe:	889b      	ldrh	r3, [r3, #4]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d811      	bhi.n	8001fea <slope_runner_1+0x6a>
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <slope_runner_1+0x7c>)
 8001fc8:	2202      	movs	r2, #2
 8001fca:	701a      	strb	r2, [r3, #0]
		break;
 8001fcc:	e00d      	b.n	8001fea <slope_runner_1+0x6a>
	case s_dn:

		set_mot.slope--;
 8001fce:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <slope_runner_1+0x80>)
 8001fd0:	889b      	ldrh	r3, [r3, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <slope_runner_1+0x80>)
 8001fd8:	809a      	strh	r2, [r3, #4]
		if(set_mot.slope <= 0){slopstate = s_def;}
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <slope_runner_1+0x80>)
 8001fdc:	889b      	ldrh	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <slope_runner_1+0x6e>
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <slope_runner_1+0x7c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
		 break;
 8001fe8:	e001      	b.n	8001fee <slope_runner_1+0x6e>
		break;
 8001fea:	bf00      	nop
 8001fec:	e000      	b.n	8001ff0 <slope_runner_1+0x70>
		 break;
 8001fee:	bf00      	nop
	}//// slope runner
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	200005e9 	.word	0x200005e9
 8002000:	2000056c 	.word	0x2000056c

08002004 <motor_run_1>:
/**
  * @brief motor_run_1
  * motor driver run samples
  * get PWM from slope_runner_1
  */
void motor_run_1(){
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0

	   	//// motor state =====================================
	   switch(motstate){
 8002008:	4b34      	ldr	r3, [pc, #208]	@ (80020dc <motor_run_1+0xd8>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d01a      	beq.n	8002046 <motor_run_1+0x42>
 8002010:	2b02      	cmp	r3, #2
 8002012:	d03c      	beq.n	800208e <motor_run_1+0x8a>
	   default:
	   case m_stop:
		   set_mot.slope = 0;
 8002014:	4b32      	ldr	r3, [pc, #200]	@ (80020e0 <motor_run_1+0xdc>)
 8002016:	2200      	movs	r2, #0
 8002018:	809a      	strh	r2, [r3, #4]
		   set_mot.cnt_slope = 0;
 800201a:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <motor_run_1+0xdc>)
 800201c:	2200      	movs	r2, #0
 800201e:	80da      	strh	r2, [r3, #6]

		   if(flag.motorset){
 8002020:	4b30      	ldr	r3, [pc, #192]	@ (80020e4 <motor_run_1+0xe0>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d056      	beq.n	80020d6 <motor_run_1+0xd2>
			   motstate = m_cw;
 8002028:	4b2c      	ldr	r3, [pc, #176]	@ (80020dc <motor_run_1+0xd8>)
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
			   slopstate = s_def;
 800202e:	4b2e      	ldr	r3, [pc, #184]	@ (80020e8 <motor_run_1+0xe4>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
			   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002034:	2100      	movs	r1, #0
 8002036:	482d      	ldr	r0, [pc, #180]	@ (80020ec <motor_run_1+0xe8>)
 8002038:	f004 fe62 	bl	8006d00 <HAL_TIM_PWM_Start>
			   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800203c:	2104      	movs	r1, #4
 800203e:	482b      	ldr	r0, [pc, #172]	@ (80020ec <motor_run_1+0xe8>)
 8002040:	f004 fe5e 	bl	8006d00 <HAL_TIM_PWM_Start>
		   }

	   break;
 8002044:	e047      	b.n	80020d6 <motor_run_1+0xd2>

	   case m_cw:
		   if(flag.motorset == 0){
 8002046:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <motor_run_1+0xe0>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10a      	bne.n	8002064 <motor_run_1+0x60>
			   motstate = m_stop;
 800204e:	4b23      	ldr	r3, [pc, #140]	@ (80020dc <motor_run_1+0xd8>)
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
			   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002054:	2100      	movs	r1, #0
 8002056:	4825      	ldr	r0, [pc, #148]	@ (80020ec <motor_run_1+0xe8>)
 8002058:	f004 ff64 	bl	8006f24 <HAL_TIM_PWM_Stop>
			   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800205c:	2104      	movs	r1, #4
 800205e:	4823      	ldr	r0, [pc, #140]	@ (80020ec <motor_run_1+0xe8>)
 8002060:	f004 ff60 	bl	8006f24 <HAL_TIM_PWM_Stop>
		   }
		   if(set_mot.cntb_slope != set_mot.cnt_slope){ //// loop count reloop
 8002064:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <motor_run_1+0xdc>)
 8002066:	891a      	ldrh	r2, [r3, #8]
 8002068:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <motor_run_1+0xdc>)
 800206a:	88db      	ldrh	r3, [r3, #6]
 800206c:	429a      	cmp	r2, r3
 800206e:	d006      	beq.n	800207e <motor_run_1+0x7a>
			   set_mot.cntb_slope = set_mot.cnt_slope;
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <motor_run_1+0xdc>)
 8002072:	88da      	ldrh	r2, [r3, #6]
 8002074:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <motor_run_1+0xdc>)
 8002076:	811a      	strh	r2, [r3, #8]
				motstate = m_ccw;
 8002078:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <motor_run_1+0xd8>)
 800207a:	2202      	movs	r2, #2
 800207c:	701a      	strb	r2, [r3, #0]
			  }

			TIM1->CCR1 = set_mot.slope;
 800207e:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <motor_run_1+0xdc>)
 8002080:	889a      	ldrh	r2, [r3, #4]
 8002082:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <motor_run_1+0xec>)
 8002084:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM1->CCR2 = 0;
 8002086:	4b1a      	ldr	r3, [pc, #104]	@ (80020f0 <motor_run_1+0xec>)
 8002088:	2200      	movs	r2, #0
 800208a:	639a      	str	r2, [r3, #56]	@ 0x38

	   	   break;
 800208c:	e024      	b.n	80020d8 <motor_run_1+0xd4>

	   case m_ccw:
		   if(flag.motorset == 0){
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <motor_run_1+0xe0>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <motor_run_1+0xa8>
			   motstate = m_stop;
 8002096:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <motor_run_1+0xd8>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
			   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800209c:	2100      	movs	r1, #0
 800209e:	4813      	ldr	r0, [pc, #76]	@ (80020ec <motor_run_1+0xe8>)
 80020a0:	f004 ff40 	bl	8006f24 <HAL_TIM_PWM_Stop>
			   HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);}
 80020a4:	2104      	movs	r1, #4
 80020a6:	4811      	ldr	r0, [pc, #68]	@ (80020ec <motor_run_1+0xe8>)
 80020a8:	f004 ff3c 	bl	8006f24 <HAL_TIM_PWM_Stop>
		   if(set_mot.cntb_slope != set_mot.cnt_slope){ //// loop count reloop
 80020ac:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <motor_run_1+0xdc>)
 80020ae:	891a      	ldrh	r2, [r3, #8]
 80020b0:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <motor_run_1+0xdc>)
 80020b2:	88db      	ldrh	r3, [r3, #6]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d006      	beq.n	80020c6 <motor_run_1+0xc2>
			   set_mot.cntb_slope = set_mot.cnt_slope;
 80020b8:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <motor_run_1+0xdc>)
 80020ba:	88da      	ldrh	r2, [r3, #6]
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <motor_run_1+0xdc>)
 80020be:	811a      	strh	r2, [r3, #8]
				motstate = m_cw;
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <motor_run_1+0xd8>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
			  }

		   TIM1->CCR1 = 0;
 80020c6:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <motor_run_1+0xec>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	635a      	str	r2, [r3, #52]	@ 0x34
		   TIM1->CCR2 = set_mot.slope;
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <motor_run_1+0xdc>)
 80020ce:	889a      	ldrh	r2, [r3, #4]
 80020d0:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <motor_run_1+0xec>)
 80020d2:	639a      	str	r2, [r3, #56]	@ 0x38
		   break;
 80020d4:	e000      	b.n	80020d8 <motor_run_1+0xd4>
	   break;
 80020d6:	bf00      	nop
	   	   }// switch
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	200005e8 	.word	0x200005e8
 80020e0:	2000056c 	.word	0x2000056c
 80020e4:	20000544 	.word	0x20000544
 80020e8:	200005e9 	.word	0x200005e9
 80020ec:	20000284 	.word	0x20000284
 80020f0:	40012c00 	.word	0x40012c00

080020f4 <buzzer_scream_cnt>:
	buzzr.priod_up = 250;
	buzzr.priod_dn = 100;
	buzzer_scream_cnt(htim);

  */
void buzzer_scream_cnt(TIM_HandleTypeDef *htim){
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;

		switch(bz_st){
 80020fc:	4b37      	ldr	r3, [pc, #220]	@ (80021dc <buzzer_scream_cnt+0xe8>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d03d      	beq.n	8002180 <buzzer_scream_cnt+0x8c>
 8002104:	2b02      	cmp	r3, #2
 8002106:	d022      	beq.n	800214e <buzzer_scream_cnt+0x5a>
		default:
		case bz_init:
			HAL_GPIO_WritePin(buz_1_GPIO_Port, buz_1_Pin, GPIO_PIN_RESET);
 8002108:	2200      	movs	r2, #0
 800210a:	2110      	movs	r1, #16
 800210c:	4834      	ldr	r0, [pc, #208]	@ (80021e0 <buzzer_scream_cnt+0xec>)
 800210e:	f002 fda3 	bl	8004c58 <HAL_GPIO_WritePin>

			if(buzzr.flag){
 8002112:	4b34      	ldr	r3, [pc, #208]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d015      	beq.n	8002146 <buzzer_scream_cnt+0x52>

				HAL_TIM_Base_Start_IT(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f004 fce8 	bl	8006af0 <HAL_TIM_Base_Start_IT>
				buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 8002120:	4b30      	ldr	r3, [pc, #192]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 8002122:	885b      	ldrh	r3, [r3, #2]
 8002124:	461c      	mov	r4, r3
 8002126:	f000 fce9 	bl	8002afc <HAL_GetTick>
 800212a:	4603      	mov	r3, r0
 800212c:	4423      	add	r3, r4
 800212e:	4a2d      	ldr	r2, [pc, #180]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 8002130:	6093      	str	r3, [r2, #8]

				bz_st = bz_scream;
 8002132:	4b2a      	ldr	r3, [pc, #168]	@ (80021dc <buzzer_scream_cnt+0xe8>)
 8002134:	2202      	movs	r2, #2
 8002136:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				buzzr.flag--;
 8002138:	4b2a      	ldr	r3, [pc, #168]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	3b01      	subs	r3, #1
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b28      	ldr	r3, [pc, #160]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 8002142:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(htim);
			}

			break;
 8002144:	e046      	b.n	80021d4 <buzzer_scream_cnt+0xe0>
				HAL_TIM_Base_Stop_IT(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f004 fd4a 	bl	8006be0 <HAL_TIM_Base_Stop_IT>
			break;
 800214c:	e042      	b.n	80021d4 <buzzer_scream_cnt+0xe0>

		case bz_scream:
			HAL_GPIO_WritePin(buz_1_GPIO_Port, buz_1_Pin, GPIO_PIN_SET);
 800214e:	2201      	movs	r2, #1
 8002150:	2110      	movs	r1, #16
 8002152:	4823      	ldr	r0, [pc, #140]	@ (80021e0 <buzzer_scream_cnt+0xec>)
 8002154:	f002 fd80 	bl	8004c58 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002158:	f000 fcd0 	bl	8002afc <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	4b21      	ldr	r3, [pc, #132]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	429a      	cmp	r2, r3
 8002164:	d333      	bcc.n	80021ce <buzzer_scream_cnt+0xda>
				buzzr.timestamp = buzzr.priod_dn + HAL_GetTick();
 8002166:	4b1f      	ldr	r3, [pc, #124]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 8002168:	889b      	ldrh	r3, [r3, #4]
 800216a:	461c      	mov	r4, r3
 800216c:	f000 fcc6 	bl	8002afc <HAL_GetTick>
 8002170:	4603      	mov	r3, r0
 8002172:	4423      	add	r3, r4
 8002174:	4a1b      	ldr	r2, [pc, #108]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 8002176:	6093      	str	r3, [r2, #8]

				bz_st = bz_silent;
 8002178:	4b18      	ldr	r3, [pc, #96]	@ (80021dc <buzzer_scream_cnt+0xe8>)
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800217e:	e026      	b.n	80021ce <buzzer_scream_cnt+0xda>


		case bz_silent:
			HAL_GPIO_WritePin(buz_1_GPIO_Port, buz_1_Pin, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	2110      	movs	r1, #16
 8002184:	4816      	ldr	r0, [pc, #88]	@ (80021e0 <buzzer_scream_cnt+0xec>)
 8002186:	f002 fd67 	bl	8004c58 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 800218a:	f000 fcb7 	bl	8002afc <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	4b14      	ldr	r3, [pc, #80]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	d31c      	bcc.n	80021d2 <buzzer_scream_cnt+0xde>

				if(buzzr.flag){
 8002198:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d012      	beq.n	80021c6 <buzzer_scream_cnt+0xd2>
					buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 80021a0:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 80021a2:	885b      	ldrh	r3, [r3, #2]
 80021a4:	461c      	mov	r4, r3
 80021a6:	f000 fca9 	bl	8002afc <HAL_GetTick>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4423      	add	r3, r4
 80021ae:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 80021b0:	6093      	str	r3, [r2, #8]

					buzzr.flag--;
 80021b2:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <buzzer_scream_cnt+0xf0>)
 80021bc:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 80021be:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <buzzer_scream_cnt+0xe8>)
 80021c0:	2202      	movs	r2, #2
 80021c2:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 80021c4:	e005      	b.n	80021d2 <buzzer_scream_cnt+0xde>
				bz_st = bz_init;
 80021c6:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <buzzer_scream_cnt+0xe8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
			break;
 80021cc:	e001      	b.n	80021d2 <buzzer_scream_cnt+0xde>
			break;
 80021ce:	bf00      	nop
 80021d0:	e000      	b.n	80021d4 <buzzer_scream_cnt+0xe0>
			break;
 80021d2:	bf00      	nop
		}

}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd90      	pop	{r4, r7, pc}
 80021dc:	200005ea 	.word	0x200005ea
 80021e0:	48000800 	.word	0x48000800
 80021e4:	20000548 	.word	0x20000548

080021e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021f8:	d10e      	bne.n	8002218 <HAL_GPIO_EXTI_Callback+0x30>

		buzzr.flag = 2;
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_GPIO_EXTI_Callback+0x38>)
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
		buzzr.priod_up = 250;
 8002200:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <HAL_GPIO_EXTI_Callback+0x38>)
 8002202:	22fa      	movs	r2, #250	@ 0xfa
 8002204:	805a      	strh	r2, [r3, #2]
		buzzr.priod_dn = 100;
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_GPIO_EXTI_Callback+0x38>)
 8002208:	2264      	movs	r2, #100	@ 0x64
 800220a:	809a      	strh	r2, [r3, #4]
		buzzer_scream_cnt(&htim16);
 800220c:	4805      	ldr	r0, [pc, #20]	@ (8002224 <HAL_GPIO_EXTI_Callback+0x3c>)
 800220e:	f7ff ff71 	bl	80020f4 <buzzer_scream_cnt>

		flag.motorset = 1;
 8002212:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_GPIO_EXTI_Callback+0x40>)
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
		}
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000548 	.word	0x20000548
 8002224:	20000368 	.word	0x20000368
 8002228:	20000544 	.word	0x20000544

0800222c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	if(htim == &htim16){
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a05      	ldr	r2, [pc, #20]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d102      	bne.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x16>
		buzzer_scream_cnt(&htim16);
 800223c:	4803      	ldr	r0, [pc, #12]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800223e:	f7ff ff59 	bl	80020f4 <buzzer_scream_cnt>
	}

}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000368 	.word	0x20000368

08002250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002254:	b672      	cpsid	i
}
 8002256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <Error_Handler+0x8>

0800225c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <HAL_MspInit+0x44>)
 8002264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002266:	4a0e      	ldr	r2, [pc, #56]	@ (80022a0 <HAL_MspInit+0x44>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6613      	str	r3, [r2, #96]	@ 0x60
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_MspInit+0x44>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <HAL_MspInit+0x44>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227e:	4a08      	ldr	r2, [pc, #32]	@ (80022a0 <HAL_MspInit+0x44>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002284:	6593      	str	r3, [r2, #88]	@ 0x58
 8002286:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <HAL_MspInit+0x44>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002292:	f003 fbd9 	bl	8005a48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000

080022a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b0a0      	sub	sp, #128	@ 0x80
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022bc:	f107 0318 	add.w	r3, r7, #24
 80022c0:	2254      	movs	r2, #84	@ 0x54
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f007 f8cb 	bl	8009460 <memset>
  if(hadc->Instance==ADC1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022d2:	f040 8091 	bne.w	80023f8 <HAL_ADC_MspInit+0x154>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80022d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80022dc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80022e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022e2:	f107 0318 	add.w	r3, r7, #24
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 f8ec 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80022f2:	f7ff ffad 	bl	8002250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80022f6:	4b42      	ldr	r3, [pc, #264]	@ (8002400 <HAL_ADC_MspInit+0x15c>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	4a41      	ldr	r2, [pc, #260]	@ (8002400 <HAL_ADC_MspInit+0x15c>)
 80022fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002302:	4b3f      	ldr	r3, [pc, #252]	@ (8002400 <HAL_ADC_MspInit+0x15c>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800230e:	4b3c      	ldr	r3, [pc, #240]	@ (8002400 <HAL_ADC_MspInit+0x15c>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002312:	4a3b      	ldr	r2, [pc, #236]	@ (8002400 <HAL_ADC_MspInit+0x15c>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800231a:	4b39      	ldr	r3, [pc, #228]	@ (8002400 <HAL_ADC_MspInit+0x15c>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	4b36      	ldr	r3, [pc, #216]	@ (8002400 <HAL_ADC_MspInit+0x15c>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232a:	4a35      	ldr	r2, [pc, #212]	@ (8002400 <HAL_ADC_MspInit+0x15c>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002332:	4b33      	ldr	r3, [pc, #204]	@ (8002400 <HAL_ADC_MspInit+0x15c>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	4b30      	ldr	r3, [pc, #192]	@ (8002400 <HAL_ADC_MspInit+0x15c>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	4a2f      	ldr	r2, [pc, #188]	@ (8002400 <HAL_ADC_MspInit+0x15c>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234a:	4b2d      	ldr	r3, [pc, #180]	@ (8002400 <HAL_ADC_MspInit+0x15c>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002356:	230f      	movs	r3, #15
 8002358:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800235a:	2303      	movs	r3, #3
 800235c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002362:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002366:	4619      	mov	r1, r3
 8002368:	4826      	ldr	r0, [pc, #152]	@ (8002404 <HAL_ADC_MspInit+0x160>)
 800236a:	f002 fadb 	bl	8004924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800236e:	2303      	movs	r3, #3
 8002370:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002372:	2303      	movs	r3, #3
 8002374:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800237e:	4619      	mov	r1, r3
 8002380:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002384:	f002 face 	bl	8004924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002388:	f641 0303 	movw	r3, #6147	@ 0x1803
 800238c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800238e:	2303      	movs	r3, #3
 8002390:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002396:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800239a:	4619      	mov	r1, r3
 800239c:	481a      	ldr	r0, [pc, #104]	@ (8002408 <HAL_ADC_MspInit+0x164>)
 800239e:	f002 fac1 	bl	8004924 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80023a2:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <HAL_ADC_MspInit+0x168>)
 80023a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002410 <HAL_ADC_MspInit+0x16c>)
 80023a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80023a8:	4b18      	ldr	r3, [pc, #96]	@ (800240c <HAL_ADC_MspInit+0x168>)
 80023aa:	2205      	movs	r2, #5
 80023ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ae:	4b17      	ldr	r3, [pc, #92]	@ (800240c <HAL_ADC_MspInit+0x168>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b4:	4b15      	ldr	r3, [pc, #84]	@ (800240c <HAL_ADC_MspInit+0x168>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023ba:	4b14      	ldr	r3, [pc, #80]	@ (800240c <HAL_ADC_MspInit+0x168>)
 80023bc:	2280      	movs	r2, #128	@ 0x80
 80023be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023c0:	4b12      	ldr	r3, [pc, #72]	@ (800240c <HAL_ADC_MspInit+0x168>)
 80023c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023c8:	4b10      	ldr	r3, [pc, #64]	@ (800240c <HAL_ADC_MspInit+0x168>)
 80023ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023d0:	4b0e      	ldr	r3, [pc, #56]	@ (800240c <HAL_ADC_MspInit+0x168>)
 80023d2:	2220      	movs	r2, #32
 80023d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023d6:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <HAL_ADC_MspInit+0x168>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023dc:	480b      	ldr	r0, [pc, #44]	@ (800240c <HAL_ADC_MspInit+0x168>)
 80023de:	f002 f82f 	bl	8004440 <HAL_DMA_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_ADC_MspInit+0x148>
    {
      Error_Handler();
 80023e8:	f7ff ff32 	bl	8002250 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a07      	ldr	r2, [pc, #28]	@ (800240c <HAL_ADC_MspInit+0x168>)
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80023f2:	4a06      	ldr	r2, [pc, #24]	@ (800240c <HAL_ADC_MspInit+0x168>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023f8:	bf00      	nop
 80023fa:	3780      	adds	r7, #128	@ 0x80
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000
 8002404:	48000800 	.word	0x48000800
 8002408:	48000400 	.word	0x48000400
 800240c:	200000e8 	.word	0x200000e8
 8002410:	40020008 	.word	0x40020008

08002414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0a0      	sub	sp, #128	@ 0x80
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800242c:	f107 0318 	add.w	r3, r7, #24
 8002430:	2254      	movs	r2, #84	@ 0x54
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f007 f813 	bl	8009460 <memset>
  if(hi2c->Instance==I2C1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a3e      	ldr	r2, [pc, #248]	@ (8002538 <HAL_I2C_MspInit+0x124>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d137      	bne.n	80024b4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002444:	2340      	movs	r3, #64	@ 0x40
 8002446:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002448:	2300      	movs	r3, #0
 800244a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800244c:	f107 0318 	add.w	r3, r7, #24
 8002450:	4618      	mov	r0, r3
 8002452:	f004 f837 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800245c:	f7ff fef8 	bl	8002250 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002460:	4b36      	ldr	r3, [pc, #216]	@ (800253c <HAL_I2C_MspInit+0x128>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002464:	4a35      	ldr	r2, [pc, #212]	@ (800253c <HAL_I2C_MspInit+0x128>)
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800246c:	4b33      	ldr	r3, [pc, #204]	@ (800253c <HAL_I2C_MspInit+0x128>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002478:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800247c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800247e:	2312      	movs	r3, #18
 8002480:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800248a:	2304      	movs	r3, #4
 800248c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002492:	4619      	mov	r1, r3
 8002494:	482a      	ldr	r0, [pc, #168]	@ (8002540 <HAL_I2C_MspInit+0x12c>)
 8002496:	f002 fa45 	bl	8004924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800249a:	4b28      	ldr	r3, [pc, #160]	@ (800253c <HAL_I2C_MspInit+0x128>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_I2C_MspInit+0x128>)
 80024a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024a6:	4b25      	ldr	r3, [pc, #148]	@ (800253c <HAL_I2C_MspInit+0x128>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80024b2:	e03c      	b.n	800252e <HAL_I2C_MspInit+0x11a>
  else if(hi2c->Instance==I2C3)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a22      	ldr	r2, [pc, #136]	@ (8002544 <HAL_I2C_MspInit+0x130>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d137      	bne.n	800252e <HAL_I2C_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80024be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80024c4:	2300      	movs	r3, #0
 80024c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024c8:	f107 0318 	add.w	r3, r7, #24
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 fff9 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_MspInit+0xc8>
      Error_Handler();
 80024d8:	f7ff feba 	bl	8002250 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024dc:	4b17      	ldr	r3, [pc, #92]	@ (800253c <HAL_I2C_MspInit+0x128>)
 80024de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e0:	4a16      	ldr	r2, [pc, #88]	@ (800253c <HAL_I2C_MspInit+0x128>)
 80024e2:	f043 0304 	orr.w	r3, r3, #4
 80024e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e8:	4b14      	ldr	r3, [pc, #80]	@ (800253c <HAL_I2C_MspInit+0x128>)
 80024ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024fa:	2312      	movs	r3, #18
 80024fc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002506:	2308      	movs	r3, #8
 8002508:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800250a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800250e:	4619      	mov	r1, r3
 8002510:	480d      	ldr	r0, [pc, #52]	@ (8002548 <HAL_I2C_MspInit+0x134>)
 8002512:	f002 fa07 	bl	8004924 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002516:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HAL_I2C_MspInit+0x128>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	4a08      	ldr	r2, [pc, #32]	@ (800253c <HAL_I2C_MspInit+0x128>)
 800251c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002520:	6593      	str	r3, [r2, #88]	@ 0x58
 8002522:	4b06      	ldr	r3, [pc, #24]	@ (800253c <HAL_I2C_MspInit+0x128>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
}
 800252e:	bf00      	nop
 8002530:	3780      	adds	r7, #128	@ 0x80
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40005400 	.word	0x40005400
 800253c:	40021000 	.word	0x40021000
 8002540:	48000400 	.word	0x48000400
 8002544:	40007800 	.word	0x40007800
 8002548:	48000800 	.word	0x48000800

0800254c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b09e      	sub	sp, #120	@ 0x78
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002564:	f107 0310 	add.w	r3, r7, #16
 8002568:	2254      	movs	r2, #84	@ 0x54
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f006 ff77 	bl	8009460 <memset>
  if(huart->Instance==LPUART1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1f      	ldr	r2, [pc, #124]	@ (80025f4 <HAL_UART_MspInit+0xa8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d136      	bne.n	80025ea <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800257c:	2320      	movs	r3, #32
 800257e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4618      	mov	r0, r3
 800258a:	f003 ff9b 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002594:	f7ff fe5c 	bl	8002250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002598:	4b17      	ldr	r3, [pc, #92]	@ (80025f8 <HAL_UART_MspInit+0xac>)
 800259a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259c:	4a16      	ldr	r2, [pc, #88]	@ (80025f8 <HAL_UART_MspInit+0xac>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80025a4:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <HAL_UART_MspInit+0xac>)
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b0:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <HAL_UART_MspInit+0xac>)
 80025b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b4:	4a10      	ldr	r2, [pc, #64]	@ (80025f8 <HAL_UART_MspInit+0xac>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025bc:	4b0e      	ldr	r3, [pc, #56]	@ (80025f8 <HAL_UART_MspInit+0xac>)
 80025be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80025c8:	230c      	movs	r3, #12
 80025ca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80025d8:	230c      	movs	r3, #12
 80025da:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025e0:	4619      	mov	r1, r3
 80025e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e6:	f002 f99d 	bl	8004924 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80025ea:	bf00      	nop
 80025ec:	3778      	adds	r7, #120	@ 0x78
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40008000 	.word	0x40008000
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a34      	ldr	r2, [pc, #208]	@ (80026dc <HAL_TIM_Base_MspInit+0xe0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d11c      	bne.n	8002648 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800260e:	4b34      	ldr	r3, [pc, #208]	@ (80026e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002612:	4a33      	ldr	r2, [pc, #204]	@ (80026e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002614:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002618:	6613      	str	r3, [r2, #96]	@ 0x60
 800261a:	4b31      	ldr	r3, [pc, #196]	@ (80026e0 <HAL_TIM_Base_MspInit+0xe4>)
 800261c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	2019      	movs	r0, #25
 800262c:	f001 fed3 	bl	80043d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002630:	2019      	movs	r0, #25
 8002632:	f001 feea 	bl	800440a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	201a      	movs	r0, #26
 800263c:	f001 fecb 	bl	80043d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002640:	201a      	movs	r0, #26
 8002642:	f001 fee2 	bl	800440a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002646:	e044      	b.n	80026d2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM8)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a25      	ldr	r2, [pc, #148]	@ (80026e4 <HAL_TIM_Base_MspInit+0xe8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10c      	bne.n	800266c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002652:	4b23      	ldr	r3, [pc, #140]	@ (80026e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002656:	4a22      	ldr	r2, [pc, #136]	@ (80026e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002658:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800265c:	6613      	str	r3, [r2, #96]	@ 0x60
 800265e:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002662:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]
}
 800266a:	e032      	b.n	80026d2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1d      	ldr	r2, [pc, #116]	@ (80026e8 <HAL_TIM_Base_MspInit+0xec>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d114      	bne.n	80026a0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002676:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800267a:	4a19      	ldr	r2, [pc, #100]	@ (80026e0 <HAL_TIM_Base_MspInit+0xe4>)
 800267c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002680:	6613      	str	r3, [r2, #96]	@ 0x60
 8002682:	4b17      	ldr	r3, [pc, #92]	@ (80026e0 <HAL_TIM_Base_MspInit+0xe4>)
 8002684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	2019      	movs	r0, #25
 8002694:	f001 fe9f 	bl	80043d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002698:	2019      	movs	r0, #25
 800269a:	f001 feb6 	bl	800440a <HAL_NVIC_EnableIRQ>
}
 800269e:	e018      	b.n	80026d2 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a11      	ldr	r2, [pc, #68]	@ (80026ec <HAL_TIM_Base_MspInit+0xf0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d113      	bne.n	80026d2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <HAL_TIM_Base_MspInit+0xe4>)
 80026ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ae:	4a0c      	ldr	r2, [pc, #48]	@ (80026e0 <HAL_TIM_Base_MspInit+0xe4>)
 80026b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80026b6:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <HAL_TIM_Base_MspInit+0xe4>)
 80026b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	201a      	movs	r0, #26
 80026c8:	f001 fe85 	bl	80043d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80026cc:	201a      	movs	r0, #26
 80026ce:	f001 fe9c 	bl	800440a <HAL_NVIC_EnableIRQ>
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40013400 	.word	0x40013400
 80026e8:	40014400 	.word	0x40014400
 80026ec:	40014800 	.word	0x40014800

080026f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	@ 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a17      	ldr	r2, [pc, #92]	@ (800276c <HAL_TIM_Encoder_MspInit+0x7c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d127      	bne.n	8002762 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002712:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x80>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002716:	4a16      	ldr	r2, [pc, #88]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x80>)
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	6593      	str	r3, [r2, #88]	@ 0x58
 800271e:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x80>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x80>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	4a10      	ldr	r2, [pc, #64]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x80>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002736:	4b0e      	ldr	r3, [pc, #56]	@ (8002770 <HAL_TIM_Encoder_MspInit+0x80>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002742:	2330      	movs	r3, #48	@ 0x30
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002752:	2302      	movs	r3, #2
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4805      	ldr	r0, [pc, #20]	@ (8002774 <HAL_TIM_Encoder_MspInit+0x84>)
 800275e:	f002 f8e1 	bl	8004924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002762:	bf00      	nop
 8002764:	3728      	adds	r7, #40	@ 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40000400 	.word	0x40000400
 8002770:	40021000 	.word	0x40021000
 8002774:	48000400 	.word	0x48000400

08002778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a3b      	ldr	r2, [pc, #236]	@ (8002884 <HAL_TIM_MspPostInit+0x10c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d130      	bne.n	80027fc <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	4b3b      	ldr	r3, [pc, #236]	@ (8002888 <HAL_TIM_MspPostInit+0x110>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279e:	4a3a      	ldr	r2, [pc, #232]	@ (8002888 <HAL_TIM_MspPostInit+0x110>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027a6:	4b38      	ldr	r3, [pc, #224]	@ (8002888 <HAL_TIM_MspPostInit+0x110>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80027b2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80027b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80027c4:	2306      	movs	r3, #6
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4619      	mov	r1, r3
 80027ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027d2:	f002 f8a7 	bl	8004924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80027e8:	230b      	movs	r3, #11
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027f6:	f002 f895 	bl	8004924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80027fa:	e03e      	b.n	800287a <HAL_TIM_MspPostInit+0x102>
  else if(htim->Instance==TIM8)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a22      	ldr	r2, [pc, #136]	@ (800288c <HAL_TIM_MspPostInit+0x114>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d139      	bne.n	800287a <HAL_TIM_MspPostInit+0x102>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002806:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <HAL_TIM_MspPostInit+0x110>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280a:	4a1f      	ldr	r2, [pc, #124]	@ (8002888 <HAL_TIM_MspPostInit+0x110>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002812:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <HAL_TIM_MspPostInit+0x110>)
 8002814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <HAL_TIM_MspPostInit+0x110>)
 8002820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002822:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <HAL_TIM_MspPostInit+0x110>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800282a:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <HAL_TIM_MspPostInit+0x110>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002836:	2380      	movs	r3, #128	@ 0x80
 8002838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002846:	2304      	movs	r3, #4
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4619      	mov	r1, r3
 8002850:	480f      	ldr	r0, [pc, #60]	@ (8002890 <HAL_TIM_MspPostInit+0x118>)
 8002852:	f002 f867 	bl	8004924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800285a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8002868:	2302      	movs	r3, #2
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286c:	f107 0314 	add.w	r3, r7, #20
 8002870:	4619      	mov	r1, r3
 8002872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002876:	f002 f855 	bl	8004924 <HAL_GPIO_Init>
}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	@ 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40021000 	.word	0x40021000
 800288c:	40013400 	.word	0x40013400
 8002890:	48000800 	.word	0x48000800

08002894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <NMI_Handler+0x4>

0800289c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <HardFault_Handler+0x4>

080028a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <MemManage_Handler+0x4>

080028ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <BusFault_Handler+0x4>

080028b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <UsageFault_Handler+0x4>

080028bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ea:	f000 f8f5 	bl	8002ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028f8:	4802      	ldr	r0, [pc, #8]	@ (8002904 <DMA1_Channel1_IRQHandler+0x10>)
 80028fa:	f001 fec4 	bl	8004686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200000e8 	.word	0x200000e8

08002908 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800290c:	4803      	ldr	r0, [pc, #12]	@ (800291c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800290e:	f004 fcd9 	bl	80072c4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002912:	4803      	ldr	r0, [pc, #12]	@ (8002920 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002914:	f004 fcd6 	bl	80072c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000284 	.word	0x20000284
 8002920:	20000368 	.word	0x20000368

08002924 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002928:	4803      	ldr	r0, [pc, #12]	@ (8002938 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800292a:	f004 fccb 	bl	80072c4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800292e:	4803      	ldr	r0, [pc, #12]	@ (800293c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002930:	f004 fcc8 	bl	80072c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000284 	.word	0x20000284
 800293c:	200003b4 	.word	0x200003b4

08002940 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002944:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002948:	f002 f99e 	bl	8004c88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}

08002950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002958:	4a14      	ldr	r2, [pc, #80]	@ (80029ac <_sbrk+0x5c>)
 800295a:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <_sbrk+0x60>)
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002964:	4b13      	ldr	r3, [pc, #76]	@ (80029b4 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800296c:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <_sbrk+0x64>)
 800296e:	4a12      	ldr	r2, [pc, #72]	@ (80029b8 <_sbrk+0x68>)
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	429a      	cmp	r2, r3
 800297e:	d207      	bcs.n	8002990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002980:	f006 fd76 	bl	8009470 <__errno>
 8002984:	4603      	mov	r3, r0
 8002986:	220c      	movs	r2, #12
 8002988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	e009      	b.n	80029a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002990:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <_sbrk+0x64>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002996:	4b07      	ldr	r3, [pc, #28]	@ (80029b4 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	4a05      	ldr	r2, [pc, #20]	@ (80029b4 <_sbrk+0x64>)
 80029a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20020000 	.word	0x20020000
 80029b0:	00000400 	.word	0x00000400
 80029b4:	200005ec 	.word	0x200005ec
 80029b8:	20000740 	.word	0x20000740

080029bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029c0:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <SystemInit+0x20>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c6:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <SystemInit+0x20>)
 80029c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029e0:	480d      	ldr	r0, [pc, #52]	@ (8002a18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029e4:	f7ff ffea 	bl	80029bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e8:	480c      	ldr	r0, [pc, #48]	@ (8002a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80029ea:	490d      	ldr	r1, [pc, #52]	@ (8002a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002a24 <LoopForever+0xe>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029f0:	e002      	b.n	80029f8 <LoopCopyDataInit>

080029f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f6:	3304      	adds	r3, #4

080029f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029fc:	d3f9      	bcc.n	80029f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a00:	4c0a      	ldr	r4, [pc, #40]	@ (8002a2c <LoopForever+0x16>)
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a04:	e001      	b.n	8002a0a <LoopFillZerobss>

08002a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a08:	3204      	adds	r2, #4

08002a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a0c:	d3fb      	bcc.n	8002a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a0e:	f006 fd35 	bl	800947c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a12:	f7fe fc33 	bl	800127c <main>

08002a16 <LoopForever>:

LoopForever:
    b LoopForever
 8002a16:	e7fe      	b.n	8002a16 <LoopForever>
  ldr   r0, =_estack
 8002a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002a24:	08009e38 	.word	0x08009e38
  ldr r2, =_sbss
 8002a28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002a2c:	2000073c 	.word	0x2000073c

08002a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <ADC1_2_IRQHandler>

08002a32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	f001 fcbf 	bl	80043c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a42:	2000      	movs	r0, #0
 8002a44:	f000 f80e 	bl	8002a64 <HAL_InitTick>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	71fb      	strb	r3, [r7, #7]
 8002a52:	e001      	b.n	8002a58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a54:	f7ff fc02 	bl	800225c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a58:	79fb      	ldrb	r3, [r7, #7]

}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a70:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <HAL_InitTick+0x68>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d022      	beq.n	8002abe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a78:	4b15      	ldr	r3, [pc, #84]	@ (8002ad0 <HAL_InitTick+0x6c>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b13      	ldr	r3, [pc, #76]	@ (8002acc <HAL_InitTick+0x68>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 fcca 	bl	8004426 <HAL_SYSTICK_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10f      	bne.n	8002ab8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	d809      	bhi.n	8002ab2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa6:	f001 fc96 	bl	80043d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad4 <HAL_InitTick+0x70>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	e007      	b.n	8002ac2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	e004      	b.n	8002ac2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e001      	b.n	8002ac2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000008 	.word	0x20000008
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002adc:	4b05      	ldr	r3, [pc, #20]	@ (8002af4 <HAL_IncTick+0x1c>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <HAL_IncTick+0x20>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a03      	ldr	r2, [pc, #12]	@ (8002af4 <HAL_IncTick+0x1c>)
 8002ae8:	6013      	str	r3, [r2, #0]
}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	200005f0 	.word	0x200005f0
 8002af8:	20000008 	.word	0x20000008

08002afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return uwTick;
 8002b00:	4b03      	ldr	r3, [pc, #12]	@ (8002b10 <HAL_GetTick+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	200005f0 	.word	0x200005f0

08002b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff ffee 	bl	8002afc <HAL_GetTick>
 8002b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d004      	beq.n	8002b38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <HAL_Delay+0x40>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b38:	bf00      	nop
 8002b3a:	f7ff ffdf 	bl	8002afc <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d8f7      	bhi.n	8002b3a <HAL_Delay+0x26>
  {
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000008 	.word	0x20000008

08002b58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	609a      	str	r2, [r3, #8]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	609a      	str	r2, [r3, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3360      	adds	r3, #96	@ 0x60
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <LL_ADC_SetOffset+0x44>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	03fff000 	.word	0x03fff000

08002c08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3360      	adds	r3, #96	@ 0x60
 8002c16:	461a      	mov	r2, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3360      	adds	r3, #96	@ 0x60
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b087      	sub	sp, #28
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3360      	adds	r3, #96	@ 0x60
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3360      	adds	r3, #96	@ 0x60
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	615a      	str	r2, [r3, #20]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3330      	adds	r3, #48	@ 0x30
 8002d32:	461a      	mov	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	4413      	add	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	211f      	movs	r1, #31
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	401a      	ands	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0e9b      	lsrs	r3, r3, #26
 8002d5a:	f003 011f 	and.w	r1, r3, #31
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	fa01 f303 	lsl.w	r3, r1, r3
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b087      	sub	sp, #28
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3314      	adds	r3, #20
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	0e5b      	lsrs	r3, r3, #25
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	4413      	add	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	0d1b      	lsrs	r3, r3, #20
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	2107      	movs	r1, #7
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	401a      	ands	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	0d1b      	lsrs	r3, r3, #20
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002dc4:	bf00      	nop
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	43db      	mvns	r3, r3
 8002dea:	401a      	ands	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0318 	and.w	r3, r3, #24
 8002df2:	4908      	ldr	r1, [pc, #32]	@ (8002e14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002df4:	40d9      	lsrs	r1, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	400b      	ands	r3, r1
 8002dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	0007ffff 	.word	0x0007ffff

08002e18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 031f 	and.w	r3, r3, #31
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002e44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6093      	str	r3, [r2, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002e90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ebc:	d101      	bne.n	8002ec2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ee0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <LL_ADC_IsEnabled+0x18>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <LL_ADC_IsEnabled+0x1a>
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f2e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f32:	f043 0204 	orr.w	r2, r3, #4
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d101      	bne.n	8002f5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d101      	bne.n	8002f84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b089      	sub	sp, #36	@ 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e1a9      	b.n	8003302 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff f971 	bl	80022a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff3f 	bl	8002e58 <LL_ADC_IsDeepPowerDownEnabled>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d004      	beq.n	8002fea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff25 	bl	8002e34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ff5a 	bl	8002ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d115      	bne.n	8003026 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff3e 	bl	8002e80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003004:	4b9c      	ldr	r3, [pc, #624]	@ (8003278 <HAL_ADC_Init+0x2e4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	4a9c      	ldr	r2, [pc, #624]	@ (800327c <HAL_ADC_Init+0x2e8>)
 800300c:	fba2 2303 	umull	r2, r3, r2, r3
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003018:	e002      	b.n	8003020 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3b01      	subs	r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f9      	bne.n	800301a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff3c 	bl	8002ea8 <LL_ADC_IsInternalRegulatorEnabled>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10d      	bne.n	8003052 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303a:	f043 0210 	orr.w	r2, r3, #16
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003046:	f043 0201 	orr.w	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ff75 	bl	8002f46 <LL_ADC_REG_IsConversionOngoing>
 800305c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 8142 	bne.w	80032f0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f040 813e 	bne.w	80032f0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003078:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800307c:	f043 0202 	orr.w	r2, r3, #2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff35 	bl	8002ef8 <LL_ADC_IsEnabled>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d141      	bne.n	8003118 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800309c:	d004      	beq.n	80030a8 <HAL_ADC_Init+0x114>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a77      	ldr	r2, [pc, #476]	@ (8003280 <HAL_ADC_Init+0x2ec>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d10f      	bne.n	80030c8 <HAL_ADC_Init+0x134>
 80030a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80030ac:	f7ff ff24 	bl	8002ef8 <LL_ADC_IsEnabled>
 80030b0:	4604      	mov	r4, r0
 80030b2:	4873      	ldr	r0, [pc, #460]	@ (8003280 <HAL_ADC_Init+0x2ec>)
 80030b4:	f7ff ff20 	bl	8002ef8 <LL_ADC_IsEnabled>
 80030b8:	4603      	mov	r3, r0
 80030ba:	4323      	orrs	r3, r4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e012      	b.n	80030ee <HAL_ADC_Init+0x15a>
 80030c8:	486e      	ldr	r0, [pc, #440]	@ (8003284 <HAL_ADC_Init+0x2f0>)
 80030ca:	f7ff ff15 	bl	8002ef8 <LL_ADC_IsEnabled>
 80030ce:	4604      	mov	r4, r0
 80030d0:	486d      	ldr	r0, [pc, #436]	@ (8003288 <HAL_ADC_Init+0x2f4>)
 80030d2:	f7ff ff11 	bl	8002ef8 <LL_ADC_IsEnabled>
 80030d6:	4603      	mov	r3, r0
 80030d8:	431c      	orrs	r4, r3
 80030da:	486c      	ldr	r0, [pc, #432]	@ (800328c <HAL_ADC_Init+0x2f8>)
 80030dc:	f7ff ff0c 	bl	8002ef8 <LL_ADC_IsEnabled>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4323      	orrs	r3, r4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d012      	beq.n	8003118 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_Init+0x172>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a5f      	ldr	r2, [pc, #380]	@ (8003280 <HAL_ADC_Init+0x2ec>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_ADC_Init+0x176>
 8003106:	4a62      	ldr	r2, [pc, #392]	@ (8003290 <HAL_ADC_Init+0x2fc>)
 8003108:	e000      	b.n	800310c <HAL_ADC_Init+0x178>
 800310a:	4a62      	ldr	r2, [pc, #392]	@ (8003294 <HAL_ADC_Init+0x300>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f7ff fd20 	bl	8002b58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7f5b      	ldrb	r3, [r3, #29]
 800311c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003122:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003128:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800312e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003136:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003142:	2b01      	cmp	r3, #1
 8003144:	d106      	bne.n	8003154 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	3b01      	subs	r3, #1
 800314c:	045b      	lsls	r3, r3, #17
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003160:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003168:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	4b48      	ldr	r3, [pc, #288]	@ (8003298 <HAL_ADC_Init+0x304>)
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	69b9      	ldr	r1, [r7, #24]
 8003180:	430b      	orrs	r3, r1
 8003182:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fee4 	bl	8002f6c <LL_ADC_INJ_IsConversionOngoing>
 80031a4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d17f      	bne.n	80032ac <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d17c      	bne.n	80032ac <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031ce:	f023 0302 	bic.w	r3, r3, #2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	69b9      	ldr	r1, [r7, #24]
 80031d8:	430b      	orrs	r3, r1
 80031da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d017      	beq.n	8003214 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80031f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80031fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003200:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6911      	ldr	r1, [r2, #16]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	430b      	orrs	r3, r1
 800320e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003212:	e013      	b.n	800323c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003222:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003234:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003238:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003242:	2b01      	cmp	r3, #1
 8003244:	d12a      	bne.n	800329c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800325c:	4311      	orrs	r1, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003262:	4311      	orrs	r1, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003268:	430a      	orrs	r2, r1
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	611a      	str	r2, [r3, #16]
 8003276:	e019      	b.n	80032ac <HAL_ADC_Init+0x318>
 8003278:	20000000 	.word	0x20000000
 800327c:	053e2d63 	.word	0x053e2d63
 8003280:	50000100 	.word	0x50000100
 8003284:	50000400 	.word	0x50000400
 8003288:	50000500 	.word	0x50000500
 800328c:	50000600 	.word	0x50000600
 8003290:	50000300 	.word	0x50000300
 8003294:	50000700 	.word	0x50000700
 8003298:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10c      	bne.n	80032ce <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	f023 010f 	bic.w	r1, r3, #15
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	1e5a      	subs	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80032cc:	e007      	b.n	80032de <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 020f 	bic.w	r2, r2, #15
 80032dc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032ee:	e007      	b.n	8003300 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f4:	f043 0210 	orr.w	r2, r3, #16
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003300:	7ffb      	ldrb	r3, [r7, #31]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3724      	adds	r7, #36	@ 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd90      	pop	{r4, r7, pc}
 800330a:	bf00      	nop

0800330c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003320:	d004      	beq.n	800332c <HAL_ADC_Start_DMA+0x20>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a5a      	ldr	r2, [pc, #360]	@ (8003490 <HAL_ADC_Start_DMA+0x184>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d101      	bne.n	8003330 <HAL_ADC_Start_DMA+0x24>
 800332c:	4b59      	ldr	r3, [pc, #356]	@ (8003494 <HAL_ADC_Start_DMA+0x188>)
 800332e:	e000      	b.n	8003332 <HAL_ADC_Start_DMA+0x26>
 8003330:	4b59      	ldr	r3, [pc, #356]	@ (8003498 <HAL_ADC_Start_DMA+0x18c>)
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fd70 	bl	8002e18 <LL_ADC_GetMultimode>
 8003338:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fe01 	bl	8002f46 <LL_ADC_REG_IsConversionOngoing>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 809b 	bne.w	8003482 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_ADC_Start_DMA+0x4e>
 8003356:	2302      	movs	r3, #2
 8003358:	e096      	b.n	8003488 <HAL_ADC_Start_DMA+0x17c>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a4d      	ldr	r2, [pc, #308]	@ (800349c <HAL_ADC_Start_DMA+0x190>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d008      	beq.n	800337e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b05      	cmp	r3, #5
 8003376:	d002      	beq.n	800337e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b09      	cmp	r3, #9
 800337c:	d17a      	bne.n	8003474 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fcf6 	bl	8003d70 <ADC_Enable>
 8003384:	4603      	mov	r3, r0
 8003386:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d16d      	bne.n	800346a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003392:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003490 <HAL_ADC_Start_DMA+0x184>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_ADC_Start_DMA+0xb4>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a3b      	ldr	r2, [pc, #236]	@ (80034a0 <HAL_ADC_Start_DMA+0x194>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d002      	beq.n	80033bc <HAL_ADC_Start_DMA+0xb0>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	e003      	b.n	80033c4 <HAL_ADC_Start_DMA+0xb8>
 80033bc:	4b39      	ldr	r3, [pc, #228]	@ (80034a4 <HAL_ADC_Start_DMA+0x198>)
 80033be:	e001      	b.n	80033c4 <HAL_ADC_Start_DMA+0xb8>
 80033c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d002      	beq.n	80033d2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d105      	bne.n	80033de <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d006      	beq.n	80033f8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ee:	f023 0206 	bic.w	r2, r3, #6
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	661a      	str	r2, [r3, #96]	@ 0x60
 80033f6:	e002      	b.n	80033fe <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003402:	4a29      	ldr	r2, [pc, #164]	@ (80034a8 <HAL_ADC_Start_DMA+0x19c>)
 8003404:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340a:	4a28      	ldr	r2, [pc, #160]	@ (80034ac <HAL_ADC_Start_DMA+0x1a0>)
 800340c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003412:	4a27      	ldr	r2, [pc, #156]	@ (80034b0 <HAL_ADC_Start_DMA+0x1a4>)
 8003414:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	221c      	movs	r2, #28
 800341c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0210 	orr.w	r2, r2, #16
 8003434:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3340      	adds	r3, #64	@ 0x40
 8003450:	4619      	mov	r1, r3
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f001 f89b 	bl	8004590 <HAL_DMA_Start_IT>
 800345a:	4603      	mov	r3, r0
 800345c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fd5b 	bl	8002f1e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003468:	e00d      	b.n	8003486 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003472:	e008      	b.n	8003486 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003480:	e001      	b.n	8003486 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003482:	2302      	movs	r3, #2
 8003484:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003486:	7dfb      	ldrb	r3, [r7, #23]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	50000100 	.word	0x50000100
 8003494:	50000300 	.word	0x50000300
 8003498:	50000700 	.word	0x50000700
 800349c:	50000600 	.word	0x50000600
 80034a0:	50000500 	.word	0x50000500
 80034a4:	50000400 	.word	0x50000400
 80034a8:	08003e9d 	.word	0x08003e9d
 80034ac:	08003f75 	.word	0x08003f75
 80034b0:	08003f91 	.word	0x08003f91

080034b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b0b6      	sub	sp, #216	@ 0xd8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800350a:	2b01      	cmp	r3, #1
 800350c:	d102      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x24>
 800350e:	2302      	movs	r3, #2
 8003510:	f000 bc13 	b.w	8003d3a <HAL_ADC_ConfigChannel+0x84a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fd10 	bl	8002f46 <LL_ADC_REG_IsConversionOngoing>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	f040 83f3 	bne.w	8003d14 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	f7ff fbf1 	bl	8002d22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fcfe 	bl	8002f46 <LL_ADC_REG_IsConversionOngoing>
 800354a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fd0a 	bl	8002f6c <LL_ADC_INJ_IsConversionOngoing>
 8003558:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800355c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003560:	2b00      	cmp	r3, #0
 8003562:	f040 81d9 	bne.w	8003918 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003566:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800356a:	2b00      	cmp	r3, #0
 800356c:	f040 81d4 	bne.w	8003918 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003578:	d10f      	bne.n	800359a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2200      	movs	r2, #0
 8003584:	4619      	mov	r1, r3
 8003586:	f7ff fbf8 	bl	8002d7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fb9f 	bl	8002cd6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003598:	e00e      	b.n	80035b8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6819      	ldr	r1, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f7ff fbe7 	bl	8002d7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fb8f 	bl	8002cd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	08db      	lsrs	r3, r3, #3
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d022      	beq.n	8003620 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6919      	ldr	r1, [r3, #16]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035ea:	f7ff fae9 	bl	8002bc0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6919      	ldr	r1, [r3, #16]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f7ff fb35 	bl	8002c6a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800360c:	2b01      	cmp	r3, #1
 800360e:	d102      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x126>
 8003610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003614:	e000      	b.n	8003618 <HAL_ADC_ConfigChannel+0x128>
 8003616:	2300      	movs	r3, #0
 8003618:	461a      	mov	r2, r3
 800361a:	f7ff fb41 	bl	8002ca0 <LL_ADC_SetOffsetSaturation>
 800361e:	e17b      	b.n	8003918 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff faee 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 800362c:	4603      	mov	r3, r0
 800362e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <HAL_ADC_ConfigChannel+0x15c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fae3 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	0e9b      	lsrs	r3, r3, #26
 8003646:	f003 021f 	and.w	r2, r3, #31
 800364a:	e01e      	b.n	800368a <HAL_ADC_ConfigChannel+0x19a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fad8 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 8003658:	4603      	mov	r3, r0
 800365a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800366a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800366e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003672:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800367a:	2320      	movs	r3, #32
 800367c:	e004      	b.n	8003688 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800367e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x1b2>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	0e9b      	lsrs	r3, r3, #26
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	e018      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x1e4>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80036b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80036be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80036c6:	2320      	movs	r3, #32
 80036c8:	e004      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80036ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d106      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2200      	movs	r2, #0
 80036de:	2100      	movs	r1, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff faa7 	bl	8002c34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fa8b 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x222>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2101      	movs	r1, #1
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fa80 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 8003708:	4603      	mov	r3, r0
 800370a:	0e9b      	lsrs	r3, r3, #26
 800370c:	f003 021f 	and.w	r2, r3, #31
 8003710:	e01e      	b.n	8003750 <HAL_ADC_ConfigChannel+0x260>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2101      	movs	r1, #1
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff fa75 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 800371e:	4603      	mov	r3, r0
 8003720:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003728:	fa93 f3a3 	rbit	r3, r3
 800372c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003730:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003734:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003738:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e004      	b.n	800374e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003744:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003748:	fab3 f383 	clz	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x278>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	0e9b      	lsrs	r3, r3, #26
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	e018      	b.n	800379a <HAL_ADC_ConfigChannel+0x2aa>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800377c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003780:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003784:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800378c:	2320      	movs	r3, #32
 800378e:	e004      	b.n	800379a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003790:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003794:	fab3 f383 	clz	r3, r3
 8003798:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800379a:	429a      	cmp	r2, r3
 800379c:	d106      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff fa44 	bl	8002c34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fa28 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x2e8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2102      	movs	r1, #2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fa1d 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	0e9b      	lsrs	r3, r3, #26
 80037d2:	f003 021f 	and.w	r2, r3, #31
 80037d6:	e01e      	b.n	8003816 <HAL_ADC_ConfigChannel+0x326>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2102      	movs	r1, #2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fa12 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80037f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80037fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003806:	2320      	movs	r3, #32
 8003808:	e004      	b.n	8003814 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800380a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381e:	2b00      	cmp	r3, #0
 8003820:	d105      	bne.n	800382e <HAL_ADC_ConfigChannel+0x33e>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0e9b      	lsrs	r3, r3, #26
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	e016      	b.n	800385c <HAL_ADC_ConfigChannel+0x36c>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003840:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003842:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003846:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800384e:	2320      	movs	r3, #32
 8003850:	e004      	b.n	800385c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003852:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800385c:	429a      	cmp	r2, r3
 800385e:	d106      	bne.n	800386e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2200      	movs	r2, #0
 8003866:	2102      	movs	r1, #2
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff f9e3 	bl	8002c34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2103      	movs	r1, #3
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff f9c7 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 800387a:	4603      	mov	r3, r0
 800387c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <HAL_ADC_ConfigChannel+0x3aa>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2103      	movs	r1, #3
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f9bc 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	0e9b      	lsrs	r3, r3, #26
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	e017      	b.n	80038ca <HAL_ADC_ConfigChannel+0x3da>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2103      	movs	r1, #3
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f9b1 	bl	8002c08 <LL_ADC_GetOffsetChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80038b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80038b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80038bc:	2320      	movs	r3, #32
 80038be:	e003      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80038c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d105      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x3f2>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	0e9b      	lsrs	r3, r3, #26
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	e011      	b.n	8003906 <HAL_ADC_ConfigChannel+0x416>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80038f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80038f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80038fa:	2320      	movs	r3, #32
 80038fc:	e003      	b.n	8003906 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80038fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003900:	fab3 f383 	clz	r3, r3
 8003904:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003906:	429a      	cmp	r2, r3
 8003908:	d106      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	2103      	movs	r1, #3
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff f98e 	bl	8002c34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff faeb 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	f040 813d 	bne.w	8003ba4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6819      	ldr	r1, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	461a      	mov	r2, r3
 8003938:	f7ff fa4a 	bl	8002dd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4aa2      	ldr	r2, [pc, #648]	@ (8003bcc <HAL_ADC_ConfigChannel+0x6dc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	f040 812e 	bne.w	8003ba4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x480>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	0e9b      	lsrs	r3, r3, #26
 800395e:	3301      	adds	r3, #1
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	2b09      	cmp	r3, #9
 8003966:	bf94      	ite	ls
 8003968:	2301      	movls	r3, #1
 800396a:	2300      	movhi	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e019      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x4b4>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800397e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003980:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003982:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003988:	2320      	movs	r3, #32
 800398a:	e003      	b.n	8003994 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800398c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	3301      	adds	r3, #1
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2b09      	cmp	r3, #9
 800399c:	bf94      	ite	ls
 800399e:	2301      	movls	r3, #1
 80039a0:	2300      	movhi	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d079      	beq.n	8003a9c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d107      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x4d4>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	0e9b      	lsrs	r3, r3, #26
 80039ba:	3301      	adds	r3, #1
 80039bc:	069b      	lsls	r3, r3, #26
 80039be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039c2:	e015      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x500>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80039d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80039d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80039dc:	2320      	movs	r3, #32
 80039de:	e003      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80039e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	3301      	adds	r3, #1
 80039ea:	069b      	lsls	r3, r3, #26
 80039ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x520>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0e9b      	lsrs	r3, r3, #26
 8003a02:	3301      	adds	r3, #1
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	2101      	movs	r1, #1
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	e017      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x550>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a20:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003a28:	2320      	movs	r3, #32
 8003a2a:	e003      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003a2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a2e:	fab3 f383 	clz	r3, r3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	3301      	adds	r3, #1
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a40:	ea42 0103 	orr.w	r1, r2, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x576>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0e9b      	lsrs	r3, r3, #26
 8003a56:	3301      	adds	r3, #1
 8003a58:	f003 021f 	and.w	r2, r3, #31
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4413      	add	r3, r2
 8003a62:	051b      	lsls	r3, r3, #20
 8003a64:	e018      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x5a8>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003a7e:	2320      	movs	r3, #32
 8003a80:	e003      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a84:	fab3 f383 	clz	r3, r3
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	e07e      	b.n	8003b9a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x5c8>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	0e9b      	lsrs	r3, r3, #26
 8003aae:	3301      	adds	r3, #1
 8003ab0:	069b      	lsls	r3, r3, #26
 8003ab2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ab6:	e015      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x5f4>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	e003      	b.n	8003adc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	069b      	lsls	r3, r3, #26
 8003ae0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d109      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x614>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	3301      	adds	r3, #1
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2101      	movs	r1, #1
 8003afe:	fa01 f303 	lsl.w	r3, r1, r3
 8003b02:	e017      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x644>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	61fb      	str	r3, [r7, #28]
  return result;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	e003      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	3301      	adds	r3, #1
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2101      	movs	r1, #1
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	ea42 0103 	orr.w	r1, r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10d      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x670>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	0e9b      	lsrs	r3, r3, #26
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	3b1e      	subs	r3, #30
 8003b58:	051b      	lsls	r3, r3, #20
 8003b5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b5e:	e01b      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x6a8>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	613b      	str	r3, [r7, #16]
  return result;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003b78:	2320      	movs	r3, #32
 8003b7a:	e003      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	3301      	adds	r3, #1
 8003b86:	f003 021f 	and.w	r2, r3, #31
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	3b1e      	subs	r3, #30
 8003b92:	051b      	lsls	r3, r3, #20
 8003b94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b98:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f7ff f8eb 	bl	8002d7a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b09      	ldr	r3, [pc, #36]	@ (8003bd0 <HAL_ADC_ConfigChannel+0x6e0>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80be 	beq.w	8003d2e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bba:	d004      	beq.n	8003bc6 <HAL_ADC_ConfigChannel+0x6d6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a04      	ldr	r2, [pc, #16]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x6e4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d10a      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x6ec>
 8003bc6:	4b04      	ldr	r3, [pc, #16]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x6e8>)
 8003bc8:	e009      	b.n	8003bde <HAL_ADC_ConfigChannel+0x6ee>
 8003bca:	bf00      	nop
 8003bcc:	407f0000 	.word	0x407f0000
 8003bd0:	80080000 	.word	0x80080000
 8003bd4:	50000100 	.word	0x50000100
 8003bd8:	50000300 	.word	0x50000300
 8003bdc:	4b59      	ldr	r3, [pc, #356]	@ (8003d44 <HAL_ADC_ConfigChannel+0x854>)
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe ffe0 	bl	8002ba4 <LL_ADC_GetCommonPathInternalCh>
 8003be4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a56      	ldr	r2, [pc, #344]	@ (8003d48 <HAL_ADC_ConfigChannel+0x858>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_ADC_ConfigChannel+0x70c>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a55      	ldr	r2, [pc, #340]	@ (8003d4c <HAL_ADC_ConfigChannel+0x85c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d13a      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d134      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c10:	d005      	beq.n	8003c1e <HAL_ADC_ConfigChannel+0x72e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a4e      	ldr	r2, [pc, #312]	@ (8003d50 <HAL_ADC_ConfigChannel+0x860>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	f040 8085 	bne.w	8003d28 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c26:	d004      	beq.n	8003c32 <HAL_ADC_ConfigChannel+0x742>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a49      	ldr	r2, [pc, #292]	@ (8003d54 <HAL_ADC_ConfigChannel+0x864>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x746>
 8003c32:	4a49      	ldr	r2, [pc, #292]	@ (8003d58 <HAL_ADC_ConfigChannel+0x868>)
 8003c34:	e000      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x748>
 8003c36:	4a43      	ldr	r2, [pc, #268]	@ (8003d44 <HAL_ADC_ConfigChannel+0x854>)
 8003c38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f7fe ff9b 	bl	8002b7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c48:	4b44      	ldr	r3, [pc, #272]	@ (8003d5c <HAL_ADC_ConfigChannel+0x86c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	099b      	lsrs	r3, r3, #6
 8003c4e:	4a44      	ldr	r2, [pc, #272]	@ (8003d60 <HAL_ADC_ConfigChannel+0x870>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	099b      	lsrs	r3, r3, #6
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c62:	e002      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f9      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c70:	e05a      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a3b      	ldr	r2, [pc, #236]	@ (8003d64 <HAL_ADC_ConfigChannel+0x874>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d125      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d11f      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a31      	ldr	r2, [pc, #196]	@ (8003d54 <HAL_ADC_ConfigChannel+0x864>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d104      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x7ac>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a34      	ldr	r2, [pc, #208]	@ (8003d68 <HAL_ADC_ConfigChannel+0x878>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d047      	beq.n	8003d2c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ca4:	d004      	beq.n	8003cb0 <HAL_ADC_ConfigChannel+0x7c0>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2a      	ldr	r2, [pc, #168]	@ (8003d54 <HAL_ADC_ConfigChannel+0x864>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d101      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x7c4>
 8003cb0:	4a29      	ldr	r2, [pc, #164]	@ (8003d58 <HAL_ADC_ConfigChannel+0x868>)
 8003cb2:	e000      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0x7c6>
 8003cb4:	4a23      	ldr	r2, [pc, #140]	@ (8003d44 <HAL_ADC_ConfigChannel+0x854>)
 8003cb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7fe ff5c 	bl	8002b7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cc6:	e031      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a27      	ldr	r2, [pc, #156]	@ (8003d6c <HAL_ADC_ConfigChannel+0x87c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d12d      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d127      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d54 <HAL_ADC_ConfigChannel+0x864>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d022      	beq.n	8003d2e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cf0:	d004      	beq.n	8003cfc <HAL_ADC_ConfigChannel+0x80c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a17      	ldr	r2, [pc, #92]	@ (8003d54 <HAL_ADC_ConfigChannel+0x864>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x810>
 8003cfc:	4a16      	ldr	r2, [pc, #88]	@ (8003d58 <HAL_ADC_ConfigChannel+0x868>)
 8003cfe:	e000      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x812>
 8003d00:	4a10      	ldr	r2, [pc, #64]	@ (8003d44 <HAL_ADC_ConfigChannel+0x854>)
 8003d02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f7fe ff36 	bl	8002b7e <LL_ADC_SetCommonPathInternalCh>
 8003d12:	e00c      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d18:	f043 0220 	orr.w	r2, r3, #32
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003d26:	e002      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d36:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	37d8      	adds	r7, #216	@ 0xd8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	50000700 	.word	0x50000700
 8003d48:	c3210000 	.word	0xc3210000
 8003d4c:	90c00010 	.word	0x90c00010
 8003d50:	50000600 	.word	0x50000600
 8003d54:	50000100 	.word	0x50000100
 8003d58:	50000300 	.word	0x50000300
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	053e2d63 	.word	0x053e2d63
 8003d64:	c7520000 	.word	0xc7520000
 8003d68:	50000500 	.word	0x50000500
 8003d6c:	cb840000 	.word	0xcb840000

08003d70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff f8b9 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d176      	bne.n	8003e7a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	4b3c      	ldr	r3, [pc, #240]	@ (8003e84 <ADC_Enable+0x114>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9e:	f043 0210 	orr.w	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003daa:	f043 0201 	orr.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e062      	b.n	8003e7c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f888 	bl	8002ed0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dc8:	d004      	beq.n	8003dd4 <ADC_Enable+0x64>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2e      	ldr	r2, [pc, #184]	@ (8003e88 <ADC_Enable+0x118>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <ADC_Enable+0x68>
 8003dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e8c <ADC_Enable+0x11c>)
 8003dd6:	e000      	b.n	8003dda <ADC_Enable+0x6a>
 8003dd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e90 <ADC_Enable+0x120>)
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe fee2 	bl	8002ba4 <LL_ADC_GetCommonPathInternalCh>
 8003de0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003de2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d013      	beq.n	8003e12 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dea:	4b2a      	ldr	r3, [pc, #168]	@ (8003e94 <ADC_Enable+0x124>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	099b      	lsrs	r3, r3, #6
 8003df0:	4a29      	ldr	r2, [pc, #164]	@ (8003e98 <ADC_Enable+0x128>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e04:	e002      	b.n	8003e0c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f9      	bne.n	8003e06 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e12:	f7fe fe73 	bl	8002afc <HAL_GetTick>
 8003e16:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e18:	e028      	b.n	8003e6c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff f86a 	bl	8002ef8 <LL_ADC_IsEnabled>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff f84e 	bl	8002ed0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e34:	f7fe fe62 	bl	8002afc <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d914      	bls.n	8003e6c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d00d      	beq.n	8003e6c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e54:	f043 0210 	orr.w	r2, r3, #16
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e60:	f043 0201 	orr.w	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e007      	b.n	8003e7c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d1cf      	bne.n	8003e1a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	8000003f 	.word	0x8000003f
 8003e88:	50000100 	.word	0x50000100
 8003e8c:	50000300 	.word	0x50000300
 8003e90:	50000700 	.word	0x50000700
 8003e94:	20000000 	.word	0x20000000
 8003e98:	053e2d63 	.word	0x053e2d63

08003e9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d14b      	bne.n	8003f4e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d021      	beq.n	8003f14 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe ff11 	bl	8002cfc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d032      	beq.n	8003f46 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d12b      	bne.n	8003f46 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d11f      	bne.n	8003f46 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0a:	f043 0201 	orr.w	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f12:	e018      	b.n	8003f46 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d111      	bne.n	8003f46 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d105      	bne.n	8003f46 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3e:	f043 0201 	orr.w	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff fab4 	bl	80034b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f4c:	e00e      	b.n	8003f6c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff fabe 	bl	80034dc <HAL_ADC_ErrorCallback>
}
 8003f60:	e004      	b.n	8003f6c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7ff faa0 	bl	80034c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fae:	f043 0204 	orr.w	r2, r3, #4
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7ff fa90 	bl	80034dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <LL_ADC_IsEnabled>:
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <LL_ADC_IsEnabled+0x18>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <LL_ADC_IsEnabled+0x1a>
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_ADC_REG_IsConversionOngoing>:
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d101      	bne.n	8004002 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b0a1      	sub	sp, #132	@ 0x84
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800402a:	2302      	movs	r3, #2
 800402c:	e0e7      	b.n	80041fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004036:	2300      	movs	r3, #0
 8004038:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800403a:	2300      	movs	r3, #0
 800403c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004046:	d102      	bne.n	800404e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004048:	4b6f      	ldr	r3, [pc, #444]	@ (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	e009      	b.n	8004062 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a6e      	ldr	r2, [pc, #440]	@ (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d102      	bne.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004058:	4b6d      	ldr	r3, [pc, #436]	@ (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	e001      	b.n	8004062 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0be      	b.n	80041fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ffb1 	bl	8003fea <LL_ADC_REG_IsConversionOngoing>
 8004088:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ffab 	bl	8003fea <LL_ADC_REG_IsConversionOngoing>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 80a0 	bne.w	80041dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800409c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 809c 	bne.w	80041dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040ac:	d004      	beq.n	80040b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a55      	ldr	r2, [pc, #340]	@ (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d101      	bne.n	80040bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80040b8:	4b56      	ldr	r3, [pc, #344]	@ (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80040ba:	e000      	b.n	80040be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80040bc:	4b56      	ldr	r3, [pc, #344]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80040be:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d04b      	beq.n	8004160 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80040c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80040da:	035b      	lsls	r3, r3, #13
 80040dc:	430b      	orrs	r3, r1
 80040de:	431a      	orrs	r2, r3
 80040e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040ec:	d004      	beq.n	80040f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a45      	ldr	r2, [pc, #276]	@ (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d10f      	bne.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80040f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80040fc:	f7ff ff62 	bl	8003fc4 <LL_ADC_IsEnabled>
 8004100:	4604      	mov	r4, r0
 8004102:	4841      	ldr	r0, [pc, #260]	@ (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004104:	f7ff ff5e 	bl	8003fc4 <LL_ADC_IsEnabled>
 8004108:	4603      	mov	r3, r0
 800410a:	4323      	orrs	r3, r4
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e012      	b.n	800413e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004118:	483c      	ldr	r0, [pc, #240]	@ (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800411a:	f7ff ff53 	bl	8003fc4 <LL_ADC_IsEnabled>
 800411e:	4604      	mov	r4, r0
 8004120:	483b      	ldr	r0, [pc, #236]	@ (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004122:	f7ff ff4f 	bl	8003fc4 <LL_ADC_IsEnabled>
 8004126:	4603      	mov	r3, r0
 8004128:	431c      	orrs	r4, r3
 800412a:	483c      	ldr	r0, [pc, #240]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800412c:	f7ff ff4a 	bl	8003fc4 <LL_ADC_IsEnabled>
 8004130:	4603      	mov	r3, r0
 8004132:	4323      	orrs	r3, r4
 8004134:	2b00      	cmp	r3, #0
 8004136:	bf0c      	ite	eq
 8004138:	2301      	moveq	r3, #1
 800413a:	2300      	movne	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d056      	beq.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800414a:	f023 030f 	bic.w	r3, r3, #15
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	6811      	ldr	r1, [r2, #0]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	6892      	ldr	r2, [r2, #8]
 8004156:	430a      	orrs	r2, r1
 8004158:	431a      	orrs	r2, r3
 800415a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800415c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800415e:	e047      	b.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004160:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004168:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800416a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004174:	d004      	beq.n	8004180 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a23      	ldr	r2, [pc, #140]	@ (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10f      	bne.n	80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004180:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004184:	f7ff ff1e 	bl	8003fc4 <LL_ADC_IsEnabled>
 8004188:	4604      	mov	r4, r0
 800418a:	481f      	ldr	r0, [pc, #124]	@ (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800418c:	f7ff ff1a 	bl	8003fc4 <LL_ADC_IsEnabled>
 8004190:	4603      	mov	r3, r0
 8004192:	4323      	orrs	r3, r4
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e012      	b.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80041a0:	481a      	ldr	r0, [pc, #104]	@ (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041a2:	f7ff ff0f 	bl	8003fc4 <LL_ADC_IsEnabled>
 80041a6:	4604      	mov	r4, r0
 80041a8:	4819      	ldr	r0, [pc, #100]	@ (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041aa:	f7ff ff0b 	bl	8003fc4 <LL_ADC_IsEnabled>
 80041ae:	4603      	mov	r3, r0
 80041b0:	431c      	orrs	r4, r3
 80041b2:	481a      	ldr	r0, [pc, #104]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80041b4:	f7ff ff06 	bl	8003fc4 <LL_ADC_IsEnabled>
 80041b8:	4603      	mov	r3, r0
 80041ba:	4323      	orrs	r3, r4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bf0c      	ite	eq
 80041c0:	2301      	moveq	r3, #1
 80041c2:	2300      	movne	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d012      	beq.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80041d2:	f023 030f 	bic.w	r3, r3, #15
 80041d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80041d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041da:	e009      	b.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80041ee:	e000      	b.n	80041f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80041fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3784      	adds	r7, #132	@ 0x84
 8004202:	46bd      	mov	sp, r7
 8004204:	bd90      	pop	{r4, r7, pc}
 8004206:	bf00      	nop
 8004208:	50000100 	.word	0x50000100
 800420c:	50000400 	.word	0x50000400
 8004210:	50000500 	.word	0x50000500
 8004214:	50000300 	.word	0x50000300
 8004218:	50000700 	.word	0x50000700
 800421c:	50000600 	.word	0x50000600

08004220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004230:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <__NVIC_SetPriorityGrouping+0x44>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800423c:	4013      	ands	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800424c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004252:	4a04      	ldr	r2, [pc, #16]	@ (8004264 <__NVIC_SetPriorityGrouping+0x44>)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	60d3      	str	r3, [r2, #12]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800426c:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <__NVIC_GetPriorityGrouping+0x18>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f003 0307 	and.w	r3, r3, #7
}
 8004276:	4618      	mov	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	2b00      	cmp	r3, #0
 8004294:	db0b      	blt.n	80042ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	f003 021f 	and.w	r2, r3, #31
 800429c:	4907      	ldr	r1, [pc, #28]	@ (80042bc <__NVIC_EnableIRQ+0x38>)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2001      	movs	r0, #1
 80042a6:	fa00 f202 	lsl.w	r2, r0, r2
 80042aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	e000e100 	.word	0xe000e100

080042c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	6039      	str	r1, [r7, #0]
 80042ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db0a      	blt.n	80042ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	490c      	ldr	r1, [pc, #48]	@ (800430c <__NVIC_SetPriority+0x4c>)
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	440b      	add	r3, r1
 80042e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042e8:	e00a      	b.n	8004300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4908      	ldr	r1, [pc, #32]	@ (8004310 <__NVIC_SetPriority+0x50>)
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	3b04      	subs	r3, #4
 80042f8:	0112      	lsls	r2, r2, #4
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	440b      	add	r3, r1
 80042fe:	761a      	strb	r2, [r3, #24]
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	e000e100 	.word	0xe000e100
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	@ 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f1c3 0307 	rsb	r3, r3, #7
 800432e:	2b04      	cmp	r3, #4
 8004330:	bf28      	it	cs
 8004332:	2304      	movcs	r3, #4
 8004334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	3304      	adds	r3, #4
 800433a:	2b06      	cmp	r3, #6
 800433c:	d902      	bls.n	8004344 <NVIC_EncodePriority+0x30>
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3b03      	subs	r3, #3
 8004342:	e000      	b.n	8004346 <NVIC_EncodePriority+0x32>
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004348:	f04f 32ff 	mov.w	r2, #4294967295
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	401a      	ands	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800435c:	f04f 31ff 	mov.w	r1, #4294967295
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	43d9      	mvns	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800436c:	4313      	orrs	r3, r2
         );
}
 800436e:	4618      	mov	r0, r3
 8004370:	3724      	adds	r7, #36	@ 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3b01      	subs	r3, #1
 8004388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800438c:	d301      	bcc.n	8004392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800438e:	2301      	movs	r3, #1
 8004390:	e00f      	b.n	80043b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004392:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <SysTick_Config+0x40>)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3b01      	subs	r3, #1
 8004398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800439a:	210f      	movs	r1, #15
 800439c:	f04f 30ff 	mov.w	r0, #4294967295
 80043a0:	f7ff ff8e 	bl	80042c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043a4:	4b05      	ldr	r3, [pc, #20]	@ (80043bc <SysTick_Config+0x40>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043aa:	4b04      	ldr	r3, [pc, #16]	@ (80043bc <SysTick_Config+0x40>)
 80043ac:	2207      	movs	r2, #7
 80043ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	e000e010 	.word	0xe000e010

080043c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff ff29 	bl	8004220 <__NVIC_SetPriorityGrouping>
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	4603      	mov	r3, r0
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043e4:	f7ff ff40 	bl	8004268 <__NVIC_GetPriorityGrouping>
 80043e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	6978      	ldr	r0, [r7, #20]
 80043f0:	f7ff ff90 	bl	8004314 <NVIC_EncodePriority>
 80043f4:	4602      	mov	r2, r0
 80043f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff ff5f 	bl	80042c0 <__NVIC_SetPriority>
}
 8004402:	bf00      	nop
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	4603      	mov	r3, r0
 8004412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff ff33 	bl	8004284 <__NVIC_EnableIRQ>
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff ffa4 	bl	800437c <SysTick_Config>
 8004434:	4603      	mov	r3, r0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e08d      	b.n	800456e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	4b47      	ldr	r3, [pc, #284]	@ (8004578 <HAL_DMA_Init+0x138>)
 800445a:	429a      	cmp	r2, r3
 800445c:	d80f      	bhi.n	800447e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	4b45      	ldr	r3, [pc, #276]	@ (800457c <HAL_DMA_Init+0x13c>)
 8004466:	4413      	add	r3, r2
 8004468:	4a45      	ldr	r2, [pc, #276]	@ (8004580 <HAL_DMA_Init+0x140>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	009a      	lsls	r2, r3, #2
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a42      	ldr	r2, [pc, #264]	@ (8004584 <HAL_DMA_Init+0x144>)
 800447a:	641a      	str	r2, [r3, #64]	@ 0x40
 800447c:	e00e      	b.n	800449c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	4b40      	ldr	r3, [pc, #256]	@ (8004588 <HAL_DMA_Init+0x148>)
 8004486:	4413      	add	r3, r2
 8004488:	4a3d      	ldr	r2, [pc, #244]	@ (8004580 <HAL_DMA_Init+0x140>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	009a      	lsls	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a3c      	ldr	r2, [pc, #240]	@ (800458c <HAL_DMA_Init+0x14c>)
 800449a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80044b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f9b6 	bl	8004860 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044fc:	d102      	bne.n	8004504 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004518:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d010      	beq.n	8004544 <HAL_DMA_Init+0x104>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b04      	cmp	r3, #4
 8004528:	d80c      	bhi.n	8004544 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9d6 	bl	80048dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	e008      	b.n	8004556 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40020407 	.word	0x40020407
 800457c:	bffdfff8 	.word	0xbffdfff8
 8004580:	cccccccd 	.word	0xcccccccd
 8004584:	40020000 	.word	0x40020000
 8004588:	bffdfbf8 	.word	0xbffdfbf8
 800458c:	40020400 	.word	0x40020400

08004590 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_DMA_Start_IT+0x20>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e066      	b.n	800467e <HAL_DMA_Start_IT+0xee>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d155      	bne.n	8004670 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f8fb 	bl	80047e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d008      	beq.n	8004608 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 020e 	orr.w	r2, r2, #14
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e00f      	b.n	8004628 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 020a 	orr.w	r2, r2, #10
 8004626:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d007      	beq.n	8004646 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004640:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004644:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004658:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800465c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e005      	b.n	800467c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004678:	2302      	movs	r3, #2
 800467a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800467c:	7dfb      	ldrb	r3, [r7, #23]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	2204      	movs	r2, #4
 80046a8:	409a      	lsls	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d026      	beq.n	8004700 <HAL_DMA_IRQHandler+0x7a>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d021      	beq.n	8004700 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d107      	bne.n	80046da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0204 	bic.w	r2, r2, #4
 80046d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	f003 021f 	and.w	r2, r3, #31
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e6:	2104      	movs	r1, #4
 80046e8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d071      	beq.n	80047da <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80046fe:	e06c      	b.n	80047da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004704:	f003 031f 	and.w	r3, r3, #31
 8004708:	2202      	movs	r2, #2
 800470a:	409a      	lsls	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d02e      	beq.n	8004772 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d029      	beq.n	8004772 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 020a 	bic.w	r2, r2, #10
 800473a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004748:	f003 021f 	and.w	r2, r3, #31
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004750:	2102      	movs	r1, #2
 8004752:	fa01 f202 	lsl.w	r2, r1, r2
 8004756:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d038      	beq.n	80047da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004770:	e033      	b.n	80047da <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	2208      	movs	r2, #8
 800477c:	409a      	lsls	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4013      	ands	r3, r2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d02a      	beq.n	80047dc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d025      	beq.n	80047dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 020e 	bic.w	r2, r2, #14
 800479e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a4:	f003 021f 	and.w	r2, r3, #31
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ac:	2101      	movs	r1, #1
 80047ae:	fa01 f202 	lsl.w	r2, r1, r2
 80047b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d004      	beq.n	80047dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047da:	bf00      	nop
 80047dc:	bf00      	nop
}
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004800:	2b00      	cmp	r3, #0
 8004802:	d004      	beq.n	800480e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800480c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004812:	f003 021f 	and.w	r2, r3, #31
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481a:	2101      	movs	r1, #1
 800481c:	fa01 f202 	lsl.w	r2, r1, r2
 8004820:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b10      	cmp	r3, #16
 8004830:	d108      	bne.n	8004844 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004842:	e007      	b.n	8004854 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	60da      	str	r2, [r3, #12]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	4b16      	ldr	r3, [pc, #88]	@ (80048c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004870:	429a      	cmp	r2, r3
 8004872:	d802      	bhi.n	800487a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004874:	4b15      	ldr	r3, [pc, #84]	@ (80048cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e001      	b.n	800487e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800487a:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800487c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	3b08      	subs	r3, #8
 800488a:	4a12      	ldr	r2, [pc, #72]	@ (80048d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004898:	089b      	lsrs	r3, r3, #2
 800489a:	009a      	lsls	r2, r3, #2
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4413      	add	r3, r2
 80048a0:	461a      	mov	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a0b      	ldr	r2, [pc, #44]	@ (80048d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80048aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	2201      	movs	r2, #1
 80048b4:	409a      	lsls	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40020407 	.word	0x40020407
 80048cc:	40020800 	.word	0x40020800
 80048d0:	40020820 	.word	0x40020820
 80048d4:	cccccccd 	.word	0xcccccccd
 80048d8:	40020880 	.word	0x40020880

080048dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	461a      	mov	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a08      	ldr	r2, [pc, #32]	@ (8004920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80048fe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3b01      	subs	r3, #1
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	2201      	movs	r2, #1
 800490a:	409a      	lsls	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	1000823f 	.word	0x1000823f
 8004920:	40020940 	.word	0x40020940

08004924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004932:	e15a      	b.n	8004bea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2101      	movs	r1, #1
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	fa01 f303 	lsl.w	r3, r1, r3
 8004940:	4013      	ands	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 814c 	beq.w	8004be4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	2b01      	cmp	r3, #1
 8004956:	d005      	beq.n	8004964 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004960:	2b02      	cmp	r3, #2
 8004962:	d130      	bne.n	80049c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	2203      	movs	r2, #3
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4013      	ands	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800499a:	2201      	movs	r2, #1
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	091b      	lsrs	r3, r3, #4
 80049b0:	f003 0201 	and.w	r2, r3, #1
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d017      	beq.n	8004a02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	2203      	movs	r2, #3
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	43db      	mvns	r3, r3
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4013      	ands	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d123      	bne.n	8004a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	08da      	lsrs	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3208      	adds	r2, #8
 8004a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	220f      	movs	r2, #15
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	08da      	lsrs	r2, r3, #3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3208      	adds	r2, #8
 8004a50:	6939      	ldr	r1, [r7, #16]
 8004a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	2203      	movs	r2, #3
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 0203 	and.w	r2, r3, #3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 80a6 	beq.w	8004be4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a98:	4b5b      	ldr	r3, [pc, #364]	@ (8004c08 <HAL_GPIO_Init+0x2e4>)
 8004a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a9c:	4a5a      	ldr	r2, [pc, #360]	@ (8004c08 <HAL_GPIO_Init+0x2e4>)
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8004aa4:	4b58      	ldr	r3, [pc, #352]	@ (8004c08 <HAL_GPIO_Init+0x2e4>)
 8004aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ab0:	4a56      	ldr	r2, [pc, #344]	@ (8004c0c <HAL_GPIO_Init+0x2e8>)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	089b      	lsrs	r3, r3, #2
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	220f      	movs	r2, #15
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ada:	d01f      	beq.n	8004b1c <HAL_GPIO_Init+0x1f8>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a4c      	ldr	r2, [pc, #304]	@ (8004c10 <HAL_GPIO_Init+0x2ec>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d019      	beq.n	8004b18 <HAL_GPIO_Init+0x1f4>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a4b      	ldr	r2, [pc, #300]	@ (8004c14 <HAL_GPIO_Init+0x2f0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <HAL_GPIO_Init+0x1f0>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a4a      	ldr	r2, [pc, #296]	@ (8004c18 <HAL_GPIO_Init+0x2f4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d00d      	beq.n	8004b10 <HAL_GPIO_Init+0x1ec>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a49      	ldr	r2, [pc, #292]	@ (8004c1c <HAL_GPIO_Init+0x2f8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <HAL_GPIO_Init+0x1e8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a48      	ldr	r2, [pc, #288]	@ (8004c20 <HAL_GPIO_Init+0x2fc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d101      	bne.n	8004b08 <HAL_GPIO_Init+0x1e4>
 8004b04:	2305      	movs	r3, #5
 8004b06:	e00a      	b.n	8004b1e <HAL_GPIO_Init+0x1fa>
 8004b08:	2306      	movs	r3, #6
 8004b0a:	e008      	b.n	8004b1e <HAL_GPIO_Init+0x1fa>
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	e006      	b.n	8004b1e <HAL_GPIO_Init+0x1fa>
 8004b10:	2303      	movs	r3, #3
 8004b12:	e004      	b.n	8004b1e <HAL_GPIO_Init+0x1fa>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e002      	b.n	8004b1e <HAL_GPIO_Init+0x1fa>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <HAL_GPIO_Init+0x1fa>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	f002 0203 	and.w	r2, r2, #3
 8004b24:	0092      	lsls	r2, r2, #2
 8004b26:	4093      	lsls	r3, r2
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b2e:	4937      	ldr	r1, [pc, #220]	@ (8004c0c <HAL_GPIO_Init+0x2e8>)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	089b      	lsrs	r3, r3, #2
 8004b34:	3302      	adds	r3, #2
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b3c:	4b39      	ldr	r3, [pc, #228]	@ (8004c24 <HAL_GPIO_Init+0x300>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b60:	4a30      	ldr	r2, [pc, #192]	@ (8004c24 <HAL_GPIO_Init+0x300>)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b66:	4b2f      	ldr	r3, [pc, #188]	@ (8004c24 <HAL_GPIO_Init+0x300>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4013      	ands	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b8a:	4a26      	ldr	r2, [pc, #152]	@ (8004c24 <HAL_GPIO_Init+0x300>)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004b90:	4b24      	ldr	r3, [pc, #144]	@ (8004c24 <HAL_GPIO_Init+0x300>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c24 <HAL_GPIO_Init+0x300>)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004bba:	4b1a      	ldr	r3, [pc, #104]	@ (8004c24 <HAL_GPIO_Init+0x300>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bde:	4a11      	ldr	r2, [pc, #68]	@ (8004c24 <HAL_GPIO_Init+0x300>)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	3301      	adds	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f47f ae9d 	bne.w	8004934 <HAL_GPIO_Init+0x10>
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	bf00      	nop
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	40010000 	.word	0x40010000
 8004c10:	48000400 	.word	0x48000400
 8004c14:	48000800 	.word	0x48000800
 8004c18:	48000c00 	.word	0x48000c00
 8004c1c:	48001000 	.word	0x48001000
 8004c20:	48001400 	.word	0x48001400
 8004c24:	40010400 	.word	0x40010400

08004c28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	887b      	ldrh	r3, [r7, #2]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
 8004c44:	e001      	b.n	8004c4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	807b      	strh	r3, [r7, #2]
 8004c64:	4613      	mov	r3, r2
 8004c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c68:	787b      	ldrb	r3, [r7, #1]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c6e:	887a      	ldrh	r2, [r7, #2]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c74:	e002      	b.n	8004c7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c76:	887a      	ldrh	r2, [r7, #2]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c92:	4b08      	ldr	r3, [pc, #32]	@ (8004cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d006      	beq.n	8004cac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c9e:	4a05      	ldr	r2, [pc, #20]	@ (8004cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ca0:	88fb      	ldrh	r3, [r7, #6]
 8004ca2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ca4:	88fb      	ldrh	r3, [r7, #6]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd fa9e 	bl	80021e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cac:	bf00      	nop
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40010400 	.word	0x40010400

08004cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e08d      	b.n	8004de6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fd fb98 	bl	8002414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2224      	movs	r2, #36	@ 0x24
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d107      	bne.n	8004d32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d2e:	609a      	str	r2, [r3, #8]
 8004d30:	e006      	b.n	8004d40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004d3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d108      	bne.n	8004d5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d56:	605a      	str	r2, [r3, #4]
 8004d58:	e007      	b.n	8004d6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69d9      	ldr	r1, [r3, #28]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1a      	ldr	r2, [r3, #32]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	4608      	mov	r0, r1
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4603      	mov	r3, r0
 8004e00:	817b      	strh	r3, [r7, #10]
 8004e02:	460b      	mov	r3, r1
 8004e04:	813b      	strh	r3, [r7, #8]
 8004e06:	4613      	mov	r3, r2
 8004e08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	f040 80f9 	bne.w	800500a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_I2C_Mem_Write+0x34>
 8004e1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e2a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0ed      	b.n	800500c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_I2C_Mem_Write+0x4e>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e0e6      	b.n	800500c <HAL_I2C_Mem_Write+0x21c>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e46:	f7fd fe59 	bl	8002afc <HAL_GetTick>
 8004e4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	2319      	movs	r3, #25
 8004e52:	2201      	movs	r2, #1
 8004e54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 fac3 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0d1      	b.n	800500c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2221      	movs	r2, #33	@ 0x21
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2240      	movs	r2, #64	@ 0x40
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a3a      	ldr	r2, [r7, #32]
 8004e82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e90:	88f8      	ldrh	r0, [r7, #6]
 8004e92:	893a      	ldrh	r2, [r7, #8]
 8004e94:	8979      	ldrh	r1, [r7, #10]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f9d3 	bl	800524c <I2C_RequestMemoryWrite>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0a9      	b.n	800500c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2bff      	cmp	r3, #255	@ 0xff
 8004ec0:	d90e      	bls.n	8004ee0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	22ff      	movs	r2, #255	@ 0xff
 8004ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	8979      	ldrh	r1, [r7, #10]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 fc47 	bl	800576c <I2C_TransferConfig>
 8004ede:	e00f      	b.n	8004f00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	8979      	ldrh	r1, [r7, #10]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 fc36 	bl	800576c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 fac6 	bl	8005496 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e07b      	b.n	800500c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f18:	781a      	ldrb	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d034      	beq.n	8004fb8 <HAL_I2C_Mem_Write+0x1c8>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d130      	bne.n	8004fb8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2180      	movs	r1, #128	@ 0x80
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 fa3f 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e04d      	b.n	800500c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2bff      	cmp	r3, #255	@ 0xff
 8004f78:	d90e      	bls.n	8004f98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	22ff      	movs	r2, #255	@ 0xff
 8004f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	8979      	ldrh	r1, [r7, #10]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fbeb 	bl	800576c <I2C_TransferConfig>
 8004f96:	e00f      	b.n	8004fb8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	8979      	ldrh	r1, [r7, #10]
 8004faa:	2300      	movs	r3, #0
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fbda 	bl	800576c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d19e      	bne.n	8004f00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 faac 	bl	8005524 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e01a      	b.n	800500c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6859      	ldr	r1, [r3, #4]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8005014 <HAL_I2C_Mem_Write+0x224>)
 8004fea:	400b      	ands	r3, r1
 8004fec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	e000      	b.n	800500c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800500a:	2302      	movs	r3, #2
  }
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	fe00e800 	.word	0xfe00e800

08005018 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	4608      	mov	r0, r1
 8005022:	4611      	mov	r1, r2
 8005024:	461a      	mov	r2, r3
 8005026:	4603      	mov	r3, r0
 8005028:	817b      	strh	r3, [r7, #10]
 800502a:	460b      	mov	r3, r1
 800502c:	813b      	strh	r3, [r7, #8]
 800502e:	4613      	mov	r3, r2
 8005030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b20      	cmp	r3, #32
 800503c:	f040 80fd 	bne.w	800523a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_I2C_Mem_Read+0x34>
 8005046:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005052:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0f1      	b.n	800523c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_I2C_Mem_Read+0x4e>
 8005062:	2302      	movs	r3, #2
 8005064:	e0ea      	b.n	800523c <HAL_I2C_Mem_Read+0x224>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800506e:	f7fd fd45 	bl	8002afc <HAL_GetTick>
 8005072:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	2319      	movs	r3, #25
 800507a:	2201      	movs	r2, #1
 800507c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f9af 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0d5      	b.n	800523c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2222      	movs	r2, #34	@ 0x22
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2240      	movs	r2, #64	@ 0x40
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a3a      	ldr	r2, [r7, #32]
 80050aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80050b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050b8:	88f8      	ldrh	r0, [r7, #6]
 80050ba:	893a      	ldrh	r2, [r7, #8]
 80050bc:	8979      	ldrh	r1, [r7, #10]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	4603      	mov	r3, r0
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f913 	bl	80052f4 <I2C_RequestMemoryRead>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0ad      	b.n	800523c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2bff      	cmp	r3, #255	@ 0xff
 80050e8:	d90e      	bls.n	8005108 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	22ff      	movs	r2, #255	@ 0xff
 80050ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	8979      	ldrh	r1, [r7, #10]
 80050f8:	4b52      	ldr	r3, [pc, #328]	@ (8005244 <HAL_I2C_Mem_Read+0x22c>)
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fb33 	bl	800576c <I2C_TransferConfig>
 8005106:	e00f      	b.n	8005128 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005116:	b2da      	uxtb	r2, r3
 8005118:	8979      	ldrh	r1, [r7, #10]
 800511a:	4b4a      	ldr	r3, [pc, #296]	@ (8005244 <HAL_I2C_Mem_Read+0x22c>)
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fb22 	bl	800576c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	2200      	movs	r2, #0
 8005130:	2104      	movs	r1, #4
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f956 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e07c      	b.n	800523c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d034      	beq.n	80051e8 <HAL_I2C_Mem_Read+0x1d0>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005182:	2b00      	cmp	r3, #0
 8005184:	d130      	bne.n	80051e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518c:	2200      	movs	r2, #0
 800518e:	2180      	movs	r1, #128	@ 0x80
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f927 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e04d      	b.n	800523c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2bff      	cmp	r3, #255	@ 0xff
 80051a8:	d90e      	bls.n	80051c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	22ff      	movs	r2, #255	@ 0xff
 80051ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	8979      	ldrh	r1, [r7, #10]
 80051b8:	2300      	movs	r3, #0
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fad3 	bl	800576c <I2C_TransferConfig>
 80051c6:	e00f      	b.n	80051e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	8979      	ldrh	r1, [r7, #10]
 80051da:	2300      	movs	r3, #0
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 fac2 	bl	800576c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d19a      	bne.n	8005128 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f994 	bl	8005524 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e01a      	b.n	800523c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2220      	movs	r2, #32
 800520c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6859      	ldr	r1, [r3, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <HAL_I2C_Mem_Read+0x230>)
 800521a:	400b      	ands	r3, r1
 800521c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	e000      	b.n	800523c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800523a:	2302      	movs	r3, #2
  }
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	80002400 	.word	0x80002400
 8005248:	fe00e800 	.word	0xfe00e800

0800524c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af02      	add	r7, sp, #8
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	4608      	mov	r0, r1
 8005256:	4611      	mov	r1, r2
 8005258:	461a      	mov	r2, r3
 800525a:	4603      	mov	r3, r0
 800525c:	817b      	strh	r3, [r7, #10]
 800525e:	460b      	mov	r3, r1
 8005260:	813b      	strh	r3, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	b2da      	uxtb	r2, r3
 800526a:	8979      	ldrh	r1, [r7, #10]
 800526c:	4b20      	ldr	r3, [pc, #128]	@ (80052f0 <I2C_RequestMemoryWrite+0xa4>)
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fa79 	bl	800576c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	69b9      	ldr	r1, [r7, #24]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f909 	bl	8005496 <I2C_WaitOnTXISFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e02c      	b.n	80052e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d105      	bne.n	80052a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005294:	893b      	ldrh	r3, [r7, #8]
 8005296:	b2da      	uxtb	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	629a      	str	r2, [r3, #40]	@ 0x28
 800529e:	e015      	b.n	80052cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052a0:	893b      	ldrh	r3, [r7, #8]
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	69b9      	ldr	r1, [r7, #24]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f8ef 	bl	8005496 <I2C_WaitOnTXISFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e012      	b.n	80052e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052c2:	893b      	ldrh	r3, [r7, #8]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	2200      	movs	r2, #0
 80052d4:	2180      	movs	r1, #128	@ 0x80
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f884 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	80002000 	.word	0x80002000

080052f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	461a      	mov	r2, r3
 8005302:	4603      	mov	r3, r0
 8005304:	817b      	strh	r3, [r7, #10]
 8005306:	460b      	mov	r3, r1
 8005308:	813b      	strh	r3, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	8979      	ldrh	r1, [r7, #10]
 8005314:	4b20      	ldr	r3, [pc, #128]	@ (8005398 <I2C_RequestMemoryRead+0xa4>)
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	2300      	movs	r3, #0
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fa26 	bl	800576c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	69b9      	ldr	r1, [r7, #24]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f8b6 	bl	8005496 <I2C_WaitOnTXISFlagUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e02c      	b.n	800538e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005334:	88fb      	ldrh	r3, [r7, #6]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800533a:	893b      	ldrh	r3, [r7, #8]
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	629a      	str	r2, [r3, #40]	@ 0x28
 8005344:	e015      	b.n	8005372 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005346:	893b      	ldrh	r3, [r7, #8]
 8005348:	0a1b      	lsrs	r3, r3, #8
 800534a:	b29b      	uxth	r3, r3
 800534c:	b2da      	uxtb	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	69b9      	ldr	r1, [r7, #24]
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f89c 	bl	8005496 <I2C_WaitOnTXISFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e012      	b.n	800538e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005368:	893b      	ldrh	r3, [r7, #8]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	2200      	movs	r2, #0
 800537a:	2140      	movs	r1, #64	@ 0x40
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f831 	bl	80053e4 <I2C_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	80002000 	.word	0x80002000

0800539c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d103      	bne.n	80053ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2200      	movs	r2, #0
 80053b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d007      	beq.n	80053d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	619a      	str	r2, [r3, #24]
  }
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053f4:	e03b      	b.n	800546e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f8d6 	bl	80055ac <I2C_IsErrorOccurred>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e041      	b.n	800548e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d02d      	beq.n	800546e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005412:	f7fd fb73 	bl	8002afc <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d302      	bcc.n	8005428 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d122      	bne.n	800546e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	4013      	ands	r3, r2
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	429a      	cmp	r2, r3
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	429a      	cmp	r2, r3
 8005444:	d113      	bne.n	800546e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e00f      	b.n	800548e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	699a      	ldr	r2, [r3, #24]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4013      	ands	r3, r2
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	bf0c      	ite	eq
 800547e:	2301      	moveq	r3, #1
 8005480:	2300      	movne	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	429a      	cmp	r2, r3
 800548a:	d0b4      	beq.n	80053f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054a2:	e033      	b.n	800550c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f87f 	bl	80055ac <I2C_IsErrorOccurred>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e031      	b.n	800551c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054be:	d025      	beq.n	800550c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c0:	f7fd fb1c 	bl	8002afc <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d302      	bcc.n	80054d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d11a      	bne.n	800550c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d013      	beq.n	800550c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e8:	f043 0220 	orr.w	r2, r3, #32
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e007      	b.n	800551c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b02      	cmp	r3, #2
 8005518:	d1c4      	bne.n	80054a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005530:	e02f      	b.n	8005592 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f838 	bl	80055ac <I2C_IsErrorOccurred>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e02d      	b.n	80055a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005546:	f7fd fad9 	bl	8002afc <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	429a      	cmp	r2, r3
 8005554:	d302      	bcc.n	800555c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d11a      	bne.n	8005592 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b20      	cmp	r3, #32
 8005568:	d013      	beq.n	8005592 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800556e:	f043 0220 	orr.w	r2, r3, #32
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e007      	b.n	80055a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b20      	cmp	r3, #32
 800559e:	d1c8      	bne.n	8005532 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	@ 0x28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d068      	beq.n	80056aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2210      	movs	r2, #16
 80055de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055e0:	e049      	b.n	8005676 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d045      	beq.n	8005676 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055ea:	f7fd fa87 	bl	8002afc <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <I2C_IsErrorOccurred+0x54>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d13a      	bne.n	8005676 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800560a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005612:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800561e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005622:	d121      	bne.n	8005668 <I2C_IsErrorOccurred+0xbc>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800562a:	d01d      	beq.n	8005668 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800562c:	7cfb      	ldrb	r3, [r7, #19]
 800562e:	2b20      	cmp	r3, #32
 8005630:	d01a      	beq.n	8005668 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005640:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005642:	f7fd fa5b 	bl	8002afc <HAL_GetTick>
 8005646:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005648:	e00e      	b.n	8005668 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800564a:	f7fd fa57 	bl	8002afc <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b19      	cmp	r3, #25
 8005656:	d907      	bls.n	8005668 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	f043 0320 	orr.w	r3, r3, #32
 800565e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005666:	e006      	b.n	8005676 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b20      	cmp	r3, #32
 8005674:	d1e9      	bne.n	800564a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b20      	cmp	r3, #32
 8005682:	d003      	beq.n	800568c <I2C_IsErrorOccurred+0xe0>
 8005684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0aa      	beq.n	80055e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800568c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005690:	2b00      	cmp	r3, #0
 8005692:	d103      	bne.n	800569c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2220      	movs	r2, #32
 800569a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	f043 0304 	orr.w	r3, r3, #4
 80056a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00b      	beq.n	80056d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	f043 0308 	orr.w	r3, r3, #8
 80056e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	f043 0302 	orr.w	r3, r3, #2
 8005706:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005710:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005718:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01c      	beq.n	800575a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff fe3b 	bl	800539c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6859      	ldr	r1, [r3, #4]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	4b0d      	ldr	r3, [pc, #52]	@ (8005768 <I2C_IsErrorOccurred+0x1bc>)
 8005732:	400b      	ands	r3, r1
 8005734:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	431a      	orrs	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800575a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800575e:	4618      	mov	r0, r3
 8005760:	3728      	adds	r7, #40	@ 0x28
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	fe00e800 	.word	0xfe00e800

0800576c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	607b      	str	r3, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	817b      	strh	r3, [r7, #10]
 800577a:	4613      	mov	r3, r2
 800577c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800577e:	897b      	ldrh	r3, [r7, #10]
 8005780:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005784:	7a7b      	ldrb	r3, [r7, #9]
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800578c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	4313      	orrs	r3, r2
 8005796:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800579a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	0d5b      	lsrs	r3, r3, #21
 80057a6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80057aa:	4b08      	ldr	r3, [pc, #32]	@ (80057cc <I2C_TransferConfig+0x60>)
 80057ac:	430b      	orrs	r3, r1
 80057ae:	43db      	mvns	r3, r3
 80057b0:	ea02 0103 	and.w	r1, r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	03ff63ff 	.word	0x03ff63ff

080057d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d138      	bne.n	8005858 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e032      	b.n	800585a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2224      	movs	r2, #36	@ 0x24
 8005800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005822:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6819      	ldr	r1, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	e000      	b.n	800585a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005858:	2302      	movs	r3, #2
  }
}
 800585a:	4618      	mov	r0, r3
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005866:	b480      	push	{r7}
 8005868:	b085      	sub	sp, #20
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b20      	cmp	r3, #32
 800587a:	d139      	bne.n	80058f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005886:	2302      	movs	r3, #2
 8005888:	e033      	b.n	80058f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2224      	movs	r2, #36	@ 0x24
 8005896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80058b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e000      	b.n	80058f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058f0:	2302      	movs	r3, #2
  }
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
	...

08005900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d141      	bne.n	8005992 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800590e:	4b4b      	ldr	r3, [pc, #300]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800591a:	d131      	bne.n	8005980 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800591c:	4b47      	ldr	r3, [pc, #284]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800591e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005922:	4a46      	ldr	r2, [pc, #280]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005928:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800592c:	4b43      	ldr	r3, [pc, #268]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005934:	4a41      	ldr	r2, [pc, #260]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800593a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800593c:	4b40      	ldr	r3, [pc, #256]	@ (8005a40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2232      	movs	r2, #50	@ 0x32
 8005942:	fb02 f303 	mul.w	r3, r2, r3
 8005946:	4a3f      	ldr	r2, [pc, #252]	@ (8005a44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005948:	fba2 2303 	umull	r2, r3, r2, r3
 800594c:	0c9b      	lsrs	r3, r3, #18
 800594e:	3301      	adds	r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005952:	e002      	b.n	800595a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3b01      	subs	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800595a:	4b38      	ldr	r3, [pc, #224]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005966:	d102      	bne.n	800596e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f2      	bne.n	8005954 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800596e:	4b33      	ldr	r3, [pc, #204]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800597a:	d158      	bne.n	8005a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e057      	b.n	8005a30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005980:	4b2e      	ldr	r3, [pc, #184]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005986:	4a2d      	ldr	r2, [pc, #180]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800598c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005990:	e04d      	b.n	8005a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005998:	d141      	bne.n	8005a1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800599a:	4b28      	ldr	r3, [pc, #160]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a6:	d131      	bne.n	8005a0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059a8:	4b24      	ldr	r3, [pc, #144]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ae:	4a23      	ldr	r2, [pc, #140]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059b8:	4b20      	ldr	r3, [pc, #128]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059c0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2232      	movs	r2, #50	@ 0x32
 80059ce:	fb02 f303 	mul.w	r3, r2, r3
 80059d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80059d4:	fba2 2303 	umull	r2, r3, r2, r3
 80059d8:	0c9b      	lsrs	r3, r3, #18
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059de:	e002      	b.n	80059e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059e6:	4b15      	ldr	r3, [pc, #84]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059f2:	d102      	bne.n	80059fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f2      	bne.n	80059e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059fa:	4b10      	ldr	r3, [pc, #64]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a06:	d112      	bne.n	8005a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e011      	b.n	8005a30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a12:	4a0a      	ldr	r2, [pc, #40]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005a1c:	e007      	b.n	8005a2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a1e:	4b07      	ldr	r3, [pc, #28]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a26:	4a05      	ldr	r2, [pc, #20]	@ (8005a3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	40007000 	.word	0x40007000
 8005a40:	20000000 	.word	0x20000000
 8005a44:	431bde83 	.word	0x431bde83

08005a48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005a4c:	4b05      	ldr	r3, [pc, #20]	@ (8005a64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	4a04      	ldr	r2, [pc, #16]	@ (8005a64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a56:	6093      	str	r3, [r2, #8]
}
 8005a58:	bf00      	nop
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40007000 	.word	0x40007000

08005a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e2fe      	b.n	8006078 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d075      	beq.n	8005b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a86:	4b97      	ldr	r3, [pc, #604]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 030c 	and.w	r3, r3, #12
 8005a8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a90:	4b94      	ldr	r3, [pc, #592]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b0c      	cmp	r3, #12
 8005a9e:	d102      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x3e>
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d002      	beq.n	8005aac <HAL_RCC_OscConfig+0x44>
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d10b      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aac:	4b8d      	ldr	r3, [pc, #564]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d05b      	beq.n	8005b70 <HAL_RCC_OscConfig+0x108>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d157      	bne.n	8005b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e2d9      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005acc:	d106      	bne.n	8005adc <HAL_RCC_OscConfig+0x74>
 8005ace:	4b85      	ldr	r3, [pc, #532]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a84      	ldr	r2, [pc, #528]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	e01d      	b.n	8005b18 <HAL_RCC_OscConfig+0xb0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCC_OscConfig+0x98>
 8005ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a7e      	ldr	r2, [pc, #504]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	4b7c      	ldr	r3, [pc, #496]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a7b      	ldr	r2, [pc, #492]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e00b      	b.n	8005b18 <HAL_RCC_OscConfig+0xb0>
 8005b00:	4b78      	ldr	r3, [pc, #480]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a77      	ldr	r2, [pc, #476]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	4b75      	ldr	r3, [pc, #468]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a74      	ldr	r2, [pc, #464]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d013      	beq.n	8005b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7fc ffec 	bl	8002afc <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b28:	f7fc ffe8 	bl	8002afc <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b64      	cmp	r3, #100	@ 0x64
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e29e      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0xc0>
 8005b46:	e014      	b.n	8005b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7fc ffd8 	bl	8002afc <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b50:	f7fc ffd4 	bl	8002afc <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b64      	cmp	r3, #100	@ 0x64
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e28a      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b62:	4b60      	ldr	r3, [pc, #384]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0xe8>
 8005b6e:	e000      	b.n	8005b72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d075      	beq.n	8005c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b7e:	4b59      	ldr	r3, [pc, #356]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 030c 	and.w	r3, r3, #12
 8005b86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b88:	4b56      	ldr	r3, [pc, #344]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b0c      	cmp	r3, #12
 8005b96:	d102      	bne.n	8005b9e <HAL_RCC_OscConfig+0x136>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d002      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x13c>
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d11f      	bne.n	8005be4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_OscConfig+0x154>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e25d      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bbc:	4b49      	ldr	r3, [pc, #292]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	061b      	lsls	r3, r3, #24
 8005bca:	4946      	ldr	r1, [pc, #280]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005bd0:	4b45      	ldr	r3, [pc, #276]	@ (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fc ff45 	bl	8002a64 <HAL_InitTick>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d043      	beq.n	8005c68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e249      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d023      	beq.n	8005c34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bec:	4b3d      	ldr	r3, [pc, #244]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fc ff80 	bl	8002afc <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c00:	f7fc ff7c 	bl	8002afc <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e232      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c12:	4b34      	ldr	r3, [pc, #208]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0f0      	beq.n	8005c00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c1e:	4b31      	ldr	r3, [pc, #196]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	061b      	lsls	r3, r3, #24
 8005c2c:	492d      	ldr	r1, [pc, #180]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	604b      	str	r3, [r1, #4]
 8005c32:	e01a      	b.n	8005c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c34:	4b2b      	ldr	r3, [pc, #172]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005c3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c40:	f7fc ff5c 	bl	8002afc <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c48:	f7fc ff58 	bl	8002afc <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e20e      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c5a:	4b22      	ldr	r3, [pc, #136]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1f0      	bne.n	8005c48 <HAL_RCC_OscConfig+0x1e0>
 8005c66:	e000      	b.n	8005c6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d041      	beq.n	8005cfa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01c      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c7e:	4b19      	ldr	r3, [pc, #100]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c84:	4a17      	ldr	r2, [pc, #92]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005c86:	f043 0301 	orr.w	r3, r3, #1
 8005c8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c8e:	f7fc ff35 	bl	8002afc <HAL_GetTick>
 8005c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c94:	e008      	b.n	8005ca8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c96:	f7fc ff31 	bl	8002afc <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d901      	bls.n	8005ca8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e1e7      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0ef      	beq.n	8005c96 <HAL_RCC_OscConfig+0x22e>
 8005cb6:	e020      	b.n	8005cfa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cbe:	4a09      	ldr	r2, [pc, #36]	@ (8005ce4 <HAL_RCC_OscConfig+0x27c>)
 8005cc0:	f023 0301 	bic.w	r3, r3, #1
 8005cc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc8:	f7fc ff18 	bl	8002afc <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cce:	e00d      	b.n	8005cec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cd0:	f7fc ff14 	bl	8002afc <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d906      	bls.n	8005cec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e1ca      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
 8005ce2:	bf00      	nop
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cec:	4b8c      	ldr	r3, [pc, #560]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1ea      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80a6 	beq.w	8005e54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d0c:	4b84      	ldr	r3, [pc, #528]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_RCC_OscConfig+0x2b4>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <HAL_RCC_OscConfig+0x2b6>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00d      	beq.n	8005d3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d22:	4b7f      	ldr	r3, [pc, #508]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d26:	4a7e      	ldr	r2, [pc, #504]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d3e:	4b79      	ldr	r3, [pc, #484]	@ (8005f24 <HAL_RCC_OscConfig+0x4bc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d118      	bne.n	8005d7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d4a:	4b76      	ldr	r3, [pc, #472]	@ (8005f24 <HAL_RCC_OscConfig+0x4bc>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a75      	ldr	r2, [pc, #468]	@ (8005f24 <HAL_RCC_OscConfig+0x4bc>)
 8005d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d56:	f7fc fed1 	bl	8002afc <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d5e:	f7fc fecd 	bl	8002afc <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e183      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d70:	4b6c      	ldr	r3, [pc, #432]	@ (8005f24 <HAL_RCC_OscConfig+0x4bc>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f0      	beq.n	8005d5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d108      	bne.n	8005d96 <HAL_RCC_OscConfig+0x32e>
 8005d84:	4b66      	ldr	r3, [pc, #408]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d8a:	4a65      	ldr	r2, [pc, #404]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005d8c:	f043 0301 	orr.w	r3, r3, #1
 8005d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d94:	e024      	b.n	8005de0 <HAL_RCC_OscConfig+0x378>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b05      	cmp	r3, #5
 8005d9c:	d110      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x358>
 8005d9e:	4b60      	ldr	r3, [pc, #384]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da4:	4a5e      	ldr	r2, [pc, #376]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005da6:	f043 0304 	orr.w	r3, r3, #4
 8005daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dae:	4b5c      	ldr	r3, [pc, #368]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db4:	4a5a      	ldr	r2, [pc, #360]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dbe:	e00f      	b.n	8005de0 <HAL_RCC_OscConfig+0x378>
 8005dc0:	4b57      	ldr	r3, [pc, #348]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc6:	4a56      	ldr	r2, [pc, #344]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005dc8:	f023 0301 	bic.w	r3, r3, #1
 8005dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dd0:	4b53      	ldr	r3, [pc, #332]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dd6:	4a52      	ldr	r2, [pc, #328]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005dd8:	f023 0304 	bic.w	r3, r3, #4
 8005ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d016      	beq.n	8005e16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de8:	f7fc fe88 	bl	8002afc <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dee:	e00a      	b.n	8005e06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df0:	f7fc fe84 	bl	8002afc <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e138      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e06:	4b46      	ldr	r3, [pc, #280]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0ed      	beq.n	8005df0 <HAL_RCC_OscConfig+0x388>
 8005e14:	e015      	b.n	8005e42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e16:	f7fc fe71 	bl	8002afc <HAL_GetTick>
 8005e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e1c:	e00a      	b.n	8005e34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1e:	f7fc fe6d 	bl	8002afc <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e121      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e34:	4b3a      	ldr	r3, [pc, #232]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1ed      	bne.n	8005e1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e42:	7ffb      	ldrb	r3, [r7, #31]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d105      	bne.n	8005e54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e48:	4b35      	ldr	r3, [pc, #212]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4c:	4a34      	ldr	r2, [pc, #208]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d03c      	beq.n	8005eda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01c      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e68:	4b2d      	ldr	r3, [pc, #180]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e78:	f7fc fe40 	bl	8002afc <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e80:	f7fc fe3c 	bl	8002afc <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e0f2      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e92:	4b23      	ldr	r3, [pc, #140]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0ef      	beq.n	8005e80 <HAL_RCC_OscConfig+0x418>
 8005ea0:	e01b      	b.n	8005eda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb2:	f7fc fe23 	bl	8002afc <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005eba:	f7fc fe1f 	bl	8002afc <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e0d5      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ecc:	4b14      	ldr	r3, [pc, #80]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1ef      	bne.n	8005eba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80c9 	beq.w	8006076 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 030c 	and.w	r3, r3, #12
 8005eec:	2b0c      	cmp	r3, #12
 8005eee:	f000 8083 	beq.w	8005ff8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d15e      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efa:	4b09      	ldr	r3, [pc, #36]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a08      	ldr	r2, [pc, #32]	@ (8005f20 <HAL_RCC_OscConfig+0x4b8>)
 8005f00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fc fdf9 	bl	8002afc <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f0c:	e00c      	b.n	8005f28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f0e:	f7fc fdf5 	bl	8002afc <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d905      	bls.n	8005f28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e0ab      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
 8005f20:	40021000 	.word	0x40021000
 8005f24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f28:	4b55      	ldr	r3, [pc, #340]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1ec      	bne.n	8005f0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f34:	4b52      	ldr	r3, [pc, #328]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	4b52      	ldr	r3, [pc, #328]	@ (8006084 <HAL_RCC_OscConfig+0x61c>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6a11      	ldr	r1, [r2, #32]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f44:	3a01      	subs	r2, #1
 8005f46:	0112      	lsls	r2, r2, #4
 8005f48:	4311      	orrs	r1, r2
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005f4e:	0212      	lsls	r2, r2, #8
 8005f50:	4311      	orrs	r1, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005f56:	0852      	lsrs	r2, r2, #1
 8005f58:	3a01      	subs	r2, #1
 8005f5a:	0552      	lsls	r2, r2, #21
 8005f5c:	4311      	orrs	r1, r2
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f62:	0852      	lsrs	r2, r2, #1
 8005f64:	3a01      	subs	r2, #1
 8005f66:	0652      	lsls	r2, r2, #25
 8005f68:	4311      	orrs	r1, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f6e:	06d2      	lsls	r2, r2, #27
 8005f70:	430a      	orrs	r2, r1
 8005f72:	4943      	ldr	r1, [pc, #268]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f78:	4b41      	ldr	r3, [pc, #260]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a40      	ldr	r2, [pc, #256]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f84:	4b3e      	ldr	r3, [pc, #248]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	4a3d      	ldr	r2, [pc, #244]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f90:	f7fc fdb4 	bl	8002afc <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f98:	f7fc fdb0 	bl	8002afc <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e066      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005faa:	4b35      	ldr	r3, [pc, #212]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0f0      	beq.n	8005f98 <HAL_RCC_OscConfig+0x530>
 8005fb6:	e05e      	b.n	8006076 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fb8:	4b31      	ldr	r3, [pc, #196]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a30      	ldr	r2, [pc, #192]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005fbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc4:	f7fc fd9a 	bl	8002afc <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fcc:	f7fc fd96 	bl	8002afc <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e04c      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fde:	4b28      	ldr	r3, [pc, #160]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f0      	bne.n	8005fcc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005fea:	4b25      	ldr	r3, [pc, #148]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	4924      	ldr	r1, [pc, #144]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8005ff0:	4b25      	ldr	r3, [pc, #148]	@ (8006088 <HAL_RCC_OscConfig+0x620>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	60cb      	str	r3, [r1, #12]
 8005ff6:	e03e      	b.n	8006076 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e039      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006004:	4b1e      	ldr	r3, [pc, #120]	@ (8006080 <HAL_RCC_OscConfig+0x618>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f003 0203 	and.w	r2, r3, #3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	429a      	cmp	r2, r3
 8006016:	d12c      	bne.n	8006072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006022:	3b01      	subs	r3, #1
 8006024:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006026:	429a      	cmp	r2, r3
 8006028:	d123      	bne.n	8006072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006036:	429a      	cmp	r2, r3
 8006038:	d11b      	bne.n	8006072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006044:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006046:	429a      	cmp	r2, r3
 8006048:	d113      	bne.n	8006072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006054:	085b      	lsrs	r3, r3, #1
 8006056:	3b01      	subs	r3, #1
 8006058:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800605a:	429a      	cmp	r2, r3
 800605c:	d109      	bne.n	8006072 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006068:	085b      	lsrs	r3, r3, #1
 800606a:	3b01      	subs	r3, #1
 800606c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800606e:	429a      	cmp	r2, r3
 8006070:	d001      	beq.n	8006076 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40021000 	.word	0x40021000
 8006084:	019f800c 	.word	0x019f800c
 8006088:	feeefffc 	.word	0xfeeefffc

0800608c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e11e      	b.n	80062e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060a4:	4b91      	ldr	r3, [pc, #580]	@ (80062ec <HAL_RCC_ClockConfig+0x260>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d910      	bls.n	80060d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060b2:	4b8e      	ldr	r3, [pc, #568]	@ (80062ec <HAL_RCC_ClockConfig+0x260>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f023 020f 	bic.w	r2, r3, #15
 80060ba:	498c      	ldr	r1, [pc, #560]	@ (80062ec <HAL_RCC_ClockConfig+0x260>)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	4313      	orrs	r3, r2
 80060c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c2:	4b8a      	ldr	r3, [pc, #552]	@ (80062ec <HAL_RCC_ClockConfig+0x260>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d001      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e106      	b.n	80062e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d073      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	d129      	bne.n	800613c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060e8:	4b81      	ldr	r3, [pc, #516]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e0f4      	b.n	80062e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80060f8:	f000 f99e 	bl	8006438 <RCC_GetSysClockFreqFromPLLSource>
 80060fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4a7c      	ldr	r2, [pc, #496]	@ (80062f4 <HAL_RCC_ClockConfig+0x268>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d93f      	bls.n	8006186 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006106:	4b7a      	ldr	r3, [pc, #488]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d009      	beq.n	8006126 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800611a:	2b00      	cmp	r3, #0
 800611c:	d033      	beq.n	8006186 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006122:	2b00      	cmp	r3, #0
 8006124:	d12f      	bne.n	8006186 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006126:	4b72      	ldr	r3, [pc, #456]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800612e:	4a70      	ldr	r2, [pc, #448]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006134:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006136:	2380      	movs	r3, #128	@ 0x80
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	e024      	b.n	8006186 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d107      	bne.n	8006154 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006144:	4b6a      	ldr	r3, [pc, #424]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e0c6      	b.n	80062e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006154:	4b66      	ldr	r3, [pc, #408]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0be      	b.n	80062e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006164:	f000 f8ce 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 8006168:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4a61      	ldr	r2, [pc, #388]	@ (80062f4 <HAL_RCC_ClockConfig+0x268>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d909      	bls.n	8006186 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006172:	4b5f      	ldr	r3, [pc, #380]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800617a:	4a5d      	ldr	r2, [pc, #372]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 800617c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006180:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006182:	2380      	movs	r3, #128	@ 0x80
 8006184:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006186:	4b5a      	ldr	r3, [pc, #360]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f023 0203 	bic.w	r2, r3, #3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	4957      	ldr	r1, [pc, #348]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006194:	4313      	orrs	r3, r2
 8006196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006198:	f7fc fcb0 	bl	8002afc <HAL_GetTick>
 800619c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800619e:	e00a      	b.n	80061b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a0:	f7fc fcac 	bl	8002afc <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e095      	b.n	80062e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b6:	4b4e      	ldr	r3, [pc, #312]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 020c 	and.w	r2, r3, #12
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d1eb      	bne.n	80061a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d023      	beq.n	800621c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061e0:	4b43      	ldr	r3, [pc, #268]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	4a42      	ldr	r2, [pc, #264]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 80061e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80061ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0308 	and.w	r3, r3, #8
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80061f8:	4b3d      	ldr	r3, [pc, #244]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006200:	4a3b      	ldr	r2, [pc, #236]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006202:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006206:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006208:	4b39      	ldr	r3, [pc, #228]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	4936      	ldr	r1, [pc, #216]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006216:	4313      	orrs	r3, r2
 8006218:	608b      	str	r3, [r1, #8]
 800621a:	e008      	b.n	800622e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b80      	cmp	r3, #128	@ 0x80
 8006220:	d105      	bne.n	800622e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006222:	4b33      	ldr	r3, [pc, #204]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	4a32      	ldr	r2, [pc, #200]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006228:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800622c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800622e:	4b2f      	ldr	r3, [pc, #188]	@ (80062ec <HAL_RCC_ClockConfig+0x260>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d21d      	bcs.n	8006278 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623c:	4b2b      	ldr	r3, [pc, #172]	@ (80062ec <HAL_RCC_ClockConfig+0x260>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f023 020f 	bic.w	r2, r3, #15
 8006244:	4929      	ldr	r1, [pc, #164]	@ (80062ec <HAL_RCC_ClockConfig+0x260>)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	4313      	orrs	r3, r2
 800624a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800624c:	f7fc fc56 	bl	8002afc <HAL_GetTick>
 8006250:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006252:	e00a      	b.n	800626a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006254:	f7fc fc52 	bl	8002afc <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006262:	4293      	cmp	r3, r2
 8006264:	d901      	bls.n	800626a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e03b      	b.n	80062e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800626a:	4b20      	ldr	r3, [pc, #128]	@ (80062ec <HAL_RCC_ClockConfig+0x260>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d1ed      	bne.n	8006254 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d008      	beq.n	8006296 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006284:	4b1a      	ldr	r3, [pc, #104]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	4917      	ldr	r1, [pc, #92]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 8006292:	4313      	orrs	r3, r2
 8006294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062a2:	4b13      	ldr	r3, [pc, #76]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	490f      	ldr	r1, [pc, #60]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062b6:	f000 f825 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 80062ba:	4602      	mov	r2, r0
 80062bc:	4b0c      	ldr	r3, [pc, #48]	@ (80062f0 <HAL_RCC_ClockConfig+0x264>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	091b      	lsrs	r3, r3, #4
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	490c      	ldr	r1, [pc, #48]	@ (80062f8 <HAL_RCC_ClockConfig+0x26c>)
 80062c8:	5ccb      	ldrb	r3, [r1, r3]
 80062ca:	f003 031f 	and.w	r3, r3, #31
 80062ce:	fa22 f303 	lsr.w	r3, r2, r3
 80062d2:	4a0a      	ldr	r2, [pc, #40]	@ (80062fc <HAL_RCC_ClockConfig+0x270>)
 80062d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80062d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006300 <HAL_RCC_ClockConfig+0x274>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fc fbc2 	bl	8002a64 <HAL_InitTick>
 80062e0:	4603      	mov	r3, r0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40022000 	.word	0x40022000
 80062f0:	40021000 	.word	0x40021000
 80062f4:	04c4b400 	.word	0x04c4b400
 80062f8:	08009db4 	.word	0x08009db4
 80062fc:	20000000 	.word	0x20000000
 8006300:	20000004 	.word	0x20000004

08006304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800630a:	4b2c      	ldr	r3, [pc, #176]	@ (80063bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 030c 	and.w	r3, r3, #12
 8006312:	2b04      	cmp	r3, #4
 8006314:	d102      	bne.n	800631c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006316:	4b2a      	ldr	r3, [pc, #168]	@ (80063c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006318:	613b      	str	r3, [r7, #16]
 800631a:	e047      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800631c:	4b27      	ldr	r3, [pc, #156]	@ (80063bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 030c 	and.w	r3, r3, #12
 8006324:	2b08      	cmp	r3, #8
 8006326:	d102      	bne.n	800632e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006328:	4b26      	ldr	r3, [pc, #152]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800632a:	613b      	str	r3, [r7, #16]
 800632c:	e03e      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800632e:	4b23      	ldr	r3, [pc, #140]	@ (80063bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b0c      	cmp	r3, #12
 8006338:	d136      	bne.n	80063a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800633a:	4b20      	ldr	r3, [pc, #128]	@ (80063bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006344:	4b1d      	ldr	r3, [pc, #116]	@ (80063bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	3301      	adds	r3, #1
 8006350:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b03      	cmp	r3, #3
 8006356:	d10c      	bne.n	8006372 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006358:	4a1a      	ldr	r2, [pc, #104]	@ (80063c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006360:	4a16      	ldr	r2, [pc, #88]	@ (80063bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006362:	68d2      	ldr	r2, [r2, #12]
 8006364:	0a12      	lsrs	r2, r2, #8
 8006366:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800636a:	fb02 f303 	mul.w	r3, r2, r3
 800636e:	617b      	str	r3, [r7, #20]
      break;
 8006370:	e00c      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006372:	4a13      	ldr	r2, [pc, #76]	@ (80063c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	fbb2 f3f3 	udiv	r3, r2, r3
 800637a:	4a10      	ldr	r2, [pc, #64]	@ (80063bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800637c:	68d2      	ldr	r2, [r2, #12]
 800637e:	0a12      	lsrs	r2, r2, #8
 8006380:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006384:	fb02 f303 	mul.w	r3, r2, r3
 8006388:	617b      	str	r3, [r7, #20]
      break;
 800638a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800638c:	4b0b      	ldr	r3, [pc, #44]	@ (80063bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	0e5b      	lsrs	r3, r3, #25
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	3301      	adds	r3, #1
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	e001      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80063ac:	693b      	ldr	r3, [r7, #16]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40021000 	.word	0x40021000
 80063c0:	00f42400 	.word	0x00f42400
 80063c4:	016e3600 	.word	0x016e3600

080063c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063cc:	4b03      	ldr	r3, [pc, #12]	@ (80063dc <HAL_RCC_GetHCLKFreq+0x14>)
 80063ce:	681b      	ldr	r3, [r3, #0]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	20000000 	.word	0x20000000

080063e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063e4:	f7ff fff0 	bl	80063c8 <HAL_RCC_GetHCLKFreq>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b06      	ldr	r3, [pc, #24]	@ (8006404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	4904      	ldr	r1, [pc, #16]	@ (8006408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063f6:	5ccb      	ldrb	r3, [r1, r3]
 80063f8:	f003 031f 	and.w	r3, r3, #31
 80063fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006400:	4618      	mov	r0, r3
 8006402:	bd80      	pop	{r7, pc}
 8006404:	40021000 	.word	0x40021000
 8006408:	08009dc4 	.word	0x08009dc4

0800640c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006410:	f7ff ffda 	bl	80063c8 <HAL_RCC_GetHCLKFreq>
 8006414:	4602      	mov	r2, r0
 8006416:	4b06      	ldr	r3, [pc, #24]	@ (8006430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	0adb      	lsrs	r3, r3, #11
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	4904      	ldr	r1, [pc, #16]	@ (8006434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006422:	5ccb      	ldrb	r3, [r1, r3]
 8006424:	f003 031f 	and.w	r3, r3, #31
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800642c:	4618      	mov	r0, r3
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40021000 	.word	0x40021000
 8006434:	08009dc4 	.word	0x08009dc4

08006438 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800643e:	4b1e      	ldr	r3, [pc, #120]	@ (80064b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006448:	4b1b      	ldr	r3, [pc, #108]	@ (80064b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	091b      	lsrs	r3, r3, #4
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	3301      	adds	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d10c      	bne.n	8006476 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800645c:	4a17      	ldr	r2, [pc, #92]	@ (80064bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	fbb2 f3f3 	udiv	r3, r2, r3
 8006464:	4a14      	ldr	r2, [pc, #80]	@ (80064b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006466:	68d2      	ldr	r2, [r2, #12]
 8006468:	0a12      	lsrs	r2, r2, #8
 800646a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800646e:	fb02 f303 	mul.w	r3, r2, r3
 8006472:	617b      	str	r3, [r7, #20]
    break;
 8006474:	e00c      	b.n	8006490 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006476:	4a12      	ldr	r2, [pc, #72]	@ (80064c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	fbb2 f3f3 	udiv	r3, r2, r3
 800647e:	4a0e      	ldr	r2, [pc, #56]	@ (80064b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006480:	68d2      	ldr	r2, [r2, #12]
 8006482:	0a12      	lsrs	r2, r2, #8
 8006484:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006488:	fb02 f303 	mul.w	r3, r2, r3
 800648c:	617b      	str	r3, [r7, #20]
    break;
 800648e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006490:	4b09      	ldr	r3, [pc, #36]	@ (80064b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	0e5b      	lsrs	r3, r3, #25
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	3301      	adds	r3, #1
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80064aa:	687b      	ldr	r3, [r7, #4]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	40021000 	.word	0x40021000
 80064bc:	016e3600 	.word	0x016e3600
 80064c0:	00f42400 	.word	0x00f42400

080064c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064cc:	2300      	movs	r3, #0
 80064ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064d0:	2300      	movs	r3, #0
 80064d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8098 	beq.w	8006612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e2:	2300      	movs	r3, #0
 80064e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064e6:	4b43      	ldr	r3, [pc, #268]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10d      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f2:	4b40      	ldr	r3, [pc, #256]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f6:	4a3f      	ldr	r2, [pc, #252]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80064fe:	4b3d      	ldr	r3, [pc, #244]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006506:	60bb      	str	r3, [r7, #8]
 8006508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800650a:	2301      	movs	r3, #1
 800650c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800650e:	4b3a      	ldr	r3, [pc, #232]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a39      	ldr	r2, [pc, #228]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006518:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800651a:	f7fc faef 	bl	8002afc <HAL_GetTick>
 800651e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006520:	e009      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006522:	f7fc faeb 	bl	8002afc <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d902      	bls.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	74fb      	strb	r3, [r7, #19]
        break;
 8006534:	e005      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006536:	4b30      	ldr	r3, [pc, #192]	@ (80065f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0ef      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006542:	7cfb      	ldrb	r3, [r7, #19]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d159      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006548:	4b2a      	ldr	r3, [pc, #168]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800654e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006552:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d01e      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	429a      	cmp	r2, r3
 8006562:	d019      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006564:	4b23      	ldr	r3, [pc, #140]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800656a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800656e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006570:	4b20      	ldr	r3, [pc, #128]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006576:	4a1f      	ldr	r2, [pc, #124]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800657c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006580:	4b1c      	ldr	r3, [pc, #112]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006586:	4a1b      	ldr	r2, [pc, #108]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800658c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006590:	4a18      	ldr	r2, [pc, #96]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d016      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a2:	f7fc faab 	bl	8002afc <HAL_GetTick>
 80065a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065a8:	e00b      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065aa:	f7fc faa7 	bl	8002afc <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d902      	bls.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	74fb      	strb	r3, [r7, #19]
            break;
 80065c0:	e006      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065c2:	4b0c      	ldr	r3, [pc, #48]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0ec      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80065d0:	7cfb      	ldrb	r3, [r7, #19]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065d6:	4b07      	ldr	r3, [pc, #28]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e4:	4903      	ldr	r1, [pc, #12]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80065ec:	e008      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065ee:	7cfb      	ldrb	r3, [r7, #19]
 80065f0:	74bb      	strb	r3, [r7, #18]
 80065f2:	e005      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80065f4:	40021000 	.word	0x40021000
 80065f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fc:	7cfb      	ldrb	r3, [r7, #19]
 80065fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006600:	7c7b      	ldrb	r3, [r7, #17]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d105      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006606:	4ba7      	ldr	r3, [pc, #668]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800660a:	4aa6      	ldr	r2, [pc, #664]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800660c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006610:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800661e:	4ba1      	ldr	r3, [pc, #644]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006624:	f023 0203 	bic.w	r2, r3, #3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	499d      	ldr	r1, [pc, #628]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006640:	4b98      	ldr	r3, [pc, #608]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006646:	f023 020c 	bic.w	r2, r3, #12
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	4995      	ldr	r1, [pc, #596]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006662:	4b90      	ldr	r3, [pc, #576]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006668:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	498c      	ldr	r1, [pc, #560]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006684:	4b87      	ldr	r3, [pc, #540]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	4984      	ldr	r1, [pc, #528]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066a6:	4b7f      	ldr	r3, [pc, #508]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	497b      	ldr	r1, [pc, #492]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066c8:	4b76      	ldr	r3, [pc, #472]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	4973      	ldr	r1, [pc, #460]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066ea:	4b6e      	ldr	r3, [pc, #440]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	496a      	ldr	r1, [pc, #424]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800670c:	4b65      	ldr	r3, [pc, #404]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006712:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	4962      	ldr	r1, [pc, #392]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800672e:	4b5d      	ldr	r3, [pc, #372]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006734:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	4959      	ldr	r1, [pc, #356]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006750:	4b54      	ldr	r3, [pc, #336]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006752:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006756:	f023 0203 	bic.w	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675e:	4951      	ldr	r1, [pc, #324]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006772:	4b4c      	ldr	r3, [pc, #304]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006778:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006780:	4948      	ldr	r1, [pc, #288]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006790:	2b00      	cmp	r3, #0
 8006792:	d015      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006794:	4b43      	ldr	r3, [pc, #268]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800679a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a2:	4940      	ldr	r1, [pc, #256]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067b2:	d105      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067b4:	4b3b      	ldr	r3, [pc, #236]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	4a3a      	ldr	r2, [pc, #232]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d015      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067cc:	4b35      	ldr	r3, [pc, #212]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067da:	4932      	ldr	r1, [pc, #200]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067ea:	d105      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067ec:	4b2d      	ldr	r3, [pc, #180]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	4a2c      	ldr	r2, [pc, #176]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d015      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006804:	4b27      	ldr	r3, [pc, #156]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800680a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006812:	4924      	ldr	r1, [pc, #144]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006822:	d105      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006824:	4b1f      	ldr	r3, [pc, #124]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	4a1e      	ldr	r2, [pc, #120]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800682a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800682e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d015      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800683c:	4b19      	ldr	r3, [pc, #100]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006842:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684a:	4916      	ldr	r1, [pc, #88]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006856:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800685a:	d105      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800685c:	4b11      	ldr	r3, [pc, #68]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	4a10      	ldr	r2, [pc, #64]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006866:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d019      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006874:	4b0b      	ldr	r3, [pc, #44]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800687a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006882:	4908      	ldr	r1, [pc, #32]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006884:	4313      	orrs	r3, r2
 8006886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006892:	d109      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006894:	4b03      	ldr	r3, [pc, #12]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	4a02      	ldr	r2, [pc, #8]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800689a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800689e:	60d3      	str	r3, [r2, #12]
 80068a0:	e002      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80068a2:	bf00      	nop
 80068a4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d015      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80068b4:	4b29      	ldr	r3, [pc, #164]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c2:	4926      	ldr	r1, [pc, #152]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068d2:	d105      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068d4:	4b21      	ldr	r3, [pc, #132]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	4a20      	ldr	r2, [pc, #128]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068de:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d015      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80068ec:	4b1b      	ldr	r3, [pc, #108]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068fa:	4918      	ldr	r1, [pc, #96]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800690a:	d105      	bne.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800690c:	4b13      	ldr	r3, [pc, #76]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	4a12      	ldr	r2, [pc, #72]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006916:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d015      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006924:	4b0d      	ldr	r3, [pc, #52]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006926:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800692a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006932:	490a      	ldr	r1, [pc, #40]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800693e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006942:	d105      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006944:	4b05      	ldr	r3, [pc, #20]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	4a04      	ldr	r2, [pc, #16]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800694a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800694e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006950:	7cbb      	ldrb	r3, [r7, #18]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40021000 	.word	0x40021000

08006960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e049      	b.n	8006a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fb fe38 	bl	80025fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	4619      	mov	r1, r3
 800699e:	4610      	mov	r0, r2
 80069a0:	f001 f832 	bl	8007a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d001      	beq.n	8006a28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e04c      	b.n	8006ac2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a26      	ldr	r2, [pc, #152]	@ (8006ad0 <HAL_TIM_Base_Start+0xc0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d022      	beq.n	8006a80 <HAL_TIM_Base_Start+0x70>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a42:	d01d      	beq.n	8006a80 <HAL_TIM_Base_Start+0x70>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a22      	ldr	r2, [pc, #136]	@ (8006ad4 <HAL_TIM_Base_Start+0xc4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d018      	beq.n	8006a80 <HAL_TIM_Base_Start+0x70>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a21      	ldr	r2, [pc, #132]	@ (8006ad8 <HAL_TIM_Base_Start+0xc8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d013      	beq.n	8006a80 <HAL_TIM_Base_Start+0x70>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006adc <HAL_TIM_Base_Start+0xcc>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00e      	beq.n	8006a80 <HAL_TIM_Base_Start+0x70>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1e      	ldr	r2, [pc, #120]	@ (8006ae0 <HAL_TIM_Base_Start+0xd0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d009      	beq.n	8006a80 <HAL_TIM_Base_Start+0x70>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae4 <HAL_TIM_Base_Start+0xd4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d004      	beq.n	8006a80 <HAL_TIM_Base_Start+0x70>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae8 <HAL_TIM_Base_Start+0xd8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d115      	bne.n	8006aac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	4b19      	ldr	r3, [pc, #100]	@ (8006aec <HAL_TIM_Base_Start+0xdc>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b06      	cmp	r3, #6
 8006a90:	d015      	beq.n	8006abe <HAL_TIM_Base_Start+0xae>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a98:	d011      	beq.n	8006abe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0201 	orr.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aaa:	e008      	b.n	8006abe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	e000      	b.n	8006ac0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006abe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40000800 	.word	0x40000800
 8006adc:	40000c00 	.word	0x40000c00
 8006ae0:	40013400 	.word	0x40013400
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	40015000 	.word	0x40015000
 8006aec:	00010007 	.word	0x00010007

08006af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d001      	beq.n	8006b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e054      	b.n	8006bb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0201 	orr.w	r2, r2, #1
 8006b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a26      	ldr	r2, [pc, #152]	@ (8006bc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d022      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b32:	d01d      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a22      	ldr	r2, [pc, #136]	@ (8006bc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d018      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a21      	ldr	r2, [pc, #132]	@ (8006bc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d013      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bcc <HAL_TIM_Base_Start_IT+0xdc>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00e      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1e      	ldr	r2, [pc, #120]	@ (8006bd0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d009      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d004      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd8 <HAL_TIM_Base_Start_IT+0xe8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d115      	bne.n	8006b9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	4b19      	ldr	r3, [pc, #100]	@ (8006bdc <HAL_TIM_Base_Start_IT+0xec>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b06      	cmp	r3, #6
 8006b80:	d015      	beq.n	8006bae <HAL_TIM_Base_Start_IT+0xbe>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b88:	d011      	beq.n	8006bae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0201 	orr.w	r2, r2, #1
 8006b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9a:	e008      	b.n	8006bae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0201 	orr.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	e000      	b.n	8006bb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40000400 	.word	0x40000400
 8006bc8:	40000800 	.word	0x40000800
 8006bcc:	40000c00 	.word	0x40000c00
 8006bd0:	40013400 	.word	0x40013400
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	40015000 	.word	0x40015000
 8006bdc:	00010007 	.word	0x00010007

08006be0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0201 	bic.w	r2, r2, #1
 8006bf6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a1a      	ldr	r2, [r3, #32]
 8006bfe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10f      	bne.n	8006c28 <HAL_TIM_Base_Stop_IT+0x48>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6a1a      	ldr	r2, [r3, #32]
 8006c0e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006c12:	4013      	ands	r3, r2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d107      	bne.n	8006c28 <HAL_TIM_Base_Stop_IT+0x48>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0201 	bic.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b082      	sub	sp, #8
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e049      	b.n	8006ce4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f841 	bl	8006cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	f000 fec3 	bl	8007a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d109      	bne.n	8006d24 <HAL_TIM_PWM_Start+0x24>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	bf14      	ite	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	e03c      	b.n	8006d9e <HAL_TIM_PWM_Start+0x9e>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d109      	bne.n	8006d3e <HAL_TIM_PWM_Start+0x3e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	bf14      	ite	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	2300      	moveq	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	e02f      	b.n	8006d9e <HAL_TIM_PWM_Start+0x9e>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d109      	bne.n	8006d58 <HAL_TIM_PWM_Start+0x58>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	bf14      	ite	ne
 8006d50:	2301      	movne	r3, #1
 8006d52:	2300      	moveq	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	e022      	b.n	8006d9e <HAL_TIM_PWM_Start+0x9e>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b0c      	cmp	r3, #12
 8006d5c:	d109      	bne.n	8006d72 <HAL_TIM_PWM_Start+0x72>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	bf14      	ite	ne
 8006d6a:	2301      	movne	r3, #1
 8006d6c:	2300      	moveq	r3, #0
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	e015      	b.n	8006d9e <HAL_TIM_PWM_Start+0x9e>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b10      	cmp	r3, #16
 8006d76:	d109      	bne.n	8006d8c <HAL_TIM_PWM_Start+0x8c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	bf14      	ite	ne
 8006d84:	2301      	movne	r3, #1
 8006d86:	2300      	moveq	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	e008      	b.n	8006d9e <HAL_TIM_PWM_Start+0x9e>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	bf14      	ite	ne
 8006d98:	2301      	movne	r3, #1
 8006d9a:	2300      	moveq	r3, #0
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e0a6      	b.n	8006ef4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <HAL_TIM_PWM_Start+0xb6>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006db4:	e023      	b.n	8006dfe <HAL_TIM_PWM_Start+0xfe>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d104      	bne.n	8006dc6 <HAL_TIM_PWM_Start+0xc6>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dc4:	e01b      	b.n	8006dfe <HAL_TIM_PWM_Start+0xfe>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d104      	bne.n	8006dd6 <HAL_TIM_PWM_Start+0xd6>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dd4:	e013      	b.n	8006dfe <HAL_TIM_PWM_Start+0xfe>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b0c      	cmp	r3, #12
 8006dda:	d104      	bne.n	8006de6 <HAL_TIM_PWM_Start+0xe6>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006de4:	e00b      	b.n	8006dfe <HAL_TIM_PWM_Start+0xfe>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b10      	cmp	r3, #16
 8006dea:	d104      	bne.n	8006df6 <HAL_TIM_PWM_Start+0xf6>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006df4:	e003      	b.n	8006dfe <HAL_TIM_PWM_Start+0xfe>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2201      	movs	r2, #1
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 fa78 	bl	80082fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a3a      	ldr	r2, [pc, #232]	@ (8006efc <HAL_TIM_PWM_Start+0x1fc>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d018      	beq.n	8006e48 <HAL_TIM_PWM_Start+0x148>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a39      	ldr	r2, [pc, #228]	@ (8006f00 <HAL_TIM_PWM_Start+0x200>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d013      	beq.n	8006e48 <HAL_TIM_PWM_Start+0x148>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a37      	ldr	r2, [pc, #220]	@ (8006f04 <HAL_TIM_PWM_Start+0x204>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00e      	beq.n	8006e48 <HAL_TIM_PWM_Start+0x148>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a36      	ldr	r2, [pc, #216]	@ (8006f08 <HAL_TIM_PWM_Start+0x208>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d009      	beq.n	8006e48 <HAL_TIM_PWM_Start+0x148>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a34      	ldr	r2, [pc, #208]	@ (8006f0c <HAL_TIM_PWM_Start+0x20c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d004      	beq.n	8006e48 <HAL_TIM_PWM_Start+0x148>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a33      	ldr	r2, [pc, #204]	@ (8006f10 <HAL_TIM_PWM_Start+0x210>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d101      	bne.n	8006e4c <HAL_TIM_PWM_Start+0x14c>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <HAL_TIM_PWM_Start+0x14e>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d007      	beq.n	8006e62 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a25      	ldr	r2, [pc, #148]	@ (8006efc <HAL_TIM_PWM_Start+0x1fc>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d022      	beq.n	8006eb2 <HAL_TIM_PWM_Start+0x1b2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e74:	d01d      	beq.n	8006eb2 <HAL_TIM_PWM_Start+0x1b2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a26      	ldr	r2, [pc, #152]	@ (8006f14 <HAL_TIM_PWM_Start+0x214>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d018      	beq.n	8006eb2 <HAL_TIM_PWM_Start+0x1b2>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a24      	ldr	r2, [pc, #144]	@ (8006f18 <HAL_TIM_PWM_Start+0x218>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d013      	beq.n	8006eb2 <HAL_TIM_PWM_Start+0x1b2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a23      	ldr	r2, [pc, #140]	@ (8006f1c <HAL_TIM_PWM_Start+0x21c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00e      	beq.n	8006eb2 <HAL_TIM_PWM_Start+0x1b2>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a19      	ldr	r2, [pc, #100]	@ (8006f00 <HAL_TIM_PWM_Start+0x200>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d009      	beq.n	8006eb2 <HAL_TIM_PWM_Start+0x1b2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a18      	ldr	r2, [pc, #96]	@ (8006f04 <HAL_TIM_PWM_Start+0x204>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d004      	beq.n	8006eb2 <HAL_TIM_PWM_Start+0x1b2>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a18      	ldr	r2, [pc, #96]	@ (8006f10 <HAL_TIM_PWM_Start+0x210>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d115      	bne.n	8006ede <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	4b19      	ldr	r3, [pc, #100]	@ (8006f20 <HAL_TIM_PWM_Start+0x220>)
 8006eba:	4013      	ands	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b06      	cmp	r3, #6
 8006ec2:	d015      	beq.n	8006ef0 <HAL_TIM_PWM_Start+0x1f0>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eca:	d011      	beq.n	8006ef0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006edc:	e008      	b.n	8006ef0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 0201 	orr.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e000      	b.n	8006ef2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40012c00 	.word	0x40012c00
 8006f00:	40013400 	.word	0x40013400
 8006f04:	40014000 	.word	0x40014000
 8006f08:	40014400 	.word	0x40014400
 8006f0c:	40014800 	.word	0x40014800
 8006f10:	40015000 	.word	0x40015000
 8006f14:	40000400 	.word	0x40000400
 8006f18:	40000800 	.word	0x40000800
 8006f1c:	40000c00 	.word	0x40000c00
 8006f20:	00010007 	.word	0x00010007

08006f24 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 f9e0 	bl	80082fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a40      	ldr	r2, [pc, #256]	@ (8007044 <HAL_TIM_PWM_Stop+0x120>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d018      	beq.n	8006f78 <HAL_TIM_PWM_Stop+0x54>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a3f      	ldr	r2, [pc, #252]	@ (8007048 <HAL_TIM_PWM_Stop+0x124>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d013      	beq.n	8006f78 <HAL_TIM_PWM_Stop+0x54>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a3d      	ldr	r2, [pc, #244]	@ (800704c <HAL_TIM_PWM_Stop+0x128>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00e      	beq.n	8006f78 <HAL_TIM_PWM_Stop+0x54>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a3c      	ldr	r2, [pc, #240]	@ (8007050 <HAL_TIM_PWM_Stop+0x12c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d009      	beq.n	8006f78 <HAL_TIM_PWM_Stop+0x54>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a3a      	ldr	r2, [pc, #232]	@ (8007054 <HAL_TIM_PWM_Stop+0x130>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <HAL_TIM_PWM_Stop+0x54>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a39      	ldr	r2, [pc, #228]	@ (8007058 <HAL_TIM_PWM_Stop+0x134>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d101      	bne.n	8006f7c <HAL_TIM_PWM_Stop+0x58>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <HAL_TIM_PWM_Stop+0x5a>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d017      	beq.n	8006fb2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6a1a      	ldr	r2, [r3, #32]
 8006f88:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10f      	bne.n	8006fb2 <HAL_TIM_PWM_Stop+0x8e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6a1a      	ldr	r2, [r3, #32]
 8006f98:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d107      	bne.n	8006fb2 <HAL_TIM_PWM_Stop+0x8e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6a1a      	ldr	r2, [r3, #32]
 8006fb8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10f      	bne.n	8006fe2 <HAL_TIM_PWM_Stop+0xbe>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6a1a      	ldr	r2, [r3, #32]
 8006fc8:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d107      	bne.n	8006fe2 <HAL_TIM_PWM_Stop+0xbe>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0201 	bic.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <HAL_TIM_PWM_Stop+0xce>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ff0:	e023      	b.n	800703a <HAL_TIM_PWM_Stop+0x116>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d104      	bne.n	8007002 <HAL_TIM_PWM_Stop+0xde>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007000:	e01b      	b.n	800703a <HAL_TIM_PWM_Stop+0x116>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b08      	cmp	r3, #8
 8007006:	d104      	bne.n	8007012 <HAL_TIM_PWM_Stop+0xee>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007010:	e013      	b.n	800703a <HAL_TIM_PWM_Stop+0x116>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b0c      	cmp	r3, #12
 8007016:	d104      	bne.n	8007022 <HAL_TIM_PWM_Stop+0xfe>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007020:	e00b      	b.n	800703a <HAL_TIM_PWM_Stop+0x116>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b10      	cmp	r3, #16
 8007026:	d104      	bne.n	8007032 <HAL_TIM_PWM_Stop+0x10e>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007030:	e003      	b.n	800703a <HAL_TIM_PWM_Stop+0x116>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40012c00 	.word	0x40012c00
 8007048:	40013400 	.word	0x40013400
 800704c:	40014000 	.word	0x40014000
 8007050:	40014400 	.word	0x40014400
 8007054:	40014800 	.word	0x40014800
 8007058:	40015000 	.word	0x40015000

0800705c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e097      	b.n	80071a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d106      	bne.n	800708a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7fb fb33 	bl	80026f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2202      	movs	r2, #2
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	6812      	ldr	r2, [r2, #0]
 800709c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80070a0:	f023 0307 	bic.w	r3, r3, #7
 80070a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f000 fca9 	bl	8007a08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070de:	f023 0303 	bic.w	r3, r3, #3
 80070e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	021b      	lsls	r3, r3, #8
 80070ee:	4313      	orrs	r3, r2
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80070fc:	f023 030c 	bic.w	r3, r3, #12
 8007100:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007108:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800710c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	021b      	lsls	r3, r3, #8
 8007118:	4313      	orrs	r3, r2
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	011a      	lsls	r2, r3, #4
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	031b      	lsls	r3, r3, #12
 800712c:	4313      	orrs	r3, r2
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800713a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007142:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	4313      	orrs	r3, r2
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d110      	bne.n	80071fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d102      	bne.n	80071e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80071de:	7b7b      	ldrb	r3, [r7, #13]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d001      	beq.n	80071e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e069      	b.n	80072bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071f8:	e031      	b.n	800725e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d110      	bne.n	8007222 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d102      	bne.n	800720c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007206:	7b3b      	ldrb	r3, [r7, #12]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d001      	beq.n	8007210 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e055      	b.n	80072bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007220:	e01d      	b.n	800725e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d108      	bne.n	800723a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d105      	bne.n	800723a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800722e:	7b7b      	ldrb	r3, [r7, #13]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d102      	bne.n	800723a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007234:	7b3b      	ldrb	r3, [r7, #12]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d001      	beq.n	800723e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e03e      	b.n	80072bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2202      	movs	r2, #2
 8007242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2202      	movs	r2, #2
 800724a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2202      	movs	r2, #2
 8007252:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2202      	movs	r2, #2
 800725a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <HAL_TIM_Encoder_Start+0xc4>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b04      	cmp	r3, #4
 8007268:	d008      	beq.n	800727c <HAL_TIM_Encoder_Start+0xd4>
 800726a:	e00f      	b.n	800728c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2201      	movs	r2, #1
 8007272:	2100      	movs	r1, #0
 8007274:	4618      	mov	r0, r3
 8007276:	f001 f841 	bl	80082fc <TIM_CCxChannelCmd>
      break;
 800727a:	e016      	b.n	80072aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2201      	movs	r2, #1
 8007282:	2104      	movs	r1, #4
 8007284:	4618      	mov	r0, r3
 8007286:	f001 f839 	bl	80082fc <TIM_CCxChannelCmd>
      break;
 800728a:	e00e      	b.n	80072aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2201      	movs	r2, #1
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f001 f831 	bl	80082fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2201      	movs	r2, #1
 80072a0:	2104      	movs	r1, #4
 80072a2:	4618      	mov	r0, r3
 80072a4:	f001 f82a 	bl	80082fc <TIM_CCxChannelCmd>
      break;
 80072a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f042 0201 	orr.w	r2, r2, #1
 80072b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d020      	beq.n	8007328 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01b      	beq.n	8007328 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f06f 0202 	mvn.w	r2, #2
 80072f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fb5c 	bl	80079cc <HAL_TIM_IC_CaptureCallback>
 8007314:	e005      	b.n	8007322 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fb4e 	bl	80079b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fb5f 	bl	80079e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f003 0304 	and.w	r3, r3, #4
 800732e:	2b00      	cmp	r3, #0
 8007330:	d020      	beq.n	8007374 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01b      	beq.n	8007374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0204 	mvn.w	r2, #4
 8007344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2202      	movs	r2, #2
 800734a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fb36 	bl	80079cc <HAL_TIM_IC_CaptureCallback>
 8007360:	e005      	b.n	800736e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fb28 	bl	80079b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fb39 	bl	80079e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d020      	beq.n	80073c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f003 0308 	and.w	r3, r3, #8
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01b      	beq.n	80073c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f06f 0208 	mvn.w	r2, #8
 8007390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2204      	movs	r2, #4
 8007396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fb10 	bl	80079cc <HAL_TIM_IC_CaptureCallback>
 80073ac:	e005      	b.n	80073ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fb02 	bl	80079b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fb13 	bl	80079e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 0310 	and.w	r3, r3, #16
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d020      	beq.n	800740c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01b      	beq.n	800740c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f06f 0210 	mvn.w	r2, #16
 80073dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2208      	movs	r2, #8
 80073e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 faea 	bl	80079cc <HAL_TIM_IC_CaptureCallback>
 80073f8:	e005      	b.n	8007406 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fadc 	bl	80079b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 faed 	bl	80079e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00c      	beq.n	8007430 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d007      	beq.n	8007430 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f06f 0201 	mvn.w	r2, #1
 8007428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7fa fefe 	bl	800222c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007436:	2b00      	cmp	r3, #0
 8007438:	d104      	bne.n	8007444 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00c      	beq.n	800745e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f001 f8a9 	bl	80085b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00c      	beq.n	8007482 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800747a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 f8a1 	bl	80085c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00c      	beq.n	80074a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800749e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 faa7 	bl	80079f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00c      	beq.n	80074ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f003 0320 	and.w	r3, r3, #32
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d007      	beq.n	80074ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f06f 0220 	mvn.w	r2, #32
 80074c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 f869 	bl	800859c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00c      	beq.n	80074ee <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80074e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 f875 	bl	80085d8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00c      	beq.n	8007512 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800750a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 f86d 	bl	80085ec <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00c      	beq.n	8007536 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d007      	beq.n	8007536 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800752e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 f865 	bl	8008600 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00c      	beq.n	800755a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 f85d 	bl	8008614 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800755a:	bf00      	nop
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800757e:	2302      	movs	r3, #2
 8007580:	e0ff      	b.n	8007782 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b14      	cmp	r3, #20
 800758e:	f200 80f0 	bhi.w	8007772 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007592:	a201      	add	r2, pc, #4	@ (adr r2, 8007598 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	080075ed 	.word	0x080075ed
 800759c:	08007773 	.word	0x08007773
 80075a0:	08007773 	.word	0x08007773
 80075a4:	08007773 	.word	0x08007773
 80075a8:	0800762d 	.word	0x0800762d
 80075ac:	08007773 	.word	0x08007773
 80075b0:	08007773 	.word	0x08007773
 80075b4:	08007773 	.word	0x08007773
 80075b8:	0800766f 	.word	0x0800766f
 80075bc:	08007773 	.word	0x08007773
 80075c0:	08007773 	.word	0x08007773
 80075c4:	08007773 	.word	0x08007773
 80075c8:	080076af 	.word	0x080076af
 80075cc:	08007773 	.word	0x08007773
 80075d0:	08007773 	.word	0x08007773
 80075d4:	08007773 	.word	0x08007773
 80075d8:	080076f1 	.word	0x080076f1
 80075dc:	08007773 	.word	0x08007773
 80075e0:	08007773 	.word	0x08007773
 80075e4:	08007773 	.word	0x08007773
 80075e8:	08007731 	.word	0x08007731
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68b9      	ldr	r1, [r7, #8]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fabc 	bl	8007b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	699a      	ldr	r2, [r3, #24]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0208 	orr.w	r2, r2, #8
 8007606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0204 	bic.w	r2, r2, #4
 8007616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6999      	ldr	r1, [r3, #24]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	619a      	str	r2, [r3, #24]
      break;
 800762a:	e0a5      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68b9      	ldr	r1, [r7, #8]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fb36 	bl	8007ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699a      	ldr	r2, [r3, #24]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6999      	ldr	r1, [r3, #24]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	021a      	lsls	r2, r3, #8
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	619a      	str	r2, [r3, #24]
      break;
 800766c:	e084      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	4618      	mov	r0, r3
 8007676:	f000 fba9 	bl	8007dcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69da      	ldr	r2, [r3, #28]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f042 0208 	orr.w	r2, r2, #8
 8007688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69da      	ldr	r2, [r3, #28]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0204 	bic.w	r2, r2, #4
 8007698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69d9      	ldr	r1, [r3, #28]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	61da      	str	r2, [r3, #28]
      break;
 80076ac:	e064      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 fc1b 	bl	8007ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69da      	ldr	r2, [r3, #28]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69d9      	ldr	r1, [r3, #28]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	021a      	lsls	r2, r3, #8
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	61da      	str	r2, [r3, #28]
      break;
 80076ee:	e043      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fc8e 	bl	8008018 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0208 	orr.w	r2, r2, #8
 800770a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0204 	bic.w	r2, r2, #4
 800771a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	691a      	ldr	r2, [r3, #16]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800772e:	e023      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fcd8 	bl	80080ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800774a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800775a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	021a      	lsls	r2, r3, #8
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007770:	e002      	b.n	8007778 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	75fb      	strb	r3, [r7, #23]
      break;
 8007776:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007780:	7dfb      	ldrb	r3, [r7, #23]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop

0800778c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_TIM_ConfigClockSource+0x1c>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e0f6      	b.n	8007996 <HAL_TIM_ConfigClockSource+0x20a>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80077c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a6f      	ldr	r2, [pc, #444]	@ (80079a0 <HAL_TIM_ConfigClockSource+0x214>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	f000 80c1 	beq.w	800796a <HAL_TIM_ConfigClockSource+0x1de>
 80077e8:	4a6d      	ldr	r2, [pc, #436]	@ (80079a0 <HAL_TIM_ConfigClockSource+0x214>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	f200 80c6 	bhi.w	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 80077f0:	4a6c      	ldr	r2, [pc, #432]	@ (80079a4 <HAL_TIM_ConfigClockSource+0x218>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	f000 80b9 	beq.w	800796a <HAL_TIM_ConfigClockSource+0x1de>
 80077f8:	4a6a      	ldr	r2, [pc, #424]	@ (80079a4 <HAL_TIM_ConfigClockSource+0x218>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	f200 80be 	bhi.w	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 8007800:	4a69      	ldr	r2, [pc, #420]	@ (80079a8 <HAL_TIM_ConfigClockSource+0x21c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	f000 80b1 	beq.w	800796a <HAL_TIM_ConfigClockSource+0x1de>
 8007808:	4a67      	ldr	r2, [pc, #412]	@ (80079a8 <HAL_TIM_ConfigClockSource+0x21c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	f200 80b6 	bhi.w	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 8007810:	4a66      	ldr	r2, [pc, #408]	@ (80079ac <HAL_TIM_ConfigClockSource+0x220>)
 8007812:	4293      	cmp	r3, r2
 8007814:	f000 80a9 	beq.w	800796a <HAL_TIM_ConfigClockSource+0x1de>
 8007818:	4a64      	ldr	r2, [pc, #400]	@ (80079ac <HAL_TIM_ConfigClockSource+0x220>)
 800781a:	4293      	cmp	r3, r2
 800781c:	f200 80ae 	bhi.w	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 8007820:	4a63      	ldr	r2, [pc, #396]	@ (80079b0 <HAL_TIM_ConfigClockSource+0x224>)
 8007822:	4293      	cmp	r3, r2
 8007824:	f000 80a1 	beq.w	800796a <HAL_TIM_ConfigClockSource+0x1de>
 8007828:	4a61      	ldr	r2, [pc, #388]	@ (80079b0 <HAL_TIM_ConfigClockSource+0x224>)
 800782a:	4293      	cmp	r3, r2
 800782c:	f200 80a6 	bhi.w	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 8007830:	4a60      	ldr	r2, [pc, #384]	@ (80079b4 <HAL_TIM_ConfigClockSource+0x228>)
 8007832:	4293      	cmp	r3, r2
 8007834:	f000 8099 	beq.w	800796a <HAL_TIM_ConfigClockSource+0x1de>
 8007838:	4a5e      	ldr	r2, [pc, #376]	@ (80079b4 <HAL_TIM_ConfigClockSource+0x228>)
 800783a:	4293      	cmp	r3, r2
 800783c:	f200 809e 	bhi.w	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 8007840:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007844:	f000 8091 	beq.w	800796a <HAL_TIM_ConfigClockSource+0x1de>
 8007848:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800784c:	f200 8096 	bhi.w	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 8007850:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007854:	f000 8089 	beq.w	800796a <HAL_TIM_ConfigClockSource+0x1de>
 8007858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800785c:	f200 808e 	bhi.w	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 8007860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007864:	d03e      	beq.n	80078e4 <HAL_TIM_ConfigClockSource+0x158>
 8007866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800786a:	f200 8087 	bhi.w	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 800786e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007872:	f000 8086 	beq.w	8007982 <HAL_TIM_ConfigClockSource+0x1f6>
 8007876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800787a:	d87f      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 800787c:	2b70      	cmp	r3, #112	@ 0x70
 800787e:	d01a      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x12a>
 8007880:	2b70      	cmp	r3, #112	@ 0x70
 8007882:	d87b      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 8007884:	2b60      	cmp	r3, #96	@ 0x60
 8007886:	d050      	beq.n	800792a <HAL_TIM_ConfigClockSource+0x19e>
 8007888:	2b60      	cmp	r3, #96	@ 0x60
 800788a:	d877      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 800788c:	2b50      	cmp	r3, #80	@ 0x50
 800788e:	d03c      	beq.n	800790a <HAL_TIM_ConfigClockSource+0x17e>
 8007890:	2b50      	cmp	r3, #80	@ 0x50
 8007892:	d873      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 8007894:	2b40      	cmp	r3, #64	@ 0x40
 8007896:	d058      	beq.n	800794a <HAL_TIM_ConfigClockSource+0x1be>
 8007898:	2b40      	cmp	r3, #64	@ 0x40
 800789a:	d86f      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 800789c:	2b30      	cmp	r3, #48	@ 0x30
 800789e:	d064      	beq.n	800796a <HAL_TIM_ConfigClockSource+0x1de>
 80078a0:	2b30      	cmp	r3, #48	@ 0x30
 80078a2:	d86b      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 80078a4:	2b20      	cmp	r3, #32
 80078a6:	d060      	beq.n	800796a <HAL_TIM_ConfigClockSource+0x1de>
 80078a8:	2b20      	cmp	r3, #32
 80078aa:	d867      	bhi.n	800797c <HAL_TIM_ConfigClockSource+0x1f0>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d05c      	beq.n	800796a <HAL_TIM_ConfigClockSource+0x1de>
 80078b0:	2b10      	cmp	r3, #16
 80078b2:	d05a      	beq.n	800796a <HAL_TIM_ConfigClockSource+0x1de>
 80078b4:	e062      	b.n	800797c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078c6:	f000 fcf9 	bl	80082bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	609a      	str	r2, [r3, #8]
      break;
 80078e2:	e04f      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078f4:	f000 fce2 	bl	80082bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007906:	609a      	str	r2, [r3, #8]
      break;
 8007908:	e03c      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007916:	461a      	mov	r2, r3
 8007918:	f000 fc54 	bl	80081c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2150      	movs	r1, #80	@ 0x50
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fcad 	bl	8008282 <TIM_ITRx_SetConfig>
      break;
 8007928:	e02c      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007936:	461a      	mov	r2, r3
 8007938:	f000 fc73 	bl	8008222 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2160      	movs	r1, #96	@ 0x60
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fc9d 	bl	8008282 <TIM_ITRx_SetConfig>
      break;
 8007948:	e01c      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007956:	461a      	mov	r2, r3
 8007958:	f000 fc34 	bl	80081c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2140      	movs	r1, #64	@ 0x40
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fc8d 	bl	8008282 <TIM_ITRx_SetConfig>
      break;
 8007968:	e00c      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4619      	mov	r1, r3
 8007974:	4610      	mov	r0, r2
 8007976:	f000 fc84 	bl	8008282 <TIM_ITRx_SetConfig>
      break;
 800797a:	e003      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
      break;
 8007980:	e000      	b.n	8007984 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	00100070 	.word	0x00100070
 80079a4:	00100060 	.word	0x00100060
 80079a8:	00100050 	.word	0x00100050
 80079ac:	00100040 	.word	0x00100040
 80079b0:	00100030 	.word	0x00100030
 80079b4:	00100020 	.word	0x00100020

080079b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a4c      	ldr	r2, [pc, #304]	@ (8007b4c <TIM_Base_SetConfig+0x144>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d017      	beq.n	8007a50 <TIM_Base_SetConfig+0x48>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a26:	d013      	beq.n	8007a50 <TIM_Base_SetConfig+0x48>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a49      	ldr	r2, [pc, #292]	@ (8007b50 <TIM_Base_SetConfig+0x148>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00f      	beq.n	8007a50 <TIM_Base_SetConfig+0x48>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a48      	ldr	r2, [pc, #288]	@ (8007b54 <TIM_Base_SetConfig+0x14c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00b      	beq.n	8007a50 <TIM_Base_SetConfig+0x48>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a47      	ldr	r2, [pc, #284]	@ (8007b58 <TIM_Base_SetConfig+0x150>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d007      	beq.n	8007a50 <TIM_Base_SetConfig+0x48>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a46      	ldr	r2, [pc, #280]	@ (8007b5c <TIM_Base_SetConfig+0x154>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d003      	beq.n	8007a50 <TIM_Base_SetConfig+0x48>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a45      	ldr	r2, [pc, #276]	@ (8007b60 <TIM_Base_SetConfig+0x158>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d108      	bne.n	8007a62 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a39      	ldr	r2, [pc, #228]	@ (8007b4c <TIM_Base_SetConfig+0x144>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d023      	beq.n	8007ab2 <TIM_Base_SetConfig+0xaa>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a70:	d01f      	beq.n	8007ab2 <TIM_Base_SetConfig+0xaa>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a36      	ldr	r2, [pc, #216]	@ (8007b50 <TIM_Base_SetConfig+0x148>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d01b      	beq.n	8007ab2 <TIM_Base_SetConfig+0xaa>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a35      	ldr	r2, [pc, #212]	@ (8007b54 <TIM_Base_SetConfig+0x14c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d017      	beq.n	8007ab2 <TIM_Base_SetConfig+0xaa>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a34      	ldr	r2, [pc, #208]	@ (8007b58 <TIM_Base_SetConfig+0x150>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d013      	beq.n	8007ab2 <TIM_Base_SetConfig+0xaa>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a33      	ldr	r2, [pc, #204]	@ (8007b5c <TIM_Base_SetConfig+0x154>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00f      	beq.n	8007ab2 <TIM_Base_SetConfig+0xaa>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a33      	ldr	r2, [pc, #204]	@ (8007b64 <TIM_Base_SetConfig+0x15c>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d00b      	beq.n	8007ab2 <TIM_Base_SetConfig+0xaa>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a32      	ldr	r2, [pc, #200]	@ (8007b68 <TIM_Base_SetConfig+0x160>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d007      	beq.n	8007ab2 <TIM_Base_SetConfig+0xaa>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a31      	ldr	r2, [pc, #196]	@ (8007b6c <TIM_Base_SetConfig+0x164>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d003      	beq.n	8007ab2 <TIM_Base_SetConfig+0xaa>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a2c      	ldr	r2, [pc, #176]	@ (8007b60 <TIM_Base_SetConfig+0x158>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d108      	bne.n	8007ac4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a18      	ldr	r2, [pc, #96]	@ (8007b4c <TIM_Base_SetConfig+0x144>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d013      	beq.n	8007b18 <TIM_Base_SetConfig+0x110>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b5c <TIM_Base_SetConfig+0x154>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00f      	beq.n	8007b18 <TIM_Base_SetConfig+0x110>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a1a      	ldr	r2, [pc, #104]	@ (8007b64 <TIM_Base_SetConfig+0x15c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00b      	beq.n	8007b18 <TIM_Base_SetConfig+0x110>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a19      	ldr	r2, [pc, #100]	@ (8007b68 <TIM_Base_SetConfig+0x160>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d007      	beq.n	8007b18 <TIM_Base_SetConfig+0x110>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a18      	ldr	r2, [pc, #96]	@ (8007b6c <TIM_Base_SetConfig+0x164>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d003      	beq.n	8007b18 <TIM_Base_SetConfig+0x110>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a13      	ldr	r2, [pc, #76]	@ (8007b60 <TIM_Base_SetConfig+0x158>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d103      	bne.n	8007b20 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d105      	bne.n	8007b3e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f023 0201 	bic.w	r2, r3, #1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	611a      	str	r2, [r3, #16]
  }
}
 8007b3e:	bf00      	nop
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	40000400 	.word	0x40000400
 8007b54:	40000800 	.word	0x40000800
 8007b58:	40000c00 	.word	0x40000c00
 8007b5c:	40013400 	.word	0x40013400
 8007b60:	40015000 	.word	0x40015000
 8007b64:	40014000 	.word	0x40014000
 8007b68:	40014400 	.word	0x40014400
 8007b6c:	40014800 	.word	0x40014800

08007b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	f023 0201 	bic.w	r2, r3, #1
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0303 	bic.w	r3, r3, #3
 8007baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f023 0302 	bic.w	r3, r3, #2
 8007bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a30      	ldr	r2, [pc, #192]	@ (8007c8c <TIM_OC1_SetConfig+0x11c>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d013      	beq.n	8007bf8 <TIM_OC1_SetConfig+0x88>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8007c90 <TIM_OC1_SetConfig+0x120>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d00f      	beq.n	8007bf8 <TIM_OC1_SetConfig+0x88>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a2e      	ldr	r2, [pc, #184]	@ (8007c94 <TIM_OC1_SetConfig+0x124>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00b      	beq.n	8007bf8 <TIM_OC1_SetConfig+0x88>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a2d      	ldr	r2, [pc, #180]	@ (8007c98 <TIM_OC1_SetConfig+0x128>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d007      	beq.n	8007bf8 <TIM_OC1_SetConfig+0x88>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a2c      	ldr	r2, [pc, #176]	@ (8007c9c <TIM_OC1_SetConfig+0x12c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d003      	beq.n	8007bf8 <TIM_OC1_SetConfig+0x88>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8007ca0 <TIM_OC1_SetConfig+0x130>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d10c      	bne.n	8007c12 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 0308 	bic.w	r3, r3, #8
 8007bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f023 0304 	bic.w	r3, r3, #4
 8007c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a1d      	ldr	r2, [pc, #116]	@ (8007c8c <TIM_OC1_SetConfig+0x11c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d013      	beq.n	8007c42 <TIM_OC1_SetConfig+0xd2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8007c90 <TIM_OC1_SetConfig+0x120>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00f      	beq.n	8007c42 <TIM_OC1_SetConfig+0xd2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a1b      	ldr	r2, [pc, #108]	@ (8007c94 <TIM_OC1_SetConfig+0x124>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00b      	beq.n	8007c42 <TIM_OC1_SetConfig+0xd2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8007c98 <TIM_OC1_SetConfig+0x128>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d007      	beq.n	8007c42 <TIM_OC1_SetConfig+0xd2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a19      	ldr	r2, [pc, #100]	@ (8007c9c <TIM_OC1_SetConfig+0x12c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d003      	beq.n	8007c42 <TIM_OC1_SetConfig+0xd2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a18      	ldr	r2, [pc, #96]	@ (8007ca0 <TIM_OC1_SetConfig+0x130>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d111      	bne.n	8007c66 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	621a      	str	r2, [r3, #32]
}
 8007c80:	bf00      	nop
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	40012c00 	.word	0x40012c00
 8007c90:	40013400 	.word	0x40013400
 8007c94:	40014000 	.word	0x40014000
 8007c98:	40014400 	.word	0x40014400
 8007c9c:	40014800 	.word	0x40014800
 8007ca0:	40015000 	.word	0x40015000

08007ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	f023 0210 	bic.w	r2, r3, #16
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f023 0320 	bic.w	r3, r3, #32
 8007cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	011b      	lsls	r3, r3, #4
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a2c      	ldr	r2, [pc, #176]	@ (8007db4 <TIM_OC2_SetConfig+0x110>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d007      	beq.n	8007d18 <TIM_OC2_SetConfig+0x74>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8007db8 <TIM_OC2_SetConfig+0x114>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d003      	beq.n	8007d18 <TIM_OC2_SetConfig+0x74>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a2a      	ldr	r2, [pc, #168]	@ (8007dbc <TIM_OC2_SetConfig+0x118>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d10d      	bne.n	8007d34 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	011b      	lsls	r3, r3, #4
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a1f      	ldr	r2, [pc, #124]	@ (8007db4 <TIM_OC2_SetConfig+0x110>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d013      	beq.n	8007d64 <TIM_OC2_SetConfig+0xc0>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8007db8 <TIM_OC2_SetConfig+0x114>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00f      	beq.n	8007d64 <TIM_OC2_SetConfig+0xc0>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a1e      	ldr	r2, [pc, #120]	@ (8007dc0 <TIM_OC2_SetConfig+0x11c>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00b      	beq.n	8007d64 <TIM_OC2_SetConfig+0xc0>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8007dc4 <TIM_OC2_SetConfig+0x120>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d007      	beq.n	8007d64 <TIM_OC2_SetConfig+0xc0>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a1c      	ldr	r2, [pc, #112]	@ (8007dc8 <TIM_OC2_SetConfig+0x124>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d003      	beq.n	8007d64 <TIM_OC2_SetConfig+0xc0>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a17      	ldr	r2, [pc, #92]	@ (8007dbc <TIM_OC2_SetConfig+0x118>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d113      	bne.n	8007d8c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	621a      	str	r2, [r3, #32]
}
 8007da6:	bf00      	nop
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	40012c00 	.word	0x40012c00
 8007db8:	40013400 	.word	0x40013400
 8007dbc:	40015000 	.word	0x40015000
 8007dc0:	40014000 	.word	0x40014000
 8007dc4:	40014400 	.word	0x40014400
 8007dc8:	40014800 	.word	0x40014800

08007dcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0303 	bic.w	r3, r3, #3
 8007e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a2b      	ldr	r2, [pc, #172]	@ (8007ed8 <TIM_OC3_SetConfig+0x10c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d007      	beq.n	8007e3e <TIM_OC3_SetConfig+0x72>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a2a      	ldr	r2, [pc, #168]	@ (8007edc <TIM_OC3_SetConfig+0x110>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d003      	beq.n	8007e3e <TIM_OC3_SetConfig+0x72>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a29      	ldr	r2, [pc, #164]	@ (8007ee0 <TIM_OC3_SetConfig+0x114>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d10d      	bne.n	8007e5a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ed8 <TIM_OC3_SetConfig+0x10c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d013      	beq.n	8007e8a <TIM_OC3_SetConfig+0xbe>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a1d      	ldr	r2, [pc, #116]	@ (8007edc <TIM_OC3_SetConfig+0x110>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00f      	beq.n	8007e8a <TIM_OC3_SetConfig+0xbe>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee4 <TIM_OC3_SetConfig+0x118>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00b      	beq.n	8007e8a <TIM_OC3_SetConfig+0xbe>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a1c      	ldr	r2, [pc, #112]	@ (8007ee8 <TIM_OC3_SetConfig+0x11c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d007      	beq.n	8007e8a <TIM_OC3_SetConfig+0xbe>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8007eec <TIM_OC3_SetConfig+0x120>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_OC3_SetConfig+0xbe>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a16      	ldr	r2, [pc, #88]	@ (8007ee0 <TIM_OC3_SetConfig+0x114>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d113      	bne.n	8007eb2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	621a      	str	r2, [r3, #32]
}
 8007ecc:	bf00      	nop
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	40012c00 	.word	0x40012c00
 8007edc:	40013400 	.word	0x40013400
 8007ee0:	40015000 	.word	0x40015000
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40014400 	.word	0x40014400
 8007eec:	40014800 	.word	0x40014800

08007ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	031b      	lsls	r3, r3, #12
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8008000 <TIM_OC4_SetConfig+0x110>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d007      	beq.n	8007f64 <TIM_OC4_SetConfig+0x74>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a2b      	ldr	r2, [pc, #172]	@ (8008004 <TIM_OC4_SetConfig+0x114>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d003      	beq.n	8007f64 <TIM_OC4_SetConfig+0x74>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008008 <TIM_OC4_SetConfig+0x118>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d10d      	bne.n	8007f80 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	031b      	lsls	r3, r3, #12
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a1f      	ldr	r2, [pc, #124]	@ (8008000 <TIM_OC4_SetConfig+0x110>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <TIM_OC4_SetConfig+0xc0>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008004 <TIM_OC4_SetConfig+0x114>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00f      	beq.n	8007fb0 <TIM_OC4_SetConfig+0xc0>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a1e      	ldr	r2, [pc, #120]	@ (800800c <TIM_OC4_SetConfig+0x11c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00b      	beq.n	8007fb0 <TIM_OC4_SetConfig+0xc0>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8008010 <TIM_OC4_SetConfig+0x120>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d007      	beq.n	8007fb0 <TIM_OC4_SetConfig+0xc0>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8008014 <TIM_OC4_SetConfig+0x124>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d003      	beq.n	8007fb0 <TIM_OC4_SetConfig+0xc0>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a17      	ldr	r2, [pc, #92]	@ (8008008 <TIM_OC4_SetConfig+0x118>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d113      	bne.n	8007fd8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fb6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fbe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	019b      	lsls	r3, r3, #6
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	019b      	lsls	r3, r3, #6
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	621a      	str	r2, [r3, #32]
}
 8007ff2:	bf00      	nop
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	40012c00 	.word	0x40012c00
 8008004:	40013400 	.word	0x40013400
 8008008:	40015000 	.word	0x40015000
 800800c:	40014000 	.word	0x40014000
 8008010:	40014400 	.word	0x40014400
 8008014:	40014800 	.word	0x40014800

08008018 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800803e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800804a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800805c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	041b      	lsls	r3, r3, #16
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	4313      	orrs	r3, r2
 8008068:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a19      	ldr	r2, [pc, #100]	@ (80080d4 <TIM_OC5_SetConfig+0xbc>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d013      	beq.n	800809a <TIM_OC5_SetConfig+0x82>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a18      	ldr	r2, [pc, #96]	@ (80080d8 <TIM_OC5_SetConfig+0xc0>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d00f      	beq.n	800809a <TIM_OC5_SetConfig+0x82>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a17      	ldr	r2, [pc, #92]	@ (80080dc <TIM_OC5_SetConfig+0xc4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d00b      	beq.n	800809a <TIM_OC5_SetConfig+0x82>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a16      	ldr	r2, [pc, #88]	@ (80080e0 <TIM_OC5_SetConfig+0xc8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d007      	beq.n	800809a <TIM_OC5_SetConfig+0x82>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a15      	ldr	r2, [pc, #84]	@ (80080e4 <TIM_OC5_SetConfig+0xcc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d003      	beq.n	800809a <TIM_OC5_SetConfig+0x82>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a14      	ldr	r2, [pc, #80]	@ (80080e8 <TIM_OC5_SetConfig+0xd0>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d109      	bne.n	80080ae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	021b      	lsls	r3, r3, #8
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	621a      	str	r2, [r3, #32]
}
 80080c8:	bf00      	nop
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	40012c00 	.word	0x40012c00
 80080d8:	40013400 	.word	0x40013400
 80080dc:	40014000 	.word	0x40014000
 80080e0:	40014400 	.word	0x40014400
 80080e4:	40014800 	.word	0x40014800
 80080e8:	40015000 	.word	0x40015000

080080ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800811a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800811e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	021b      	lsls	r3, r3, #8
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4313      	orrs	r3, r2
 800812a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	051b      	lsls	r3, r3, #20
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a1a      	ldr	r2, [pc, #104]	@ (80081ac <TIM_OC6_SetConfig+0xc0>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d013      	beq.n	8008170 <TIM_OC6_SetConfig+0x84>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a19      	ldr	r2, [pc, #100]	@ (80081b0 <TIM_OC6_SetConfig+0xc4>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00f      	beq.n	8008170 <TIM_OC6_SetConfig+0x84>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a18      	ldr	r2, [pc, #96]	@ (80081b4 <TIM_OC6_SetConfig+0xc8>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d00b      	beq.n	8008170 <TIM_OC6_SetConfig+0x84>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a17      	ldr	r2, [pc, #92]	@ (80081b8 <TIM_OC6_SetConfig+0xcc>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d007      	beq.n	8008170 <TIM_OC6_SetConfig+0x84>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a16      	ldr	r2, [pc, #88]	@ (80081bc <TIM_OC6_SetConfig+0xd0>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d003      	beq.n	8008170 <TIM_OC6_SetConfig+0x84>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a15      	ldr	r2, [pc, #84]	@ (80081c0 <TIM_OC6_SetConfig+0xd4>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d109      	bne.n	8008184 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008176:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	029b      	lsls	r3, r3, #10
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	4313      	orrs	r3, r2
 8008182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	621a      	str	r2, [r3, #32]
}
 800819e:	bf00      	nop
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40013400 	.word	0x40013400
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40014400 	.word	0x40014400
 80081bc:	40014800 	.word	0x40014800
 80081c0:	40015000 	.word	0x40015000

080081c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b087      	sub	sp, #28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	f023 0201 	bic.w	r2, r3, #1
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f023 030a 	bic.w	r3, r3, #10
 8008200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4313      	orrs	r3, r2
 8008208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	621a      	str	r2, [r3, #32]
}
 8008216:	bf00      	nop
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008222:	b480      	push	{r7}
 8008224:	b087      	sub	sp, #28
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	f023 0210 	bic.w	r2, r3, #16
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800824c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	031b      	lsls	r3, r3, #12
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	4313      	orrs	r3, r2
 8008256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800825e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	011b      	lsls	r3, r3, #4
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	4313      	orrs	r3, r2
 8008268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	621a      	str	r2, [r3, #32]
}
 8008276:	bf00      	nop
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008282:	b480      	push	{r7}
 8008284:	b085      	sub	sp, #20
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800829c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f043 0307 	orr.w	r3, r3, #7
 80082a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	609a      	str	r2, [r3, #8]
}
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	021a      	lsls	r2, r3, #8
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	431a      	orrs	r2, r3
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	609a      	str	r2, [r3, #8]
}
 80082f0:	bf00      	nop
 80082f2:	371c      	adds	r7, #28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f003 031f 	and.w	r3, r3, #31
 800830e:	2201      	movs	r2, #1
 8008310:	fa02 f303 	lsl.w	r3, r2, r3
 8008314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a1a      	ldr	r2, [r3, #32]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	43db      	mvns	r3, r3
 800831e:	401a      	ands	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6a1a      	ldr	r2, [r3, #32]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f003 031f 	and.w	r3, r3, #31
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	fa01 f303 	lsl.w	r3, r1, r3
 8008334:	431a      	orrs	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	621a      	str	r2, [r3, #32]
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008358:	2b01      	cmp	r3, #1
 800835a:	d101      	bne.n	8008360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800835c:	2302      	movs	r3, #2
 800835e:	e074      	b.n	800844a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a34      	ldr	r2, [pc, #208]	@ (8008458 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d009      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a33      	ldr	r2, [pc, #204]	@ (800845c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d004      	beq.n	800839e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a31      	ldr	r2, [pc, #196]	@ (8008460 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d108      	bne.n	80083b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80083a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80083b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a21      	ldr	r2, [pc, #132]	@ (8008458 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d022      	beq.n	800841e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083e0:	d01d      	beq.n	800841e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a1f      	ldr	r2, [pc, #124]	@ (8008464 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d018      	beq.n	800841e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a1d      	ldr	r2, [pc, #116]	@ (8008468 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d013      	beq.n	800841e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a1c      	ldr	r2, [pc, #112]	@ (800846c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d00e      	beq.n	800841e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a15      	ldr	r2, [pc, #84]	@ (800845c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d009      	beq.n	800841e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a18      	ldr	r2, [pc, #96]	@ (8008470 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d004      	beq.n	800841e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a11      	ldr	r2, [pc, #68]	@ (8008460 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d10c      	bne.n	8008438 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	4313      	orrs	r3, r2
 800842e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	40012c00 	.word	0x40012c00
 800845c:	40013400 	.word	0x40013400
 8008460:	40015000 	.word	0x40015000
 8008464:	40000400 	.word	0x40000400
 8008468:	40000800 	.word	0x40000800
 800846c:	40000c00 	.word	0x40000c00
 8008470:	40014000 	.word	0x40014000

08008474 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008488:	2b01      	cmp	r3, #1
 800848a:	d101      	bne.n	8008490 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800848c:	2302      	movs	r3, #2
 800848e:	e078      	b.n	8008582 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	4313      	orrs	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f6:	4313      	orrs	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	041b      	lsls	r3, r3, #16
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a1c      	ldr	r2, [pc, #112]	@ (8008590 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d009      	beq.n	8008536 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a1b      	ldr	r2, [pc, #108]	@ (8008594 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d004      	beq.n	8008536 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a19      	ldr	r2, [pc, #100]	@ (8008598 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d11c      	bne.n	8008570 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008540:	051b      	lsls	r3, r3, #20
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	4313      	orrs	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855e:	4313      	orrs	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856c:	4313      	orrs	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	40012c00 	.word	0x40012c00
 8008594:	40013400 	.word	0x40013400
 8008598:	40015000 	.word	0x40015000

0800859c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e042      	b.n	80086c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7f9 ff7d 	bl	800254c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2224      	movs	r2, #36	@ 0x24
 8008656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0201 	bic.w	r2, r2, #1
 8008668:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fbb2 	bl	8008ddc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f8b3 	bl	80087e4 <UART_SetConfig>
 800867e:	4603      	mov	r3, r0
 8008680:	2b01      	cmp	r3, #1
 8008682:	d101      	bne.n	8008688 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e01b      	b.n	80086c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008696:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689a      	ldr	r2, [r3, #8]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f042 0201 	orr.w	r2, r2, #1
 80086b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fc31 	bl	8008f20 <UART_CheckIdleState>
 80086be:	4603      	mov	r3, r0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08a      	sub	sp, #40	@ 0x28
 80086cc:	af02      	add	r7, sp, #8
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	603b      	str	r3, [r7, #0]
 80086d4:	4613      	mov	r3, r2
 80086d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086de:	2b20      	cmp	r3, #32
 80086e0:	d17b      	bne.n	80087da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <HAL_UART_Transmit+0x26>
 80086e8:	88fb      	ldrh	r3, [r7, #6]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e074      	b.n	80087dc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2221      	movs	r2, #33	@ 0x21
 80086fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008702:	f7fa f9fb 	bl	8002afc <HAL_GetTick>
 8008706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	88fa      	ldrh	r2, [r7, #6]
 800870c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	88fa      	ldrh	r2, [r7, #6]
 8008714:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008720:	d108      	bne.n	8008734 <HAL_UART_Transmit+0x6c>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d104      	bne.n	8008734 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800872a:	2300      	movs	r3, #0
 800872c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	61bb      	str	r3, [r7, #24]
 8008732:	e003      	b.n	800873c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008738:	2300      	movs	r3, #0
 800873a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800873c:	e030      	b.n	80087a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2200      	movs	r2, #0
 8008746:	2180      	movs	r1, #128	@ 0x80
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 fc93 	bl	8009074 <UART_WaitOnFlagUntilTimeout>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d005      	beq.n	8008760 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2220      	movs	r2, #32
 8008758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e03d      	b.n	80087dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10b      	bne.n	800877e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008774:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	3302      	adds	r3, #2
 800877a:	61bb      	str	r3, [r7, #24]
 800877c:	e007      	b.n	800878e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	781a      	ldrb	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	3301      	adds	r3, #1
 800878c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008794:	b29b      	uxth	r3, r3
 8008796:	3b01      	subs	r3, #1
 8008798:	b29a      	uxth	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1c8      	bne.n	800873e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2200      	movs	r2, #0
 80087b4:	2140      	movs	r1, #64	@ 0x40
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 fc5c 	bl	8009074 <UART_WaitOnFlagUntilTimeout>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d005      	beq.n	80087ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e006      	b.n	80087dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2220      	movs	r2, #32
 80087d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	e000      	b.n	80087dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80087da:	2302      	movs	r3, #2
  }
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3720      	adds	r7, #32
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087e8:	b08c      	sub	sp, #48	@ 0x30
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	431a      	orrs	r2, r3
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	431a      	orrs	r2, r3
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	4313      	orrs	r3, r2
 800880a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4baa      	ldr	r3, [pc, #680]	@ (8008abc <UART_SetConfig+0x2d8>)
 8008814:	4013      	ands	r3, r2
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	6812      	ldr	r2, [r2, #0]
 800881a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800881c:	430b      	orrs	r3, r1
 800881e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a9f      	ldr	r2, [pc, #636]	@ (8008ac0 <UART_SetConfig+0x2dc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d004      	beq.n	8008850 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800884c:	4313      	orrs	r3, r2
 800884e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800885a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	6812      	ldr	r2, [r2, #0]
 8008862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008864:	430b      	orrs	r3, r1
 8008866:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886e:	f023 010f 	bic.w	r1, r3, #15
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a90      	ldr	r2, [pc, #576]	@ (8008ac4 <UART_SetConfig+0x2e0>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d125      	bne.n	80088d4 <UART_SetConfig+0xf0>
 8008888:	4b8f      	ldr	r3, [pc, #572]	@ (8008ac8 <UART_SetConfig+0x2e4>)
 800888a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800888e:	f003 0303 	and.w	r3, r3, #3
 8008892:	2b03      	cmp	r3, #3
 8008894:	d81a      	bhi.n	80088cc <UART_SetConfig+0xe8>
 8008896:	a201      	add	r2, pc, #4	@ (adr r2, 800889c <UART_SetConfig+0xb8>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088ad 	.word	0x080088ad
 80088a0:	080088bd 	.word	0x080088bd
 80088a4:	080088b5 	.word	0x080088b5
 80088a8:	080088c5 	.word	0x080088c5
 80088ac:	2301      	movs	r3, #1
 80088ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088b2:	e116      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 80088b4:	2302      	movs	r3, #2
 80088b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ba:	e112      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 80088bc:	2304      	movs	r3, #4
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088c2:	e10e      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 80088c4:	2308      	movs	r3, #8
 80088c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ca:	e10a      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 80088cc:	2310      	movs	r3, #16
 80088ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088d2:	e106      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a7c      	ldr	r2, [pc, #496]	@ (8008acc <UART_SetConfig+0x2e8>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d138      	bne.n	8008950 <UART_SetConfig+0x16c>
 80088de:	4b7a      	ldr	r3, [pc, #488]	@ (8008ac8 <UART_SetConfig+0x2e4>)
 80088e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e4:	f003 030c 	and.w	r3, r3, #12
 80088e8:	2b0c      	cmp	r3, #12
 80088ea:	d82d      	bhi.n	8008948 <UART_SetConfig+0x164>
 80088ec:	a201      	add	r2, pc, #4	@ (adr r2, 80088f4 <UART_SetConfig+0x110>)
 80088ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f2:	bf00      	nop
 80088f4:	08008929 	.word	0x08008929
 80088f8:	08008949 	.word	0x08008949
 80088fc:	08008949 	.word	0x08008949
 8008900:	08008949 	.word	0x08008949
 8008904:	08008939 	.word	0x08008939
 8008908:	08008949 	.word	0x08008949
 800890c:	08008949 	.word	0x08008949
 8008910:	08008949 	.word	0x08008949
 8008914:	08008931 	.word	0x08008931
 8008918:	08008949 	.word	0x08008949
 800891c:	08008949 	.word	0x08008949
 8008920:	08008949 	.word	0x08008949
 8008924:	08008941 	.word	0x08008941
 8008928:	2300      	movs	r3, #0
 800892a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800892e:	e0d8      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008930:	2302      	movs	r3, #2
 8008932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008936:	e0d4      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008938:	2304      	movs	r3, #4
 800893a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800893e:	e0d0      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008940:	2308      	movs	r3, #8
 8008942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008946:	e0cc      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008948:	2310      	movs	r3, #16
 800894a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800894e:	e0c8      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a5e      	ldr	r2, [pc, #376]	@ (8008ad0 <UART_SetConfig+0x2ec>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d125      	bne.n	80089a6 <UART_SetConfig+0x1c2>
 800895a:	4b5b      	ldr	r3, [pc, #364]	@ (8008ac8 <UART_SetConfig+0x2e4>)
 800895c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008960:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008964:	2b30      	cmp	r3, #48	@ 0x30
 8008966:	d016      	beq.n	8008996 <UART_SetConfig+0x1b2>
 8008968:	2b30      	cmp	r3, #48	@ 0x30
 800896a:	d818      	bhi.n	800899e <UART_SetConfig+0x1ba>
 800896c:	2b20      	cmp	r3, #32
 800896e:	d00a      	beq.n	8008986 <UART_SetConfig+0x1a2>
 8008970:	2b20      	cmp	r3, #32
 8008972:	d814      	bhi.n	800899e <UART_SetConfig+0x1ba>
 8008974:	2b00      	cmp	r3, #0
 8008976:	d002      	beq.n	800897e <UART_SetConfig+0x19a>
 8008978:	2b10      	cmp	r3, #16
 800897a:	d008      	beq.n	800898e <UART_SetConfig+0x1aa>
 800897c:	e00f      	b.n	800899e <UART_SetConfig+0x1ba>
 800897e:	2300      	movs	r3, #0
 8008980:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008984:	e0ad      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008986:	2302      	movs	r3, #2
 8008988:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800898c:	e0a9      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 800898e:	2304      	movs	r3, #4
 8008990:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008994:	e0a5      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008996:	2308      	movs	r3, #8
 8008998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800899c:	e0a1      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 800899e:	2310      	movs	r3, #16
 80089a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089a4:	e09d      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a4a      	ldr	r2, [pc, #296]	@ (8008ad4 <UART_SetConfig+0x2f0>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d125      	bne.n	80089fc <UART_SetConfig+0x218>
 80089b0:	4b45      	ldr	r3, [pc, #276]	@ (8008ac8 <UART_SetConfig+0x2e4>)
 80089b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80089ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80089bc:	d016      	beq.n	80089ec <UART_SetConfig+0x208>
 80089be:	2bc0      	cmp	r3, #192	@ 0xc0
 80089c0:	d818      	bhi.n	80089f4 <UART_SetConfig+0x210>
 80089c2:	2b80      	cmp	r3, #128	@ 0x80
 80089c4:	d00a      	beq.n	80089dc <UART_SetConfig+0x1f8>
 80089c6:	2b80      	cmp	r3, #128	@ 0x80
 80089c8:	d814      	bhi.n	80089f4 <UART_SetConfig+0x210>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <UART_SetConfig+0x1f0>
 80089ce:	2b40      	cmp	r3, #64	@ 0x40
 80089d0:	d008      	beq.n	80089e4 <UART_SetConfig+0x200>
 80089d2:	e00f      	b.n	80089f4 <UART_SetConfig+0x210>
 80089d4:	2300      	movs	r3, #0
 80089d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089da:	e082      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 80089dc:	2302      	movs	r3, #2
 80089de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089e2:	e07e      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 80089e4:	2304      	movs	r3, #4
 80089e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ea:	e07a      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 80089ec:	2308      	movs	r3, #8
 80089ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089f2:	e076      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 80089f4:	2310      	movs	r3, #16
 80089f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089fa:	e072      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a35      	ldr	r2, [pc, #212]	@ (8008ad8 <UART_SetConfig+0x2f4>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d12a      	bne.n	8008a5c <UART_SetConfig+0x278>
 8008a06:	4b30      	ldr	r3, [pc, #192]	@ (8008ac8 <UART_SetConfig+0x2e4>)
 8008a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a14:	d01a      	beq.n	8008a4c <UART_SetConfig+0x268>
 8008a16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a1a:	d81b      	bhi.n	8008a54 <UART_SetConfig+0x270>
 8008a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a20:	d00c      	beq.n	8008a3c <UART_SetConfig+0x258>
 8008a22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a26:	d815      	bhi.n	8008a54 <UART_SetConfig+0x270>
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <UART_SetConfig+0x250>
 8008a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a30:	d008      	beq.n	8008a44 <UART_SetConfig+0x260>
 8008a32:	e00f      	b.n	8008a54 <UART_SetConfig+0x270>
 8008a34:	2300      	movs	r3, #0
 8008a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a3a:	e052      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a42:	e04e      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008a44:	2304      	movs	r3, #4
 8008a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a4a:	e04a      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008a4c:	2308      	movs	r3, #8
 8008a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a52:	e046      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008a54:	2310      	movs	r3, #16
 8008a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a5a:	e042      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a17      	ldr	r2, [pc, #92]	@ (8008ac0 <UART_SetConfig+0x2dc>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d13a      	bne.n	8008adc <UART_SetConfig+0x2f8>
 8008a66:	4b18      	ldr	r3, [pc, #96]	@ (8008ac8 <UART_SetConfig+0x2e4>)
 8008a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008a70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a74:	d01a      	beq.n	8008aac <UART_SetConfig+0x2c8>
 8008a76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a7a:	d81b      	bhi.n	8008ab4 <UART_SetConfig+0x2d0>
 8008a7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a80:	d00c      	beq.n	8008a9c <UART_SetConfig+0x2b8>
 8008a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a86:	d815      	bhi.n	8008ab4 <UART_SetConfig+0x2d0>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <UART_SetConfig+0x2b0>
 8008a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a90:	d008      	beq.n	8008aa4 <UART_SetConfig+0x2c0>
 8008a92:	e00f      	b.n	8008ab4 <UART_SetConfig+0x2d0>
 8008a94:	2300      	movs	r3, #0
 8008a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a9a:	e022      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aa2:	e01e      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008aa4:	2304      	movs	r3, #4
 8008aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aaa:	e01a      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008aac:	2308      	movs	r3, #8
 8008aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab2:	e016      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008ab4:	2310      	movs	r3, #16
 8008ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aba:	e012      	b.n	8008ae2 <UART_SetConfig+0x2fe>
 8008abc:	cfff69f3 	.word	0xcfff69f3
 8008ac0:	40008000 	.word	0x40008000
 8008ac4:	40013800 	.word	0x40013800
 8008ac8:	40021000 	.word	0x40021000
 8008acc:	40004400 	.word	0x40004400
 8008ad0:	40004800 	.word	0x40004800
 8008ad4:	40004c00 	.word	0x40004c00
 8008ad8:	40005000 	.word	0x40005000
 8008adc:	2310      	movs	r3, #16
 8008ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4aae      	ldr	r2, [pc, #696]	@ (8008da0 <UART_SetConfig+0x5bc>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	f040 8097 	bne.w	8008c1c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008aee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008af2:	2b08      	cmp	r3, #8
 8008af4:	d823      	bhi.n	8008b3e <UART_SetConfig+0x35a>
 8008af6:	a201      	add	r2, pc, #4	@ (adr r2, 8008afc <UART_SetConfig+0x318>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b21 	.word	0x08008b21
 8008b00:	08008b3f 	.word	0x08008b3f
 8008b04:	08008b29 	.word	0x08008b29
 8008b08:	08008b3f 	.word	0x08008b3f
 8008b0c:	08008b2f 	.word	0x08008b2f
 8008b10:	08008b3f 	.word	0x08008b3f
 8008b14:	08008b3f 	.word	0x08008b3f
 8008b18:	08008b3f 	.word	0x08008b3f
 8008b1c:	08008b37 	.word	0x08008b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b20:	f7fd fc5e 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 8008b24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b26:	e010      	b.n	8008b4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b28:	4b9e      	ldr	r3, [pc, #632]	@ (8008da4 <UART_SetConfig+0x5c0>)
 8008b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b2c:	e00d      	b.n	8008b4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b2e:	f7fd fbe9 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 8008b32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b34:	e009      	b.n	8008b4a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b3c:	e005      	b.n	8008b4a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8130 	beq.w	8008db2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b56:	4a94      	ldr	r2, [pc, #592]	@ (8008da8 <UART_SetConfig+0x5c4>)
 8008b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	4413      	add	r3, r2
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d305      	bcc.n	8008b82 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d903      	bls.n	8008b8a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b88:	e113      	b.n	8008db2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	60bb      	str	r3, [r7, #8]
 8008b90:	60fa      	str	r2, [r7, #12]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b96:	4a84      	ldr	r2, [pc, #528]	@ (8008da8 <UART_SetConfig+0x5c4>)
 8008b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	603b      	str	r3, [r7, #0]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ba8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bac:	f7f7 ffce 	bl	8000b4c <__aeabi_uldivmod>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	f04f 0200 	mov.w	r2, #0
 8008bbc:	f04f 0300 	mov.w	r3, #0
 8008bc0:	020b      	lsls	r3, r1, #8
 8008bc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008bc6:	0202      	lsls	r2, r0, #8
 8008bc8:	6979      	ldr	r1, [r7, #20]
 8008bca:	6849      	ldr	r1, [r1, #4]
 8008bcc:	0849      	lsrs	r1, r1, #1
 8008bce:	2000      	movs	r0, #0
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	eb12 0804 	adds.w	r8, r2, r4
 8008bd8:	eb43 0905 	adc.w	r9, r3, r5
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	469a      	mov	sl, r3
 8008be4:	4693      	mov	fp, r2
 8008be6:	4652      	mov	r2, sl
 8008be8:	465b      	mov	r3, fp
 8008bea:	4640      	mov	r0, r8
 8008bec:	4649      	mov	r1, r9
 8008bee:	f7f7 ffad 	bl	8000b4c <__aeabi_uldivmod>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c00:	d308      	bcc.n	8008c14 <UART_SetConfig+0x430>
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c08:	d204      	bcs.n	8008c14 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6a3a      	ldr	r2, [r7, #32]
 8008c10:	60da      	str	r2, [r3, #12]
 8008c12:	e0ce      	b.n	8008db2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c1a:	e0ca      	b.n	8008db2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c24:	d166      	bne.n	8008cf4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008c26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c2a:	2b08      	cmp	r3, #8
 8008c2c:	d827      	bhi.n	8008c7e <UART_SetConfig+0x49a>
 8008c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c34 <UART_SetConfig+0x450>)
 8008c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c34:	08008c59 	.word	0x08008c59
 8008c38:	08008c61 	.word	0x08008c61
 8008c3c:	08008c69 	.word	0x08008c69
 8008c40:	08008c7f 	.word	0x08008c7f
 8008c44:	08008c6f 	.word	0x08008c6f
 8008c48:	08008c7f 	.word	0x08008c7f
 8008c4c:	08008c7f 	.word	0x08008c7f
 8008c50:	08008c7f 	.word	0x08008c7f
 8008c54:	08008c77 	.word	0x08008c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c58:	f7fd fbc2 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 8008c5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c5e:	e014      	b.n	8008c8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c60:	f7fd fbd4 	bl	800640c <HAL_RCC_GetPCLK2Freq>
 8008c64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c66:	e010      	b.n	8008c8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c68:	4b4e      	ldr	r3, [pc, #312]	@ (8008da4 <UART_SetConfig+0x5c0>)
 8008c6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c6c:	e00d      	b.n	8008c8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c6e:	f7fd fb49 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 8008c72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c74:	e009      	b.n	8008c8a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c7c:	e005      	b.n	8008c8a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 8090 	beq.w	8008db2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c96:	4a44      	ldr	r2, [pc, #272]	@ (8008da8 <UART_SetConfig+0x5c4>)
 8008c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ca4:	005a      	lsls	r2, r3, #1
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	085b      	lsrs	r3, r3, #1
 8008cac:	441a      	add	r2, r3
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	2b0f      	cmp	r3, #15
 8008cbc:	d916      	bls.n	8008cec <UART_SetConfig+0x508>
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cc4:	d212      	bcs.n	8008cec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	f023 030f 	bic.w	r3, r3, #15
 8008cce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	085b      	lsrs	r3, r3, #1
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	f003 0307 	and.w	r3, r3, #7
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	8bfb      	ldrh	r3, [r7, #30]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	8bfa      	ldrh	r2, [r7, #30]
 8008ce8:	60da      	str	r2, [r3, #12]
 8008cea:	e062      	b.n	8008db2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008cf2:	e05e      	b.n	8008db2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	d828      	bhi.n	8008d4e <UART_SetConfig+0x56a>
 8008cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8008d04 <UART_SetConfig+0x520>)
 8008cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d02:	bf00      	nop
 8008d04:	08008d29 	.word	0x08008d29
 8008d08:	08008d31 	.word	0x08008d31
 8008d0c:	08008d39 	.word	0x08008d39
 8008d10:	08008d4f 	.word	0x08008d4f
 8008d14:	08008d3f 	.word	0x08008d3f
 8008d18:	08008d4f 	.word	0x08008d4f
 8008d1c:	08008d4f 	.word	0x08008d4f
 8008d20:	08008d4f 	.word	0x08008d4f
 8008d24:	08008d47 	.word	0x08008d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d28:	f7fd fb5a 	bl	80063e0 <HAL_RCC_GetPCLK1Freq>
 8008d2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d2e:	e014      	b.n	8008d5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d30:	f7fd fb6c 	bl	800640c <HAL_RCC_GetPCLK2Freq>
 8008d34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d36:	e010      	b.n	8008d5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d38:	4b1a      	ldr	r3, [pc, #104]	@ (8008da4 <UART_SetConfig+0x5c0>)
 8008d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d3c:	e00d      	b.n	8008d5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d3e:	f7fd fae1 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 8008d42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d44:	e009      	b.n	8008d5a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d4c:	e005      	b.n	8008d5a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d58:	bf00      	nop
    }

    if (pclk != 0U)
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d028      	beq.n	8008db2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d64:	4a10      	ldr	r2, [pc, #64]	@ (8008da8 <UART_SetConfig+0x5c4>)
 8008d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	085b      	lsrs	r3, r3, #1
 8008d78:	441a      	add	r2, r3
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	2b0f      	cmp	r3, #15
 8008d88:	d910      	bls.n	8008dac <UART_SetConfig+0x5c8>
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d90:	d20c      	bcs.n	8008dac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60da      	str	r2, [r3, #12]
 8008d9c:	e009      	b.n	8008db2 <UART_SetConfig+0x5ce>
 8008d9e:	bf00      	nop
 8008da0:	40008000 	.word	0x40008000
 8008da4:	00f42400 	.word	0x00f42400
 8008da8:	08009dcc 	.word	0x08009dcc
      }
      else
      {
        ret = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008dce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3730      	adds	r7, #48	@ 0x30
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de8:	f003 0308 	and.w	r3, r3, #8
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00a      	beq.n	8008e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00a      	beq.n	8008e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2c:	f003 0302 	and.w	r3, r3, #2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00a      	beq.n	8008e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4e:	f003 0304 	and.w	r3, r3, #4
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e70:	f003 0310 	and.w	r3, r3, #16
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00a      	beq.n	8008e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	430a      	orrs	r2, r1
 8008eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01a      	beq.n	8008ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008eda:	d10a      	bne.n	8008ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00a      	beq.n	8008f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	605a      	str	r2, [r3, #4]
  }
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b098      	sub	sp, #96	@ 0x60
 8008f24:	af02      	add	r7, sp, #8
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f30:	f7f9 fde4 	bl	8002afc <HAL_GetTick>
 8008f34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0308 	and.w	r3, r3, #8
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d12f      	bne.n	8008fa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f88e 	bl	8009074 <UART_WaitOnFlagUntilTimeout>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d022      	beq.n	8008fa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f66:	e853 3f00 	ldrex	r3, [r3]
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f72:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e6      	bne.n	8008f5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2220      	movs	r2, #32
 8008f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e063      	b.n	800906c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0304 	and.w	r3, r3, #4
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d149      	bne.n	8009046 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f857 	bl	8009074 <UART_WaitOnFlagUntilTimeout>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d03c      	beq.n	8009046 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fea:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e6      	bne.n	8008fcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	e853 3f00 	ldrex	r3, [r3]
 800900c:	60fb      	str	r3, [r7, #12]
   return(result);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f023 0301 	bic.w	r3, r3, #1
 8009014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3308      	adds	r3, #8
 800901c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800901e:	61fa      	str	r2, [r7, #28]
 8009020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	69b9      	ldr	r1, [r7, #24]
 8009024:	69fa      	ldr	r2, [r7, #28]
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	617b      	str	r3, [r7, #20]
   return(result);
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e5      	bne.n	8008ffe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2220      	movs	r2, #32
 8009036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e012      	b.n	800906c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2220      	movs	r2, #32
 8009052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3758      	adds	r7, #88	@ 0x58
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	4613      	mov	r3, r2
 8009082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009084:	e04f      	b.n	8009126 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908c:	d04b      	beq.n	8009126 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800908e:	f7f9 fd35 	bl	8002afc <HAL_GetTick>
 8009092:	4602      	mov	r2, r0
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	69ba      	ldr	r2, [r7, #24]
 800909a:	429a      	cmp	r2, r3
 800909c:	d302      	bcc.n	80090a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e04e      	b.n	8009146 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d037      	beq.n	8009126 <UART_WaitOnFlagUntilTimeout+0xb2>
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2b80      	cmp	r3, #128	@ 0x80
 80090ba:	d034      	beq.n	8009126 <UART_WaitOnFlagUntilTimeout+0xb2>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b40      	cmp	r3, #64	@ 0x40
 80090c0:	d031      	beq.n	8009126 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	f003 0308 	and.w	r3, r3, #8
 80090cc:	2b08      	cmp	r3, #8
 80090ce:	d110      	bne.n	80090f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2208      	movs	r2, #8
 80090d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 f838 	bl	800914e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2208      	movs	r2, #8
 80090e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e029      	b.n	8009146 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009100:	d111      	bne.n	8009126 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800910a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f000 f81e 	bl	800914e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2220      	movs	r2, #32
 8009116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e00f      	b.n	8009146 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69da      	ldr	r2, [r3, #28]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	4013      	ands	r3, r2
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	429a      	cmp	r2, r3
 8009134:	bf0c      	ite	eq
 8009136:	2301      	moveq	r3, #1
 8009138:	2300      	movne	r3, #0
 800913a:	b2db      	uxtb	r3, r3
 800913c:	461a      	mov	r2, r3
 800913e:	79fb      	ldrb	r3, [r7, #7]
 8009140:	429a      	cmp	r2, r3
 8009142:	d0a0      	beq.n	8009086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800914e:	b480      	push	{r7}
 8009150:	b095      	sub	sp, #84	@ 0x54
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800915e:	e853 3f00 	ldrex	r3, [r3]
 8009162:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009166:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800916a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009174:	643b      	str	r3, [r7, #64]	@ 0x40
 8009176:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009178:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800917a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800917c:	e841 2300 	strex	r3, r2, [r1]
 8009180:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1e6      	bne.n	8009156 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3308      	adds	r3, #8
 800918e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	61fb      	str	r3, [r7, #28]
   return(result);
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800919e:	f023 0301 	bic.w	r3, r3, #1
 80091a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3308      	adds	r3, #8
 80091aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091b4:	e841 2300 	strex	r3, r2, [r1]
 80091b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e3      	bne.n	8009188 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d118      	bne.n	80091fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	f023 0310 	bic.w	r3, r3, #16
 80091dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091e6:	61bb      	str	r3, [r7, #24]
 80091e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6979      	ldr	r1, [r7, #20]
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	613b      	str	r3, [r7, #16]
   return(result);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e6      	bne.n	80091c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2220      	movs	r2, #32
 80091fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800920e:	bf00      	nop
 8009210:	3754      	adds	r7, #84	@ 0x54
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800921a:	b480      	push	{r7}
 800921c:	b085      	sub	sp, #20
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009228:	2b01      	cmp	r3, #1
 800922a:	d101      	bne.n	8009230 <HAL_UARTEx_DisableFifoMode+0x16>
 800922c:	2302      	movs	r3, #2
 800922e:	e027      	b.n	8009280 <HAL_UARTEx_DisableFifoMode+0x66>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2224      	movs	r2, #36	@ 0x24
 800923c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f022 0201 	bic.w	r2, r2, #1
 8009256:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800925e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2220      	movs	r2, #32
 8009272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800929c:	2b01      	cmp	r3, #1
 800929e:	d101      	bne.n	80092a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e02d      	b.n	8009300 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2224      	movs	r2, #36	@ 0x24
 80092b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f022 0201 	bic.w	r2, r2, #1
 80092ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f84f 	bl	8009384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800931c:	2302      	movs	r3, #2
 800931e:	e02d      	b.n	800937c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2224      	movs	r2, #36	@ 0x24
 800932c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 0201 	bic.w	r2, r2, #1
 8009346:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	430a      	orrs	r2, r1
 800935a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f811 	bl	8009384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2220      	movs	r2, #32
 800936e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009390:	2b00      	cmp	r3, #0
 8009392:	d108      	bne.n	80093a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093a4:	e031      	b.n	800940a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093a6:	2308      	movs	r3, #8
 80093a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093aa:	2308      	movs	r3, #8
 80093ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	0e5b      	lsrs	r3, r3, #25
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	f003 0307 	and.w	r3, r3, #7
 80093bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	0f5b      	lsrs	r3, r3, #29
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	f003 0307 	and.w	r3, r3, #7
 80093cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
 80093d0:	7b3a      	ldrb	r2, [r7, #12]
 80093d2:	4911      	ldr	r1, [pc, #68]	@ (8009418 <UARTEx_SetNbDataToProcess+0x94>)
 80093d4:	5c8a      	ldrb	r2, [r1, r2]
 80093d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093da:	7b3a      	ldrb	r2, [r7, #12]
 80093dc:	490f      	ldr	r1, [pc, #60]	@ (800941c <UARTEx_SetNbDataToProcess+0x98>)
 80093de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	7b7a      	ldrb	r2, [r7, #13]
 80093f0:	4909      	ldr	r1, [pc, #36]	@ (8009418 <UARTEx_SetNbDataToProcess+0x94>)
 80093f2:	5c8a      	ldrb	r2, [r1, r2]
 80093f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093f8:	7b7a      	ldrb	r2, [r7, #13]
 80093fa:	4908      	ldr	r1, [pc, #32]	@ (800941c <UARTEx_SetNbDataToProcess+0x98>)
 80093fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009402:	b29a      	uxth	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800940a:	bf00      	nop
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	08009de4 	.word	0x08009de4
 800941c:	08009dec 	.word	0x08009dec

08009420 <siprintf>:
 8009420:	b40e      	push	{r1, r2, r3}
 8009422:	b500      	push	{lr}
 8009424:	b09c      	sub	sp, #112	@ 0x70
 8009426:	ab1d      	add	r3, sp, #116	@ 0x74
 8009428:	9002      	str	r0, [sp, #8]
 800942a:	9006      	str	r0, [sp, #24]
 800942c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009430:	4809      	ldr	r0, [pc, #36]	@ (8009458 <siprintf+0x38>)
 8009432:	9107      	str	r1, [sp, #28]
 8009434:	9104      	str	r1, [sp, #16]
 8009436:	4909      	ldr	r1, [pc, #36]	@ (800945c <siprintf+0x3c>)
 8009438:	f853 2b04 	ldr.w	r2, [r3], #4
 800943c:	9105      	str	r1, [sp, #20]
 800943e:	6800      	ldr	r0, [r0, #0]
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	a902      	add	r1, sp, #8
 8009444:	f000 f994 	bl	8009770 <_svfiprintf_r>
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	2200      	movs	r2, #0
 800944c:	701a      	strb	r2, [r3, #0]
 800944e:	b01c      	add	sp, #112	@ 0x70
 8009450:	f85d eb04 	ldr.w	lr, [sp], #4
 8009454:	b003      	add	sp, #12
 8009456:	4770      	bx	lr
 8009458:	2000000c 	.word	0x2000000c
 800945c:	ffff0208 	.word	0xffff0208

08009460 <memset>:
 8009460:	4402      	add	r2, r0
 8009462:	4603      	mov	r3, r0
 8009464:	4293      	cmp	r3, r2
 8009466:	d100      	bne.n	800946a <memset+0xa>
 8009468:	4770      	bx	lr
 800946a:	f803 1b01 	strb.w	r1, [r3], #1
 800946e:	e7f9      	b.n	8009464 <memset+0x4>

08009470 <__errno>:
 8009470:	4b01      	ldr	r3, [pc, #4]	@ (8009478 <__errno+0x8>)
 8009472:	6818      	ldr	r0, [r3, #0]
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	2000000c 	.word	0x2000000c

0800947c <__libc_init_array>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	4d0d      	ldr	r5, [pc, #52]	@ (80094b4 <__libc_init_array+0x38>)
 8009480:	4c0d      	ldr	r4, [pc, #52]	@ (80094b8 <__libc_init_array+0x3c>)
 8009482:	1b64      	subs	r4, r4, r5
 8009484:	10a4      	asrs	r4, r4, #2
 8009486:	2600      	movs	r6, #0
 8009488:	42a6      	cmp	r6, r4
 800948a:	d109      	bne.n	80094a0 <__libc_init_array+0x24>
 800948c:	4d0b      	ldr	r5, [pc, #44]	@ (80094bc <__libc_init_array+0x40>)
 800948e:	4c0c      	ldr	r4, [pc, #48]	@ (80094c0 <__libc_init_array+0x44>)
 8009490:	f000 fc66 	bl	8009d60 <_init>
 8009494:	1b64      	subs	r4, r4, r5
 8009496:	10a4      	asrs	r4, r4, #2
 8009498:	2600      	movs	r6, #0
 800949a:	42a6      	cmp	r6, r4
 800949c:	d105      	bne.n	80094aa <__libc_init_array+0x2e>
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094a4:	4798      	blx	r3
 80094a6:	3601      	adds	r6, #1
 80094a8:	e7ee      	b.n	8009488 <__libc_init_array+0xc>
 80094aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ae:	4798      	blx	r3
 80094b0:	3601      	adds	r6, #1
 80094b2:	e7f2      	b.n	800949a <__libc_init_array+0x1e>
 80094b4:	08009e30 	.word	0x08009e30
 80094b8:	08009e30 	.word	0x08009e30
 80094bc:	08009e30 	.word	0x08009e30
 80094c0:	08009e34 	.word	0x08009e34

080094c4 <__retarget_lock_acquire_recursive>:
 80094c4:	4770      	bx	lr

080094c6 <__retarget_lock_release_recursive>:
 80094c6:	4770      	bx	lr

080094c8 <_free_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4605      	mov	r5, r0
 80094cc:	2900      	cmp	r1, #0
 80094ce:	d041      	beq.n	8009554 <_free_r+0x8c>
 80094d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094d4:	1f0c      	subs	r4, r1, #4
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	bfb8      	it	lt
 80094da:	18e4      	addlt	r4, r4, r3
 80094dc:	f000 f8e0 	bl	80096a0 <__malloc_lock>
 80094e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009558 <_free_r+0x90>)
 80094e2:	6813      	ldr	r3, [r2, #0]
 80094e4:	b933      	cbnz	r3, 80094f4 <_free_r+0x2c>
 80094e6:	6063      	str	r3, [r4, #4]
 80094e8:	6014      	str	r4, [r2, #0]
 80094ea:	4628      	mov	r0, r5
 80094ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094f0:	f000 b8dc 	b.w	80096ac <__malloc_unlock>
 80094f4:	42a3      	cmp	r3, r4
 80094f6:	d908      	bls.n	800950a <_free_r+0x42>
 80094f8:	6820      	ldr	r0, [r4, #0]
 80094fa:	1821      	adds	r1, r4, r0
 80094fc:	428b      	cmp	r3, r1
 80094fe:	bf01      	itttt	eq
 8009500:	6819      	ldreq	r1, [r3, #0]
 8009502:	685b      	ldreq	r3, [r3, #4]
 8009504:	1809      	addeq	r1, r1, r0
 8009506:	6021      	streq	r1, [r4, #0]
 8009508:	e7ed      	b.n	80094e6 <_free_r+0x1e>
 800950a:	461a      	mov	r2, r3
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	b10b      	cbz	r3, 8009514 <_free_r+0x4c>
 8009510:	42a3      	cmp	r3, r4
 8009512:	d9fa      	bls.n	800950a <_free_r+0x42>
 8009514:	6811      	ldr	r1, [r2, #0]
 8009516:	1850      	adds	r0, r2, r1
 8009518:	42a0      	cmp	r0, r4
 800951a:	d10b      	bne.n	8009534 <_free_r+0x6c>
 800951c:	6820      	ldr	r0, [r4, #0]
 800951e:	4401      	add	r1, r0
 8009520:	1850      	adds	r0, r2, r1
 8009522:	4283      	cmp	r3, r0
 8009524:	6011      	str	r1, [r2, #0]
 8009526:	d1e0      	bne.n	80094ea <_free_r+0x22>
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	6053      	str	r3, [r2, #4]
 800952e:	4408      	add	r0, r1
 8009530:	6010      	str	r0, [r2, #0]
 8009532:	e7da      	b.n	80094ea <_free_r+0x22>
 8009534:	d902      	bls.n	800953c <_free_r+0x74>
 8009536:	230c      	movs	r3, #12
 8009538:	602b      	str	r3, [r5, #0]
 800953a:	e7d6      	b.n	80094ea <_free_r+0x22>
 800953c:	6820      	ldr	r0, [r4, #0]
 800953e:	1821      	adds	r1, r4, r0
 8009540:	428b      	cmp	r3, r1
 8009542:	bf04      	itt	eq
 8009544:	6819      	ldreq	r1, [r3, #0]
 8009546:	685b      	ldreq	r3, [r3, #4]
 8009548:	6063      	str	r3, [r4, #4]
 800954a:	bf04      	itt	eq
 800954c:	1809      	addeq	r1, r1, r0
 800954e:	6021      	streq	r1, [r4, #0]
 8009550:	6054      	str	r4, [r2, #4]
 8009552:	e7ca      	b.n	80094ea <_free_r+0x22>
 8009554:	bd38      	pop	{r3, r4, r5, pc}
 8009556:	bf00      	nop
 8009558:	20000738 	.word	0x20000738

0800955c <sbrk_aligned>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	4e0f      	ldr	r6, [pc, #60]	@ (800959c <sbrk_aligned+0x40>)
 8009560:	460c      	mov	r4, r1
 8009562:	6831      	ldr	r1, [r6, #0]
 8009564:	4605      	mov	r5, r0
 8009566:	b911      	cbnz	r1, 800956e <sbrk_aligned+0x12>
 8009568:	f000 fba6 	bl	8009cb8 <_sbrk_r>
 800956c:	6030      	str	r0, [r6, #0]
 800956e:	4621      	mov	r1, r4
 8009570:	4628      	mov	r0, r5
 8009572:	f000 fba1 	bl	8009cb8 <_sbrk_r>
 8009576:	1c43      	adds	r3, r0, #1
 8009578:	d103      	bne.n	8009582 <sbrk_aligned+0x26>
 800957a:	f04f 34ff 	mov.w	r4, #4294967295
 800957e:	4620      	mov	r0, r4
 8009580:	bd70      	pop	{r4, r5, r6, pc}
 8009582:	1cc4      	adds	r4, r0, #3
 8009584:	f024 0403 	bic.w	r4, r4, #3
 8009588:	42a0      	cmp	r0, r4
 800958a:	d0f8      	beq.n	800957e <sbrk_aligned+0x22>
 800958c:	1a21      	subs	r1, r4, r0
 800958e:	4628      	mov	r0, r5
 8009590:	f000 fb92 	bl	8009cb8 <_sbrk_r>
 8009594:	3001      	adds	r0, #1
 8009596:	d1f2      	bne.n	800957e <sbrk_aligned+0x22>
 8009598:	e7ef      	b.n	800957a <sbrk_aligned+0x1e>
 800959a:	bf00      	nop
 800959c:	20000734 	.word	0x20000734

080095a0 <_malloc_r>:
 80095a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a4:	1ccd      	adds	r5, r1, #3
 80095a6:	f025 0503 	bic.w	r5, r5, #3
 80095aa:	3508      	adds	r5, #8
 80095ac:	2d0c      	cmp	r5, #12
 80095ae:	bf38      	it	cc
 80095b0:	250c      	movcc	r5, #12
 80095b2:	2d00      	cmp	r5, #0
 80095b4:	4606      	mov	r6, r0
 80095b6:	db01      	blt.n	80095bc <_malloc_r+0x1c>
 80095b8:	42a9      	cmp	r1, r5
 80095ba:	d904      	bls.n	80095c6 <_malloc_r+0x26>
 80095bc:	230c      	movs	r3, #12
 80095be:	6033      	str	r3, [r6, #0]
 80095c0:	2000      	movs	r0, #0
 80095c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800969c <_malloc_r+0xfc>
 80095ca:	f000 f869 	bl	80096a0 <__malloc_lock>
 80095ce:	f8d8 3000 	ldr.w	r3, [r8]
 80095d2:	461c      	mov	r4, r3
 80095d4:	bb44      	cbnz	r4, 8009628 <_malloc_r+0x88>
 80095d6:	4629      	mov	r1, r5
 80095d8:	4630      	mov	r0, r6
 80095da:	f7ff ffbf 	bl	800955c <sbrk_aligned>
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	4604      	mov	r4, r0
 80095e2:	d158      	bne.n	8009696 <_malloc_r+0xf6>
 80095e4:	f8d8 4000 	ldr.w	r4, [r8]
 80095e8:	4627      	mov	r7, r4
 80095ea:	2f00      	cmp	r7, #0
 80095ec:	d143      	bne.n	8009676 <_malloc_r+0xd6>
 80095ee:	2c00      	cmp	r4, #0
 80095f0:	d04b      	beq.n	800968a <_malloc_r+0xea>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	4639      	mov	r1, r7
 80095f6:	4630      	mov	r0, r6
 80095f8:	eb04 0903 	add.w	r9, r4, r3
 80095fc:	f000 fb5c 	bl	8009cb8 <_sbrk_r>
 8009600:	4581      	cmp	r9, r0
 8009602:	d142      	bne.n	800968a <_malloc_r+0xea>
 8009604:	6821      	ldr	r1, [r4, #0]
 8009606:	1a6d      	subs	r5, r5, r1
 8009608:	4629      	mov	r1, r5
 800960a:	4630      	mov	r0, r6
 800960c:	f7ff ffa6 	bl	800955c <sbrk_aligned>
 8009610:	3001      	adds	r0, #1
 8009612:	d03a      	beq.n	800968a <_malloc_r+0xea>
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	442b      	add	r3, r5
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	f8d8 3000 	ldr.w	r3, [r8]
 800961e:	685a      	ldr	r2, [r3, #4]
 8009620:	bb62      	cbnz	r2, 800967c <_malloc_r+0xdc>
 8009622:	f8c8 7000 	str.w	r7, [r8]
 8009626:	e00f      	b.n	8009648 <_malloc_r+0xa8>
 8009628:	6822      	ldr	r2, [r4, #0]
 800962a:	1b52      	subs	r2, r2, r5
 800962c:	d420      	bmi.n	8009670 <_malloc_r+0xd0>
 800962e:	2a0b      	cmp	r2, #11
 8009630:	d917      	bls.n	8009662 <_malloc_r+0xc2>
 8009632:	1961      	adds	r1, r4, r5
 8009634:	42a3      	cmp	r3, r4
 8009636:	6025      	str	r5, [r4, #0]
 8009638:	bf18      	it	ne
 800963a:	6059      	strne	r1, [r3, #4]
 800963c:	6863      	ldr	r3, [r4, #4]
 800963e:	bf08      	it	eq
 8009640:	f8c8 1000 	streq.w	r1, [r8]
 8009644:	5162      	str	r2, [r4, r5]
 8009646:	604b      	str	r3, [r1, #4]
 8009648:	4630      	mov	r0, r6
 800964a:	f000 f82f 	bl	80096ac <__malloc_unlock>
 800964e:	f104 000b 	add.w	r0, r4, #11
 8009652:	1d23      	adds	r3, r4, #4
 8009654:	f020 0007 	bic.w	r0, r0, #7
 8009658:	1ac2      	subs	r2, r0, r3
 800965a:	bf1c      	itt	ne
 800965c:	1a1b      	subne	r3, r3, r0
 800965e:	50a3      	strne	r3, [r4, r2]
 8009660:	e7af      	b.n	80095c2 <_malloc_r+0x22>
 8009662:	6862      	ldr	r2, [r4, #4]
 8009664:	42a3      	cmp	r3, r4
 8009666:	bf0c      	ite	eq
 8009668:	f8c8 2000 	streq.w	r2, [r8]
 800966c:	605a      	strne	r2, [r3, #4]
 800966e:	e7eb      	b.n	8009648 <_malloc_r+0xa8>
 8009670:	4623      	mov	r3, r4
 8009672:	6864      	ldr	r4, [r4, #4]
 8009674:	e7ae      	b.n	80095d4 <_malloc_r+0x34>
 8009676:	463c      	mov	r4, r7
 8009678:	687f      	ldr	r7, [r7, #4]
 800967a:	e7b6      	b.n	80095ea <_malloc_r+0x4a>
 800967c:	461a      	mov	r2, r3
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	42a3      	cmp	r3, r4
 8009682:	d1fb      	bne.n	800967c <_malloc_r+0xdc>
 8009684:	2300      	movs	r3, #0
 8009686:	6053      	str	r3, [r2, #4]
 8009688:	e7de      	b.n	8009648 <_malloc_r+0xa8>
 800968a:	230c      	movs	r3, #12
 800968c:	6033      	str	r3, [r6, #0]
 800968e:	4630      	mov	r0, r6
 8009690:	f000 f80c 	bl	80096ac <__malloc_unlock>
 8009694:	e794      	b.n	80095c0 <_malloc_r+0x20>
 8009696:	6005      	str	r5, [r0, #0]
 8009698:	e7d6      	b.n	8009648 <_malloc_r+0xa8>
 800969a:	bf00      	nop
 800969c:	20000738 	.word	0x20000738

080096a0 <__malloc_lock>:
 80096a0:	4801      	ldr	r0, [pc, #4]	@ (80096a8 <__malloc_lock+0x8>)
 80096a2:	f7ff bf0f 	b.w	80094c4 <__retarget_lock_acquire_recursive>
 80096a6:	bf00      	nop
 80096a8:	20000730 	.word	0x20000730

080096ac <__malloc_unlock>:
 80096ac:	4801      	ldr	r0, [pc, #4]	@ (80096b4 <__malloc_unlock+0x8>)
 80096ae:	f7ff bf0a 	b.w	80094c6 <__retarget_lock_release_recursive>
 80096b2:	bf00      	nop
 80096b4:	20000730 	.word	0x20000730

080096b8 <__ssputs_r>:
 80096b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096bc:	688e      	ldr	r6, [r1, #8]
 80096be:	461f      	mov	r7, r3
 80096c0:	42be      	cmp	r6, r7
 80096c2:	680b      	ldr	r3, [r1, #0]
 80096c4:	4682      	mov	sl, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	4690      	mov	r8, r2
 80096ca:	d82d      	bhi.n	8009728 <__ssputs_r+0x70>
 80096cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80096d4:	d026      	beq.n	8009724 <__ssputs_r+0x6c>
 80096d6:	6965      	ldr	r5, [r4, #20]
 80096d8:	6909      	ldr	r1, [r1, #16]
 80096da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096de:	eba3 0901 	sub.w	r9, r3, r1
 80096e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096e6:	1c7b      	adds	r3, r7, #1
 80096e8:	444b      	add	r3, r9
 80096ea:	106d      	asrs	r5, r5, #1
 80096ec:	429d      	cmp	r5, r3
 80096ee:	bf38      	it	cc
 80096f0:	461d      	movcc	r5, r3
 80096f2:	0553      	lsls	r3, r2, #21
 80096f4:	d527      	bpl.n	8009746 <__ssputs_r+0x8e>
 80096f6:	4629      	mov	r1, r5
 80096f8:	f7ff ff52 	bl	80095a0 <_malloc_r>
 80096fc:	4606      	mov	r6, r0
 80096fe:	b360      	cbz	r0, 800975a <__ssputs_r+0xa2>
 8009700:	6921      	ldr	r1, [r4, #16]
 8009702:	464a      	mov	r2, r9
 8009704:	f000 fae8 	bl	8009cd8 <memcpy>
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800970e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009712:	81a3      	strh	r3, [r4, #12]
 8009714:	6126      	str	r6, [r4, #16]
 8009716:	6165      	str	r5, [r4, #20]
 8009718:	444e      	add	r6, r9
 800971a:	eba5 0509 	sub.w	r5, r5, r9
 800971e:	6026      	str	r6, [r4, #0]
 8009720:	60a5      	str	r5, [r4, #8]
 8009722:	463e      	mov	r6, r7
 8009724:	42be      	cmp	r6, r7
 8009726:	d900      	bls.n	800972a <__ssputs_r+0x72>
 8009728:	463e      	mov	r6, r7
 800972a:	6820      	ldr	r0, [r4, #0]
 800972c:	4632      	mov	r2, r6
 800972e:	4641      	mov	r1, r8
 8009730:	f000 faa8 	bl	8009c84 <memmove>
 8009734:	68a3      	ldr	r3, [r4, #8]
 8009736:	1b9b      	subs	r3, r3, r6
 8009738:	60a3      	str	r3, [r4, #8]
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	4433      	add	r3, r6
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	2000      	movs	r0, #0
 8009742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009746:	462a      	mov	r2, r5
 8009748:	f000 fad4 	bl	8009cf4 <_realloc_r>
 800974c:	4606      	mov	r6, r0
 800974e:	2800      	cmp	r0, #0
 8009750:	d1e0      	bne.n	8009714 <__ssputs_r+0x5c>
 8009752:	6921      	ldr	r1, [r4, #16]
 8009754:	4650      	mov	r0, sl
 8009756:	f7ff feb7 	bl	80094c8 <_free_r>
 800975a:	230c      	movs	r3, #12
 800975c:	f8ca 3000 	str.w	r3, [sl]
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009766:	81a3      	strh	r3, [r4, #12]
 8009768:	f04f 30ff 	mov.w	r0, #4294967295
 800976c:	e7e9      	b.n	8009742 <__ssputs_r+0x8a>
	...

08009770 <_svfiprintf_r>:
 8009770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009774:	4698      	mov	r8, r3
 8009776:	898b      	ldrh	r3, [r1, #12]
 8009778:	061b      	lsls	r3, r3, #24
 800977a:	b09d      	sub	sp, #116	@ 0x74
 800977c:	4607      	mov	r7, r0
 800977e:	460d      	mov	r5, r1
 8009780:	4614      	mov	r4, r2
 8009782:	d510      	bpl.n	80097a6 <_svfiprintf_r+0x36>
 8009784:	690b      	ldr	r3, [r1, #16]
 8009786:	b973      	cbnz	r3, 80097a6 <_svfiprintf_r+0x36>
 8009788:	2140      	movs	r1, #64	@ 0x40
 800978a:	f7ff ff09 	bl	80095a0 <_malloc_r>
 800978e:	6028      	str	r0, [r5, #0]
 8009790:	6128      	str	r0, [r5, #16]
 8009792:	b930      	cbnz	r0, 80097a2 <_svfiprintf_r+0x32>
 8009794:	230c      	movs	r3, #12
 8009796:	603b      	str	r3, [r7, #0]
 8009798:	f04f 30ff 	mov.w	r0, #4294967295
 800979c:	b01d      	add	sp, #116	@ 0x74
 800979e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a2:	2340      	movs	r3, #64	@ 0x40
 80097a4:	616b      	str	r3, [r5, #20]
 80097a6:	2300      	movs	r3, #0
 80097a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80097aa:	2320      	movs	r3, #32
 80097ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80097b4:	2330      	movs	r3, #48	@ 0x30
 80097b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009954 <_svfiprintf_r+0x1e4>
 80097ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097be:	f04f 0901 	mov.w	r9, #1
 80097c2:	4623      	mov	r3, r4
 80097c4:	469a      	mov	sl, r3
 80097c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ca:	b10a      	cbz	r2, 80097d0 <_svfiprintf_r+0x60>
 80097cc:	2a25      	cmp	r2, #37	@ 0x25
 80097ce:	d1f9      	bne.n	80097c4 <_svfiprintf_r+0x54>
 80097d0:	ebba 0b04 	subs.w	fp, sl, r4
 80097d4:	d00b      	beq.n	80097ee <_svfiprintf_r+0x7e>
 80097d6:	465b      	mov	r3, fp
 80097d8:	4622      	mov	r2, r4
 80097da:	4629      	mov	r1, r5
 80097dc:	4638      	mov	r0, r7
 80097de:	f7ff ff6b 	bl	80096b8 <__ssputs_r>
 80097e2:	3001      	adds	r0, #1
 80097e4:	f000 80a7 	beq.w	8009936 <_svfiprintf_r+0x1c6>
 80097e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097ea:	445a      	add	r2, fp
 80097ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80097ee:	f89a 3000 	ldrb.w	r3, [sl]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f000 809f 	beq.w	8009936 <_svfiprintf_r+0x1c6>
 80097f8:	2300      	movs	r3, #0
 80097fa:	f04f 32ff 	mov.w	r2, #4294967295
 80097fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009802:	f10a 0a01 	add.w	sl, sl, #1
 8009806:	9304      	str	r3, [sp, #16]
 8009808:	9307      	str	r3, [sp, #28]
 800980a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800980e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009810:	4654      	mov	r4, sl
 8009812:	2205      	movs	r2, #5
 8009814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009818:	484e      	ldr	r0, [pc, #312]	@ (8009954 <_svfiprintf_r+0x1e4>)
 800981a:	f7f6 fd09 	bl	8000230 <memchr>
 800981e:	9a04      	ldr	r2, [sp, #16]
 8009820:	b9d8      	cbnz	r0, 800985a <_svfiprintf_r+0xea>
 8009822:	06d0      	lsls	r0, r2, #27
 8009824:	bf44      	itt	mi
 8009826:	2320      	movmi	r3, #32
 8009828:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800982c:	0711      	lsls	r1, r2, #28
 800982e:	bf44      	itt	mi
 8009830:	232b      	movmi	r3, #43	@ 0x2b
 8009832:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009836:	f89a 3000 	ldrb.w	r3, [sl]
 800983a:	2b2a      	cmp	r3, #42	@ 0x2a
 800983c:	d015      	beq.n	800986a <_svfiprintf_r+0xfa>
 800983e:	9a07      	ldr	r2, [sp, #28]
 8009840:	4654      	mov	r4, sl
 8009842:	2000      	movs	r0, #0
 8009844:	f04f 0c0a 	mov.w	ip, #10
 8009848:	4621      	mov	r1, r4
 800984a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800984e:	3b30      	subs	r3, #48	@ 0x30
 8009850:	2b09      	cmp	r3, #9
 8009852:	d94b      	bls.n	80098ec <_svfiprintf_r+0x17c>
 8009854:	b1b0      	cbz	r0, 8009884 <_svfiprintf_r+0x114>
 8009856:	9207      	str	r2, [sp, #28]
 8009858:	e014      	b.n	8009884 <_svfiprintf_r+0x114>
 800985a:	eba0 0308 	sub.w	r3, r0, r8
 800985e:	fa09 f303 	lsl.w	r3, r9, r3
 8009862:	4313      	orrs	r3, r2
 8009864:	9304      	str	r3, [sp, #16]
 8009866:	46a2      	mov	sl, r4
 8009868:	e7d2      	b.n	8009810 <_svfiprintf_r+0xa0>
 800986a:	9b03      	ldr	r3, [sp, #12]
 800986c:	1d19      	adds	r1, r3, #4
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	9103      	str	r1, [sp, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	bfbb      	ittet	lt
 8009876:	425b      	neglt	r3, r3
 8009878:	f042 0202 	orrlt.w	r2, r2, #2
 800987c:	9307      	strge	r3, [sp, #28]
 800987e:	9307      	strlt	r3, [sp, #28]
 8009880:	bfb8      	it	lt
 8009882:	9204      	strlt	r2, [sp, #16]
 8009884:	7823      	ldrb	r3, [r4, #0]
 8009886:	2b2e      	cmp	r3, #46	@ 0x2e
 8009888:	d10a      	bne.n	80098a0 <_svfiprintf_r+0x130>
 800988a:	7863      	ldrb	r3, [r4, #1]
 800988c:	2b2a      	cmp	r3, #42	@ 0x2a
 800988e:	d132      	bne.n	80098f6 <_svfiprintf_r+0x186>
 8009890:	9b03      	ldr	r3, [sp, #12]
 8009892:	1d1a      	adds	r2, r3, #4
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	9203      	str	r2, [sp, #12]
 8009898:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800989c:	3402      	adds	r4, #2
 800989e:	9305      	str	r3, [sp, #20]
 80098a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009964 <_svfiprintf_r+0x1f4>
 80098a4:	7821      	ldrb	r1, [r4, #0]
 80098a6:	2203      	movs	r2, #3
 80098a8:	4650      	mov	r0, sl
 80098aa:	f7f6 fcc1 	bl	8000230 <memchr>
 80098ae:	b138      	cbz	r0, 80098c0 <_svfiprintf_r+0x150>
 80098b0:	9b04      	ldr	r3, [sp, #16]
 80098b2:	eba0 000a 	sub.w	r0, r0, sl
 80098b6:	2240      	movs	r2, #64	@ 0x40
 80098b8:	4082      	lsls	r2, r0
 80098ba:	4313      	orrs	r3, r2
 80098bc:	3401      	adds	r4, #1
 80098be:	9304      	str	r3, [sp, #16]
 80098c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c4:	4824      	ldr	r0, [pc, #144]	@ (8009958 <_svfiprintf_r+0x1e8>)
 80098c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098ca:	2206      	movs	r2, #6
 80098cc:	f7f6 fcb0 	bl	8000230 <memchr>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d036      	beq.n	8009942 <_svfiprintf_r+0x1d2>
 80098d4:	4b21      	ldr	r3, [pc, #132]	@ (800995c <_svfiprintf_r+0x1ec>)
 80098d6:	bb1b      	cbnz	r3, 8009920 <_svfiprintf_r+0x1b0>
 80098d8:	9b03      	ldr	r3, [sp, #12]
 80098da:	3307      	adds	r3, #7
 80098dc:	f023 0307 	bic.w	r3, r3, #7
 80098e0:	3308      	adds	r3, #8
 80098e2:	9303      	str	r3, [sp, #12]
 80098e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e6:	4433      	add	r3, r6
 80098e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ea:	e76a      	b.n	80097c2 <_svfiprintf_r+0x52>
 80098ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80098f0:	460c      	mov	r4, r1
 80098f2:	2001      	movs	r0, #1
 80098f4:	e7a8      	b.n	8009848 <_svfiprintf_r+0xd8>
 80098f6:	2300      	movs	r3, #0
 80098f8:	3401      	adds	r4, #1
 80098fa:	9305      	str	r3, [sp, #20]
 80098fc:	4619      	mov	r1, r3
 80098fe:	f04f 0c0a 	mov.w	ip, #10
 8009902:	4620      	mov	r0, r4
 8009904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009908:	3a30      	subs	r2, #48	@ 0x30
 800990a:	2a09      	cmp	r2, #9
 800990c:	d903      	bls.n	8009916 <_svfiprintf_r+0x1a6>
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0c6      	beq.n	80098a0 <_svfiprintf_r+0x130>
 8009912:	9105      	str	r1, [sp, #20]
 8009914:	e7c4      	b.n	80098a0 <_svfiprintf_r+0x130>
 8009916:	fb0c 2101 	mla	r1, ip, r1, r2
 800991a:	4604      	mov	r4, r0
 800991c:	2301      	movs	r3, #1
 800991e:	e7f0      	b.n	8009902 <_svfiprintf_r+0x192>
 8009920:	ab03      	add	r3, sp, #12
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	462a      	mov	r2, r5
 8009926:	4b0e      	ldr	r3, [pc, #56]	@ (8009960 <_svfiprintf_r+0x1f0>)
 8009928:	a904      	add	r1, sp, #16
 800992a:	4638      	mov	r0, r7
 800992c:	f3af 8000 	nop.w
 8009930:	1c42      	adds	r2, r0, #1
 8009932:	4606      	mov	r6, r0
 8009934:	d1d6      	bne.n	80098e4 <_svfiprintf_r+0x174>
 8009936:	89ab      	ldrh	r3, [r5, #12]
 8009938:	065b      	lsls	r3, r3, #25
 800993a:	f53f af2d 	bmi.w	8009798 <_svfiprintf_r+0x28>
 800993e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009940:	e72c      	b.n	800979c <_svfiprintf_r+0x2c>
 8009942:	ab03      	add	r3, sp, #12
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	462a      	mov	r2, r5
 8009948:	4b05      	ldr	r3, [pc, #20]	@ (8009960 <_svfiprintf_r+0x1f0>)
 800994a:	a904      	add	r1, sp, #16
 800994c:	4638      	mov	r0, r7
 800994e:	f000 f879 	bl	8009a44 <_printf_i>
 8009952:	e7ed      	b.n	8009930 <_svfiprintf_r+0x1c0>
 8009954:	08009df4 	.word	0x08009df4
 8009958:	08009dfe 	.word	0x08009dfe
 800995c:	00000000 	.word	0x00000000
 8009960:	080096b9 	.word	0x080096b9
 8009964:	08009dfa 	.word	0x08009dfa

08009968 <_printf_common>:
 8009968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800996c:	4616      	mov	r6, r2
 800996e:	4698      	mov	r8, r3
 8009970:	688a      	ldr	r2, [r1, #8]
 8009972:	690b      	ldr	r3, [r1, #16]
 8009974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009978:	4293      	cmp	r3, r2
 800997a:	bfb8      	it	lt
 800997c:	4613      	movlt	r3, r2
 800997e:	6033      	str	r3, [r6, #0]
 8009980:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009984:	4607      	mov	r7, r0
 8009986:	460c      	mov	r4, r1
 8009988:	b10a      	cbz	r2, 800998e <_printf_common+0x26>
 800998a:	3301      	adds	r3, #1
 800998c:	6033      	str	r3, [r6, #0]
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	0699      	lsls	r1, r3, #26
 8009992:	bf42      	ittt	mi
 8009994:	6833      	ldrmi	r3, [r6, #0]
 8009996:	3302      	addmi	r3, #2
 8009998:	6033      	strmi	r3, [r6, #0]
 800999a:	6825      	ldr	r5, [r4, #0]
 800999c:	f015 0506 	ands.w	r5, r5, #6
 80099a0:	d106      	bne.n	80099b0 <_printf_common+0x48>
 80099a2:	f104 0a19 	add.w	sl, r4, #25
 80099a6:	68e3      	ldr	r3, [r4, #12]
 80099a8:	6832      	ldr	r2, [r6, #0]
 80099aa:	1a9b      	subs	r3, r3, r2
 80099ac:	42ab      	cmp	r3, r5
 80099ae:	dc26      	bgt.n	80099fe <_printf_common+0x96>
 80099b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80099b4:	6822      	ldr	r2, [r4, #0]
 80099b6:	3b00      	subs	r3, #0
 80099b8:	bf18      	it	ne
 80099ba:	2301      	movne	r3, #1
 80099bc:	0692      	lsls	r2, r2, #26
 80099be:	d42b      	bmi.n	8009a18 <_printf_common+0xb0>
 80099c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80099c4:	4641      	mov	r1, r8
 80099c6:	4638      	mov	r0, r7
 80099c8:	47c8      	blx	r9
 80099ca:	3001      	adds	r0, #1
 80099cc:	d01e      	beq.n	8009a0c <_printf_common+0xa4>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	6922      	ldr	r2, [r4, #16]
 80099d2:	f003 0306 	and.w	r3, r3, #6
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	bf02      	ittt	eq
 80099da:	68e5      	ldreq	r5, [r4, #12]
 80099dc:	6833      	ldreq	r3, [r6, #0]
 80099de:	1aed      	subeq	r5, r5, r3
 80099e0:	68a3      	ldr	r3, [r4, #8]
 80099e2:	bf0c      	ite	eq
 80099e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099e8:	2500      	movne	r5, #0
 80099ea:	4293      	cmp	r3, r2
 80099ec:	bfc4      	itt	gt
 80099ee:	1a9b      	subgt	r3, r3, r2
 80099f0:	18ed      	addgt	r5, r5, r3
 80099f2:	2600      	movs	r6, #0
 80099f4:	341a      	adds	r4, #26
 80099f6:	42b5      	cmp	r5, r6
 80099f8:	d11a      	bne.n	8009a30 <_printf_common+0xc8>
 80099fa:	2000      	movs	r0, #0
 80099fc:	e008      	b.n	8009a10 <_printf_common+0xa8>
 80099fe:	2301      	movs	r3, #1
 8009a00:	4652      	mov	r2, sl
 8009a02:	4641      	mov	r1, r8
 8009a04:	4638      	mov	r0, r7
 8009a06:	47c8      	blx	r9
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d103      	bne.n	8009a14 <_printf_common+0xac>
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a14:	3501      	adds	r5, #1
 8009a16:	e7c6      	b.n	80099a6 <_printf_common+0x3e>
 8009a18:	18e1      	adds	r1, r4, r3
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	2030      	movs	r0, #48	@ 0x30
 8009a1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a22:	4422      	add	r2, r4
 8009a24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a2c:	3302      	adds	r3, #2
 8009a2e:	e7c7      	b.n	80099c0 <_printf_common+0x58>
 8009a30:	2301      	movs	r3, #1
 8009a32:	4622      	mov	r2, r4
 8009a34:	4641      	mov	r1, r8
 8009a36:	4638      	mov	r0, r7
 8009a38:	47c8      	blx	r9
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	d0e6      	beq.n	8009a0c <_printf_common+0xa4>
 8009a3e:	3601      	adds	r6, #1
 8009a40:	e7d9      	b.n	80099f6 <_printf_common+0x8e>
	...

08009a44 <_printf_i>:
 8009a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a48:	7e0f      	ldrb	r7, [r1, #24]
 8009a4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a4c:	2f78      	cmp	r7, #120	@ 0x78
 8009a4e:	4691      	mov	r9, r2
 8009a50:	4680      	mov	r8, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	469a      	mov	sl, r3
 8009a56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a5a:	d807      	bhi.n	8009a6c <_printf_i+0x28>
 8009a5c:	2f62      	cmp	r7, #98	@ 0x62
 8009a5e:	d80a      	bhi.n	8009a76 <_printf_i+0x32>
 8009a60:	2f00      	cmp	r7, #0
 8009a62:	f000 80d2 	beq.w	8009c0a <_printf_i+0x1c6>
 8009a66:	2f58      	cmp	r7, #88	@ 0x58
 8009a68:	f000 80b9 	beq.w	8009bde <_printf_i+0x19a>
 8009a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a74:	e03a      	b.n	8009aec <_printf_i+0xa8>
 8009a76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a7a:	2b15      	cmp	r3, #21
 8009a7c:	d8f6      	bhi.n	8009a6c <_printf_i+0x28>
 8009a7e:	a101      	add	r1, pc, #4	@ (adr r1, 8009a84 <_printf_i+0x40>)
 8009a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a84:	08009add 	.word	0x08009add
 8009a88:	08009af1 	.word	0x08009af1
 8009a8c:	08009a6d 	.word	0x08009a6d
 8009a90:	08009a6d 	.word	0x08009a6d
 8009a94:	08009a6d 	.word	0x08009a6d
 8009a98:	08009a6d 	.word	0x08009a6d
 8009a9c:	08009af1 	.word	0x08009af1
 8009aa0:	08009a6d 	.word	0x08009a6d
 8009aa4:	08009a6d 	.word	0x08009a6d
 8009aa8:	08009a6d 	.word	0x08009a6d
 8009aac:	08009a6d 	.word	0x08009a6d
 8009ab0:	08009bf1 	.word	0x08009bf1
 8009ab4:	08009b1b 	.word	0x08009b1b
 8009ab8:	08009bab 	.word	0x08009bab
 8009abc:	08009a6d 	.word	0x08009a6d
 8009ac0:	08009a6d 	.word	0x08009a6d
 8009ac4:	08009c13 	.word	0x08009c13
 8009ac8:	08009a6d 	.word	0x08009a6d
 8009acc:	08009b1b 	.word	0x08009b1b
 8009ad0:	08009a6d 	.word	0x08009a6d
 8009ad4:	08009a6d 	.word	0x08009a6d
 8009ad8:	08009bb3 	.word	0x08009bb3
 8009adc:	6833      	ldr	r3, [r6, #0]
 8009ade:	1d1a      	adds	r2, r3, #4
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6032      	str	r2, [r6, #0]
 8009ae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ae8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009aec:	2301      	movs	r3, #1
 8009aee:	e09d      	b.n	8009c2c <_printf_i+0x1e8>
 8009af0:	6833      	ldr	r3, [r6, #0]
 8009af2:	6820      	ldr	r0, [r4, #0]
 8009af4:	1d19      	adds	r1, r3, #4
 8009af6:	6031      	str	r1, [r6, #0]
 8009af8:	0606      	lsls	r6, r0, #24
 8009afa:	d501      	bpl.n	8009b00 <_printf_i+0xbc>
 8009afc:	681d      	ldr	r5, [r3, #0]
 8009afe:	e003      	b.n	8009b08 <_printf_i+0xc4>
 8009b00:	0645      	lsls	r5, r0, #25
 8009b02:	d5fb      	bpl.n	8009afc <_printf_i+0xb8>
 8009b04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b08:	2d00      	cmp	r5, #0
 8009b0a:	da03      	bge.n	8009b14 <_printf_i+0xd0>
 8009b0c:	232d      	movs	r3, #45	@ 0x2d
 8009b0e:	426d      	negs	r5, r5
 8009b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b14:	4859      	ldr	r0, [pc, #356]	@ (8009c7c <_printf_i+0x238>)
 8009b16:	230a      	movs	r3, #10
 8009b18:	e011      	b.n	8009b3e <_printf_i+0xfa>
 8009b1a:	6821      	ldr	r1, [r4, #0]
 8009b1c:	6833      	ldr	r3, [r6, #0]
 8009b1e:	0608      	lsls	r0, r1, #24
 8009b20:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b24:	d402      	bmi.n	8009b2c <_printf_i+0xe8>
 8009b26:	0649      	lsls	r1, r1, #25
 8009b28:	bf48      	it	mi
 8009b2a:	b2ad      	uxthmi	r5, r5
 8009b2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b2e:	4853      	ldr	r0, [pc, #332]	@ (8009c7c <_printf_i+0x238>)
 8009b30:	6033      	str	r3, [r6, #0]
 8009b32:	bf14      	ite	ne
 8009b34:	230a      	movne	r3, #10
 8009b36:	2308      	moveq	r3, #8
 8009b38:	2100      	movs	r1, #0
 8009b3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b3e:	6866      	ldr	r6, [r4, #4]
 8009b40:	60a6      	str	r6, [r4, #8]
 8009b42:	2e00      	cmp	r6, #0
 8009b44:	bfa2      	ittt	ge
 8009b46:	6821      	ldrge	r1, [r4, #0]
 8009b48:	f021 0104 	bicge.w	r1, r1, #4
 8009b4c:	6021      	strge	r1, [r4, #0]
 8009b4e:	b90d      	cbnz	r5, 8009b54 <_printf_i+0x110>
 8009b50:	2e00      	cmp	r6, #0
 8009b52:	d04b      	beq.n	8009bec <_printf_i+0x1a8>
 8009b54:	4616      	mov	r6, r2
 8009b56:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b5a:	fb03 5711 	mls	r7, r3, r1, r5
 8009b5e:	5dc7      	ldrb	r7, [r0, r7]
 8009b60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b64:	462f      	mov	r7, r5
 8009b66:	42bb      	cmp	r3, r7
 8009b68:	460d      	mov	r5, r1
 8009b6a:	d9f4      	bls.n	8009b56 <_printf_i+0x112>
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d10b      	bne.n	8009b88 <_printf_i+0x144>
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	07df      	lsls	r7, r3, #31
 8009b74:	d508      	bpl.n	8009b88 <_printf_i+0x144>
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	6861      	ldr	r1, [r4, #4]
 8009b7a:	4299      	cmp	r1, r3
 8009b7c:	bfde      	ittt	le
 8009b7e:	2330      	movle	r3, #48	@ 0x30
 8009b80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b88:	1b92      	subs	r2, r2, r6
 8009b8a:	6122      	str	r2, [r4, #16]
 8009b8c:	f8cd a000 	str.w	sl, [sp]
 8009b90:	464b      	mov	r3, r9
 8009b92:	aa03      	add	r2, sp, #12
 8009b94:	4621      	mov	r1, r4
 8009b96:	4640      	mov	r0, r8
 8009b98:	f7ff fee6 	bl	8009968 <_printf_common>
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d14a      	bne.n	8009c36 <_printf_i+0x1f2>
 8009ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba4:	b004      	add	sp, #16
 8009ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	f043 0320 	orr.w	r3, r3, #32
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	4833      	ldr	r0, [pc, #204]	@ (8009c80 <_printf_i+0x23c>)
 8009bb4:	2778      	movs	r7, #120	@ 0x78
 8009bb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	6831      	ldr	r1, [r6, #0]
 8009bbe:	061f      	lsls	r7, r3, #24
 8009bc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8009bc4:	d402      	bmi.n	8009bcc <_printf_i+0x188>
 8009bc6:	065f      	lsls	r7, r3, #25
 8009bc8:	bf48      	it	mi
 8009bca:	b2ad      	uxthmi	r5, r5
 8009bcc:	6031      	str	r1, [r6, #0]
 8009bce:	07d9      	lsls	r1, r3, #31
 8009bd0:	bf44      	itt	mi
 8009bd2:	f043 0320 	orrmi.w	r3, r3, #32
 8009bd6:	6023      	strmi	r3, [r4, #0]
 8009bd8:	b11d      	cbz	r5, 8009be2 <_printf_i+0x19e>
 8009bda:	2310      	movs	r3, #16
 8009bdc:	e7ac      	b.n	8009b38 <_printf_i+0xf4>
 8009bde:	4827      	ldr	r0, [pc, #156]	@ (8009c7c <_printf_i+0x238>)
 8009be0:	e7e9      	b.n	8009bb6 <_printf_i+0x172>
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	f023 0320 	bic.w	r3, r3, #32
 8009be8:	6023      	str	r3, [r4, #0]
 8009bea:	e7f6      	b.n	8009bda <_printf_i+0x196>
 8009bec:	4616      	mov	r6, r2
 8009bee:	e7bd      	b.n	8009b6c <_printf_i+0x128>
 8009bf0:	6833      	ldr	r3, [r6, #0]
 8009bf2:	6825      	ldr	r5, [r4, #0]
 8009bf4:	6961      	ldr	r1, [r4, #20]
 8009bf6:	1d18      	adds	r0, r3, #4
 8009bf8:	6030      	str	r0, [r6, #0]
 8009bfa:	062e      	lsls	r6, r5, #24
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	d501      	bpl.n	8009c04 <_printf_i+0x1c0>
 8009c00:	6019      	str	r1, [r3, #0]
 8009c02:	e002      	b.n	8009c0a <_printf_i+0x1c6>
 8009c04:	0668      	lsls	r0, r5, #25
 8009c06:	d5fb      	bpl.n	8009c00 <_printf_i+0x1bc>
 8009c08:	8019      	strh	r1, [r3, #0]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	6123      	str	r3, [r4, #16]
 8009c0e:	4616      	mov	r6, r2
 8009c10:	e7bc      	b.n	8009b8c <_printf_i+0x148>
 8009c12:	6833      	ldr	r3, [r6, #0]
 8009c14:	1d1a      	adds	r2, r3, #4
 8009c16:	6032      	str	r2, [r6, #0]
 8009c18:	681e      	ldr	r6, [r3, #0]
 8009c1a:	6862      	ldr	r2, [r4, #4]
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f7f6 fb06 	bl	8000230 <memchr>
 8009c24:	b108      	cbz	r0, 8009c2a <_printf_i+0x1e6>
 8009c26:	1b80      	subs	r0, r0, r6
 8009c28:	6060      	str	r0, [r4, #4]
 8009c2a:	6863      	ldr	r3, [r4, #4]
 8009c2c:	6123      	str	r3, [r4, #16]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c34:	e7aa      	b.n	8009b8c <_printf_i+0x148>
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	4632      	mov	r2, r6
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	4640      	mov	r0, r8
 8009c3e:	47d0      	blx	sl
 8009c40:	3001      	adds	r0, #1
 8009c42:	d0ad      	beq.n	8009ba0 <_printf_i+0x15c>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	079b      	lsls	r3, r3, #30
 8009c48:	d413      	bmi.n	8009c72 <_printf_i+0x22e>
 8009c4a:	68e0      	ldr	r0, [r4, #12]
 8009c4c:	9b03      	ldr	r3, [sp, #12]
 8009c4e:	4298      	cmp	r0, r3
 8009c50:	bfb8      	it	lt
 8009c52:	4618      	movlt	r0, r3
 8009c54:	e7a6      	b.n	8009ba4 <_printf_i+0x160>
 8009c56:	2301      	movs	r3, #1
 8009c58:	4632      	mov	r2, r6
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	47d0      	blx	sl
 8009c60:	3001      	adds	r0, #1
 8009c62:	d09d      	beq.n	8009ba0 <_printf_i+0x15c>
 8009c64:	3501      	adds	r5, #1
 8009c66:	68e3      	ldr	r3, [r4, #12]
 8009c68:	9903      	ldr	r1, [sp, #12]
 8009c6a:	1a5b      	subs	r3, r3, r1
 8009c6c:	42ab      	cmp	r3, r5
 8009c6e:	dcf2      	bgt.n	8009c56 <_printf_i+0x212>
 8009c70:	e7eb      	b.n	8009c4a <_printf_i+0x206>
 8009c72:	2500      	movs	r5, #0
 8009c74:	f104 0619 	add.w	r6, r4, #25
 8009c78:	e7f5      	b.n	8009c66 <_printf_i+0x222>
 8009c7a:	bf00      	nop
 8009c7c:	08009e05 	.word	0x08009e05
 8009c80:	08009e16 	.word	0x08009e16

08009c84 <memmove>:
 8009c84:	4288      	cmp	r0, r1
 8009c86:	b510      	push	{r4, lr}
 8009c88:	eb01 0402 	add.w	r4, r1, r2
 8009c8c:	d902      	bls.n	8009c94 <memmove+0x10>
 8009c8e:	4284      	cmp	r4, r0
 8009c90:	4623      	mov	r3, r4
 8009c92:	d807      	bhi.n	8009ca4 <memmove+0x20>
 8009c94:	1e43      	subs	r3, r0, #1
 8009c96:	42a1      	cmp	r1, r4
 8009c98:	d008      	beq.n	8009cac <memmove+0x28>
 8009c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ca2:	e7f8      	b.n	8009c96 <memmove+0x12>
 8009ca4:	4402      	add	r2, r0
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	428a      	cmp	r2, r1
 8009caa:	d100      	bne.n	8009cae <memmove+0x2a>
 8009cac:	bd10      	pop	{r4, pc}
 8009cae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cb6:	e7f7      	b.n	8009ca8 <memmove+0x24>

08009cb8 <_sbrk_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4d06      	ldr	r5, [pc, #24]	@ (8009cd4 <_sbrk_r+0x1c>)
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	4608      	mov	r0, r1
 8009cc2:	602b      	str	r3, [r5, #0]
 8009cc4:	f7f8 fe44 	bl	8002950 <_sbrk>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	d102      	bne.n	8009cd2 <_sbrk_r+0x1a>
 8009ccc:	682b      	ldr	r3, [r5, #0]
 8009cce:	b103      	cbz	r3, 8009cd2 <_sbrk_r+0x1a>
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
 8009cd4:	2000072c 	.word	0x2000072c

08009cd8 <memcpy>:
 8009cd8:	440a      	add	r2, r1
 8009cda:	4291      	cmp	r1, r2
 8009cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ce0:	d100      	bne.n	8009ce4 <memcpy+0xc>
 8009ce2:	4770      	bx	lr
 8009ce4:	b510      	push	{r4, lr}
 8009ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cee:	4291      	cmp	r1, r2
 8009cf0:	d1f9      	bne.n	8009ce6 <memcpy+0xe>
 8009cf2:	bd10      	pop	{r4, pc}

08009cf4 <_realloc_r>:
 8009cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf8:	4680      	mov	r8, r0
 8009cfa:	4615      	mov	r5, r2
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	b921      	cbnz	r1, 8009d0a <_realloc_r+0x16>
 8009d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d04:	4611      	mov	r1, r2
 8009d06:	f7ff bc4b 	b.w	80095a0 <_malloc_r>
 8009d0a:	b92a      	cbnz	r2, 8009d18 <_realloc_r+0x24>
 8009d0c:	f7ff fbdc 	bl	80094c8 <_free_r>
 8009d10:	2400      	movs	r4, #0
 8009d12:	4620      	mov	r0, r4
 8009d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d18:	f000 f81a 	bl	8009d50 <_malloc_usable_size_r>
 8009d1c:	4285      	cmp	r5, r0
 8009d1e:	4606      	mov	r6, r0
 8009d20:	d802      	bhi.n	8009d28 <_realloc_r+0x34>
 8009d22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d26:	d8f4      	bhi.n	8009d12 <_realloc_r+0x1e>
 8009d28:	4629      	mov	r1, r5
 8009d2a:	4640      	mov	r0, r8
 8009d2c:	f7ff fc38 	bl	80095a0 <_malloc_r>
 8009d30:	4607      	mov	r7, r0
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d0ec      	beq.n	8009d10 <_realloc_r+0x1c>
 8009d36:	42b5      	cmp	r5, r6
 8009d38:	462a      	mov	r2, r5
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	bf28      	it	cs
 8009d3e:	4632      	movcs	r2, r6
 8009d40:	f7ff ffca 	bl	8009cd8 <memcpy>
 8009d44:	4621      	mov	r1, r4
 8009d46:	4640      	mov	r0, r8
 8009d48:	f7ff fbbe 	bl	80094c8 <_free_r>
 8009d4c:	463c      	mov	r4, r7
 8009d4e:	e7e0      	b.n	8009d12 <_realloc_r+0x1e>

08009d50 <_malloc_usable_size_r>:
 8009d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d54:	1f18      	subs	r0, r3, #4
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	bfbc      	itt	lt
 8009d5a:	580b      	ldrlt	r3, [r1, r0]
 8009d5c:	18c0      	addlt	r0, r0, r3
 8009d5e:	4770      	bx	lr

08009d60 <_init>:
 8009d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d62:	bf00      	nop
 8009d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d66:	bc08      	pop	{r3}
 8009d68:	469e      	mov	lr, r3
 8009d6a:	4770      	bx	lr

08009d6c <_fini>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	bf00      	nop
 8009d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d72:	bc08      	pop	{r3}
 8009d74:	469e      	mov	lr, r3
 8009d76:	4770      	bx	lr
